:PROPERTIES:
:ID:       12f7748c-7095-4969-8261-94ad0169a24c
:CREATED:  [2022-08-30 Tue 11:12]
:UPDATED:  [2024-03-31 Sun 20:28]
:END:
#+property: header-args            :tangle-mode (identity #o444) :noweb yes
#+property: header-args:sh         :tangle-mode (identity #o755)
#+property: header-args:shell      :tangle-mode (identity #o755)
#+property: header-args:scheme     :noweb-ref conf-rde
#+property: header-args:elisp      :noweb-ref conf-emacs
#+property: header-args:emacs-lisp :noweb-ref conf-emacs
#+title: system config; gnu guix (rde) & emacs

* header
:PROPERTIES:
:ID:       d5a65665-c696-493b-a426-89a0ce6c1fbd
:CREATED:  [2023-07-12 Wed 19:42]
:UPDATED:  [2024-03-31 Sun 19:04]
:ROAM_EXCLUDE: t
:END:

all the host/user specific things.


#+begin_src scheme :noweb-ref header-imports
(rde features mail)
(rde features base)
(rde features gnupg)
#+end_src

#+begin_src scheme :tangle header.scm :noweb-ref null
(define-module (header)
  #:use-module <<header-imports>>
  )

;; NOWEB HEADER
<<header>>
;; NOWEB HEADER

(define-public my-hosts '()
  ;; ixy
  ;; live
  )


(define-public my-user "samuel")
(define-public my-timezone "Europe/Berlin")

(define-public my-feature-mail-settings
  (feature-mail-settings
   #:mail-accounts
   (list
    (mail-account
     (id   'personal)
     (fqda "samuel@samuelculpepper.com")
     (type 'bravehost))
    (mail-account
     (id   'work)
     (fqda "sculpepper@newstore.com")
     (type 'gmail-tls))
    (mail-account
     (id   'work-gcp)
     (fqda "sculpepper@newstore.net")
     (type 'gmail-tls))
    (mail-account
     (id   'yt)
     (fqda "imzaniiyt@gmail.com")
     (type 'gmail-tls)))
   #:mailing-lists
   (list
    ;; https://public-inbox.org/README.html
    (mail-lst 'public-inbox-meta "meta@public-inbox.org"
              '("https://public-inbox.org/meta"
                "nntps://news.public-inbox.org/inbox.comp.mail.public-inbox.meta"
                "imaps://news.public-inbox.org/inbox.comp.mail.public-inbox.meta.0"))

     ;;;; source: https://mail.python.org/archives/list/speed@python.org/latest
     ;;;;  -> mbox: https://mail.python.org/archives/list/speed@python.org/export/speed@python.org-2022-02.mbox.gz?start=1970-01-01&end=2022-02-21
     ;;;; (mail-lst 'python-speed "speed@python.org"
     ;;;;           '("https://mail.python.org/mailman/listinfo/speed"
     ;;;;             "https://mail.python.org/archives/list/speed@python.org/"))
    ;;
     ;;;; (mail-lst 'rde-announce "~acbdw/rde-announce@lists.sr.ht"
     ;;;;           '("https://lists.sr.ht/~abcdw/rde-announce/export"))
     ;;;; (mail-lst 'rde-discuss "~acbdw/rde-discuss@lists.sr.ht"
     ;;;;           '("https://lists.sr.ht/~abcdw/rde-discuss"))
     ;;;; (mail-lst 'rde-devel "~acbdw/rde-devel@lists.sr.ht"
     ;;;;           '("https://lists.sr.ht/~abcdw/rde-devel"))
     ;;;;; emacs
    ;;(mail-lst 'emacs-org-mode "emacs-orgmode@gnu.org"
    ;;          '("https://yhetil.org/orgmode"))
    ;;(mail-lst 'emacs-bugs "bug-gnu-emacs@gnu.org"
    ;;          '("https://yhetil.org/emacs-bugs"))
    ;;
    ;;
    ;;(mail-lst 'emacs-hyperbole "bug-hyperbole@gnu.org"
    ;;          '("https://lists.gnu.org/archive/mbox/bug-hyperbole"
    ;;            "https://lists.gnu.org/archive/html/bug-hyperbole"))
    ;;(mail-lst 'emacs-hyperbole-users "hyperbole-users@gnu.org"
    ;;          '("https://lists.gnu.org/archive/mbox/hyperbole-users"
    ;;            "https://lists.gnu.org/archive/html/hyperbole-users"))
    ;;
    ;;(mail-lst 'guix-bugs "guix-bugs@gnu.org"
    ;;          '("https://yhetil.org/guix-bugs/0"))
    ;;(mail-lst 'guix-devel "guix-devel@gnu.org"
    ;;          '("https://yhetil.org/guix-devel/0"))
    ;;(mail-lst 'guix-patches "guix-patches@gnu.org"
    ;;          '("https://yhetil.org/guix-patches/1"))
    )))

(define-public my-feature-user-info
  (feature-user-info
   #:emacs-advanced-user? #t
   #:user-name my-user
   #:full-name "Samuel Culpepper"
   #:email "samuel@samuelculpepper.com"
   #:user-groups '(;; basic groups
                   "lp" "wheel" "video"
                   ;;; qmk, zsa
                   ;; "plugdev" ;; FIXME ??? supplementary group [...] undefined
                   )
   ))

(define-public my-feature-gnupg
  (feature-gnupg
   #:gpg-primary-key "EE20E25391AAB9BB"))
#+end_src


* configs
:PROPERTIES:
:ID:       7c9c9408-15b7-4d3e-be98-9b2bda19e7d5
:CREATED:  [2022-09-28 Wed 16:24]
:UPDATED:  [2023-09-23 Sat 21:22]
:ROAM_EXCLUDE: t
:END:

** rde
:PROPERTIES:
:ID:       c5578b40-1344-4d48-9b24-5c8f13fa3f77
:CREATED:  [2022-07-29 Fri 18:22]
:UPDATED:  [2023-09-24 Sun 00:27]
:ROAM_EXCLUDE: t
:END:

*** header
:PROPERTIES:
:ID:       53756386-28a4-4f37-b819-4ce10572406c
:CREATED:  [2023-07-23 Sun 11:33]
:UPDATED:  [2024-01-24 Wed 13:52]
:ROAM_EXCLUDE: t
:END:

**** boiler
:PROPERTIES:
:ID:       70c315de-8a81-4ce7-b5aa-9a5b679859c2
:CREATED:  [2023-07-23 Sun 11:33]
:UPDATED:  [2023-07-23 Sun 11:33]
:ROAM_EXCLUDE: t
:END:

***** AAA tangle rde
:PROPERTIES:
:ID:       98f42608-b5c0-455d-bb02-9a326af8bc42
:CREATED:  [2022-08-01 Mon 09:49]
:UPDATED:  [2023-07-12 Wed 19:56]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :tangle configs.scm :noweb-ref base-rde
<<conf-rde>>
#+end_src

***** defmodule
:PROPERTIES:
:ID:       6bb15998-32c1-4674-890a-85180a89d66a
:CREATED:  [2022-07-29 Fri 18:22]
:UPDATED:  [2024-03-31 Sun 19:01]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(define-module (configs)

  #:use-module (header)
  #:use-module (emacs)

  #:use-module (gnu bootloader)
  #:use-module (gnu bootloader grub)

  #:use-module (gnu home services) ; nope
  #:use-module (gnu home-services shells)
  #:use-module (gnu home-services ssh)

  #:use-module (gnu packages emacs-xyz)
  #:use-module (gnu packages fonts)
  #:use-module (gnu packages video)
  #:use-module (gnu packages wm)
  #:use-module (gnu packages)

  #:use-module (gnu services base)
  #:use-module (gnu services desktop)
  #:use-module (gnu services ssh)
  #:use-module (gnu services xorg)
  #:use-module (gnu services nfs)

  #:use-module (gnu system file-systems)
  #:use-module (gnu system keyboard)
  #:use-module (gnu system mapped-devices)
  #:use-module (gnu system shadow) ; account-service-type

  #:use-module (guix channels)
  #:use-module (guix gexp)
  #:use-module (guix inferior)
  #:use-module (guix utils)

  #:use-module (ice-9 match)
  #:use-module (ice-9 pretty-print)

  #:use-module (rde features)
  #:use-module (rde features base)
  #:use-module (rde features bittorrent)
  #:use-module (rde features bluetooth)
  #:use-module (rde features clojure)
  #:use-module (rde features docker)
  #:use-module (rde features emacs)
  #:use-module (rde features emacs-xyz)
  #:use-module (rde features fontutils)
  #:use-module (rde features gnupg)
  #:use-module (rde features keyboard)
  #:use-module (rde features linux)
  #:use-module (rde features mail)
  #:use-module (rde features markup)
  #:use-module (rde features matrix)
  #:use-module (rde features messaging)
  #:use-module (rde features networking)
  #:use-module (rde features password-utils)
  #:use-module (rde features presets)
  #:use-module (rde features python)
  #:use-module (rde features shells)
  #:use-module (rde features shellutils)
  #:use-module (rde features ssh)
  #:use-module (rde features system)
  #:use-module (rde features terminals)
  #:use-module (rde features uml)
  #:use-module (rde features version-control)
  #:use-module (rde features video)
  #:use-module (rde features virtualization)
  #:use-module (rde features web-browsers)
  #:use-module (rde features wm)
  #:use-module (rde features xdg)
  #:use-module (rde features xdisorg)
  ;;#:use-module (rde features irc)

  #:use-module (rde gexp)

  #:use-module (rde home services i2p)
  #:use-module (rde home services emacs)

  #:use-module (rde packages emacs)
  #:use-module (rde packages emacs-xyz)
  #:use-module (rde packages)

  #:use-module (rde system services accounts)

  ;;#:use-module (gnu home-services shellutils)

  #:use-module (nongnu packages nvidia)
  #:use-module (nongnu services nvidia)

  ;;#:use-module (rde features bluetooth) ;; TODO qzdl

  #:use-module (srfi srfi-1))
#+end_src

***** helpers
:PROPERTIES:
:ID:       b76849d3-0686-46d0-b40d-f590c7f15ed0
:CREATED:  [2022-08-08 Mon 11:38]
:UPDATED:  [2022-08-08 Mon 11:38]
:ROAM_EXCLUDE: t
:END:

****** mailing list
:PROPERTIES:
:ID:       74689f33-9e2f-4cf1-bbdf-317a29e66572
:CREATED:  [2022-07-29 Fri 17:48]
:UPDATED:  [2022-07-29 Fri 17:48]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref header
(define* (mail-lst id fqda urls)
  "Make a simple mailing-list."
  (mailing-list
   (id   id)
   (fqda fqda)
   (config (l2md-repo ;; XXX maildir issue might be here
            (name (symbol->string id))
            (urls urls)))))
#+end_src

****** mail serializers (bravehost | gmail-tls)
:PROPERTIES:
:ID:       fb637534-e1ae-493b-bf5e-0cdc5ec1cc2f
:CREATED:  [2022-08-29 Mon 17:06]
:UPDATED:  [2024-03-04 Mon 11:52]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(use-modules (rde features mail))

(define bravehost-folder-mapping
  '(("inbox"  . "INBOX")
    ("accounts" . "INBOX/Accounts")
    ("cv" . "INBOX/CV")
    ("info" . "INBOX/info")
    ("sent"   . "Sent")
    ("drafts" . "Drafts")
    ("trash"  . "Deleted Items")
    ("spam"   . "Junk")))

;; https://wiki.bravenet.com/Using_your_Bravenet_e-mail_account
(define bravehost-isync-settings
  (generate-isync-serializer "mail.bravehost.com" bravehost-folder-mapping))

(define gmail-tls-folder-mapping
  '(("inbox"   . "INBOX")
    ("sent"    . "[Gmail]/Sent Mail")
    ("drafts"  . "[Gmail]/Drafts")
    ("archive" . "[Gmail]/All Mail")
    ("trash"   . "[Gmail]/Trash")
    ("spam"    . "[Gmail]/Spam")))

(define gmail-tls-isync-settings
  (generate-isync-serializer "imap.gmail.com" gmail-tls-folder-mapping))
#+end_src


******* keyboard
:PROPERTIES:
:ID:       2ff244bf-5916-4a3b-afa6-6b2e34cb7e21
:CREATED:  [2022-07-29 Fri 17:48]
:UPDATED:  [2022-07-29 Fri 17:48]
:ROAM_EXCLUDE: t
:END:

******** thinkpad
:PROPERTIES:
:ID:       f0d98fbe-0033-47e3-81c3-c592f70c0b8a
:CREATED:  [2022-07-29 Fri 17:48]
:UPDATED:  [2022-08-02 Tue 13:31]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(define %thinkpad-layout
  (keyboard-layout
   "us" "altgr-intl"
   #:model "thinkpad"
   #:options '("ctrl:nocaps")))
#+end_src

*** state
:PROPERTIES:
:ID:       bb13a7c7-56b3-42cb-9716-6b56cef8968c
:CREATED:  [2023-07-23 Sun 11:33]
:UPDATED:  [2023-07-23 Sun 11:33]
:ROAM_EXCLUDE: t
:END:

**** shell
:PROPERTIES:
:ID:       5dadad59-f7c7-425c-8108-f486062baeb0
:CREATED:  [2023-07-23 Sun 11:33]
:UPDATED:  [2023-07-23 Sun 11:33]
:ROAM_EXCLUDE: t
:END:
***** zshrc
:PROPERTIES:
:ID:       a95216e5-aecd-4a61-b0c3-3bf266189a6d
:CREATED:  [2022-07-29 Fri 17:48]
:UPDATED:  [2022-07-29 Fri 17:48]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(define %extra-zshrc
  (list ;; XXX higher level category
   ;; something which evals equiv to following for each promptline "PS1=\"[$(date -u '+%Y-%m-%d | %H:%M')] $PS1\""
   "alias ns='cd $HOME/git/ns'"
   "alias om='ns && cd om'"
   "alias omom='om && cd om'"
   "alias rt='ns && cd routing'"
   "alias sys='cd $HOME/git/sys'"

   ;; TIL https://unix.stackexchange.com/questions/225943/except-the-1st-argument
   "rgw() { d=$1; p=$2; argv[1,2]=(); rg $p $d $@; }"
   "alias rgg='rgw $HOME/git/'"
   "alias rgr='rgw $HOME/git/sys/rde'"
   "alias rgns='rgw $HOME/git/ns'"
   "alias rgom='rgw $HOME/git/ns/om'"
   "alias rgrt='rgw $HOME/git/ns/routing'"
   "alias rgsys='rgw $HOME/git/sys'"

   "alias gp='ls $GUIX_EXTRA_PROFILES'"
   "_gP() { export GUIX_PROFILE=$1 ; }"
   "alias gP='_gP'"
   "_gsP() { . $GUIX_EXTRA_PROFILES/$1/$1 ; }"
   "gsP=_gsP"
   ))
#+end_src

**** org dirs
:PROPERTIES:
:ID:       844e60fb-8235-4249-8aa8-27c8348c5dcb
:CREATED:  [2022-07-29 Fri 17:48]
:UPDATED:  [2022-07-29 Fri 17:48]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(define my-org-directory "~/life")
(define my-notes-directory
  (string-append my-org-directory "/roam"))
#+end_src

**** flag: gaming?
:PROPERTIES:
:ID:       a5883df9-7c45-442b-82a4-fe57ac98f7f8
:CREATED:  [2022-07-29 Fri 17:48]
:UPDATED:  [2022-07-29 Fri 18:25]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(define gaming? #f)
#+end_src

*** packages
:PROPERTIES:
:ID:       5508a976-f9ad-457c-b4bb-46dbf3b73fb0
:CREATED:  [2022-07-29 Fri 17:36]
:UPDATED:  [2024-03-31 Sun 19:03]
:END:

**** pkgs, pkgs-vanilla (helper)                                               :func:
:PROPERTIES:
:ID:       5fb5abba-de52-453a-8cfb-875f6d6897ba
:CREATED:  [2022-08-08 Mon 11:41]
:UPDATED:  [2023-07-13 Thu 09:46]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme

;;; Generic features should be applicable for various hosts/users/etc

(define* (pkgs #:rest lst)
  (map specification->package+output lst))

(define* (pkgs-vanilla #:rest lst)
  "Packages from guix channel."
  (define channel-guix
    (list (channel
           (name 'guix)
           (url "https://git.savannah.gnu.org/git/guix.git")
           ;;;; [2023-07-13 Thu 09:46]
           (commit "2794caed7c813f2ec4249236de36eaccafee8361"))))

  (define inferior (inferior-for-channels channel-guix))
  (define (get-inferior-pkg pkg-name)
    (car (lookup-inferior-packages inferior pkg-name)))

  (map get-inferior-pkg lst))
#+end_src

**** my packages
:PROPERTIES:
:ID:       98d207f1-31fa-40cb-9deb-c39e0026ef22
:CREATED:  [2022-08-08 Mon 11:38]
:UPDATED:  [2022-08-08 Mon 11:38]
:ROAM_EXCLUDE: t
:END:

***** imports
:PROPERTIES:
:ID:       7cdd0670-d06b-4310-9239-e39c1e938624
:CREATED:  [2022-08-08 Mon 11:39]
:UPDATED:  [2022-08-08 Mon 12:06]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme

(use-modules
 (gnu packages)
 (guix packages)
 (guix gexp)
 (guix utils)
 (guix download)
 (guix git-download)
 (gnu packages emacs)
 (gnu packages emacs-xyz)
 (guix build-system emacs)
 (guix build-system gnu)
 ((guix licenses) #:prefix license:))

#+end_src

***** emacs
:PROPERTIES:
:CREATED:  [2023-09-24 Sun 15:48]
:UPDATED:  [2024-03-31 Sun 19:03]
:ID:       8e9b8179-cf15-4672-a15b-c6f020e0e7e8
:ROAM_EXCLUDE: t
:END:
****** emacs-sql-indent
:PROPERTIES:
:ID:       1bca3f7a-3f6b-4ffa-bf10-0856b0eb8a01
:CREATED:  [2022-08-08 Mon 11:39]
:UPDATED:  [2022-09-28 Wed 16:39]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(define-public emacs-sql-indent
  (package
   (name "emacs-sql-indent")
   (version "1.6")
   (source
    (origin
     (method url-fetch)
     (uri (string-append
           "https://elpa.gnu.org/packages/sql-indent-"
           version
           ".tar"))
     (sha256
      (base32 "000pimlg0k4mrv2wpqq8w8l51wpr1lzlaq6ai8iaximm2a92ap5b"))))
   (build-system emacs-build-system)
   (home-page "https://github.com/alex-hhh/emacs-sql-indent")
   (synopsis "Support for indenting code in SQL files.")
   (description
    "`sqlind-minor-mode' is a minor mode that enables syntax-based indentation for
`sql-mode' buffers: the TAB key indents the current line based on the SQL code
on previous lines.  To setup syntax-based indentation for every SQL buffer, add
`sqlind-minor-mode' to `sql-mode-hook'.  Indentation rules are flexible and can
be customized to match your personal coding style.  For more information, see
the \"sql-indent.org\" file.

The package also defines align rules so that the `align' function works for SQL
statements, see `sqlind-align-rules'.")
   (license license:gpl3+)))
#+end_src

****** emacs-org-ml
:PROPERTIES:
:ID:       91194ee1-6cf0-46ff-8685-efc0a076697a
:CREATED:  [2022-10-04 Tue 15:52]
:UPDATED:  [2022-10-04 Tue 15:52]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(define-public emacs-org-ml
  (package
   (name "emacs-org-ml")
   (version "20220711.1528")
   (source (origin
            (method git-fetch)
            (uri (git-reference
                  (url "https://github.com/ndwarshuis/org-ml.git")
                  (commit "385e3bee497f858705144d7ab5e6570d31d3ffe8")))
            (sha256
             (base32
              "0j506lp3lgf9iz94ag041bpdcr837j5lmbazq7v3brblm43dvh9p"))))
   (build-system emacs-build-system)
   (propagated-inputs (list emacs-org emacs-dash emacs-s))
   (home-page "https://github.com/ndwarshuis/org-ml")
   (synopsis "Functional Org Mode API")
   (description
    "This is a functional API for org-mode primarily using the `org-element' library.
`org-element.el' provides the means for converting an org buffer to a parse-tree
data structure.  This library contains functions to modify this parse-tree in a
more-or-less 'purely' functional manner (with the exception of parsing from the
buffer and writing back to the buffer).  For the purpose of this package, the
resulting parse tree is composed of 'nodes'.

This library exposes the following types of functions: - builder: build new
nodes to be inserted into a parse tree - property functions: return either
property values (get) or nodes with   modified properties (set and map) -
children functions: return either children of nodes (get) or return a node
with modified children (set and map) - node predicates: return t if node meets a
condition - pattern matching: return nodes based on a pattern that matches the
parse   tree (and perform operations on those nodes depending on the function) -
parsers: parse a buffer (optionally at current point) and return a parse   tree
- writers: insert/update the contents of a buffer given a parse tree

For examples please see full documentation at:
https://github.com/ndwarshuis/org-ml")
   (license license:gpl3+)))
#+end_src

****** emacs-moldable-emacs
:PROPERTIES:
:ID:       3c32dec6-4f12-4aa0-ad00-98b433c966e8
:CREATED:  [2022-10-05 Wed 19:07]
:UPDATED:  [2023-07-04 Tue 09:46]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(define-public emacs-moldable-emacs
  (package
    (name "emacs-moldable-emacs")
    (version "20220825.0037")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/ag91/moldable-emacs")
             (commit "53f8b3af4572ab12be9f1f96da848278507ef350")))
       (sha256
        (base32 "1jcac4hiyh98q8cvim6yjaw1xihsy3r5lnjhijr3p89z2bv481xl"))))
    (arguments
     (list
      ;; #:tests? #true
      ;; #:test-command
      ;; #~(list "emacs" "-Q" "--batch"
      ;;         "-L" "test"
      ;;         "--load" "test/testein-loader.el")
      #:phases
      #~(modify-phases %standard-phases
          (add-after 'unpack 'install-molds
            (lambda _
              (for-each
               (lambda (f)
                 (install-file
                  f (string-append (elpa-directory #$output)
                                   "/molds")))
               (find-files "./molds" ".*"))
              (for-each
               (lambda (f)
                 (install-file
                  f (string-append (elpa-directory #$output)
                                   "/tutorials")))
               (find-files "./tutorials" ".*")))))))
    (build-system emacs-build-system)
   ;;; propagated (external)
    ;; (check these via the mold “WhatMoldsCanIUse?”)
    ;; graph-cli
    ;; graphviz
    ;; imgclip
    ;; emacs-csv-mode OPTIONAL (buffer size to bar chart)
    (propagated-inputs
     (list emacs-dash
           emacs-s
           emacs-async
           ;; emacs-thunk builtin
           emacs-esxml
           emacs-org-ql
           ;; emacs-tree-sitter
           ;; emacs-code-compass
           ))
    (home-page "https://github.com/ag91/moldable-emacs")

    (synopsis "TODO")
    (description
     "TODO")
    (license license:gpl3+)))
#+end_src

****** emacs-ob-go
:PROPERTIES:
:ID:       58790647-3625-4145-87d8-2a5baa335b0f
:CREATED:  [2022-08-08 Mon 16:45]
:UPDATED:  [2022-09-28 Wed 16:40]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme

(define-public emacs-ob-go
  (package
   (name "emacs-ob-go")
   (version "20190201.214")
   (source
    (origin
     (method git-fetch)
     (uri (git-reference
           (url "https://github.com/pope/ob-go")
           (commit "2067ed55f4c1d33a43cb3f6948609d240a8915f5")))
     (sha256
      (base32 "069w9dymiv97cvlpzabf193nyw174r38lz5j11x23x956ladvpbw"))))
   (build-system emacs-build-system)
   (propagated-inputs (list emacs-org))
   (home-page "https://github.com/pope/ob-go")
   (synopsis "Org-Babel support for evaluating go code.")
   (description
    "@code{ob-go} enables @{Org-Babel} support for evaluating @code{go}
code. It was created based on the usage of @code{ob-C}. The @code{go}
code is compiled and run via the @code{go run} command. If a
@code{main} function isn’t present, by default the code is wrapped in
a simple @{main func}. If @code{:package} option isn’t set, and no
package is declared in the code, then the @code{main package} is
declared.")
   (license license:gpl3+)))
#+end_src

****** emacs-ox-jira
:PROPERTIES:
:ID:       f8bac9c3-36b2-4c70-a8e1-3bc6d3c981a4
:CREATED:  [2022-10-04 Tue 16:09]
:UPDATED:  [2022-10-04 Tue 16:09]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(define-public emacs-ox-jira
  (package
   (name "emacs-ox-jira")
   (version "20220423.1403")
   (source (origin
            (method git-fetch)
            (uri (git-reference
                  (url "https://github.com/stig/ox-jira.el.git")
                  (commit "00184f8fdef02a3a359a253712e8769cbfbea3ba")))
            (sha256
             (base32
              "1zyq4d0fvyawvb3w6072zl4zgbnrpzmxlz2l731wqrgnwm0l80gy"))))
   (build-system emacs-build-system)
   (propagated-inputs (list emacs-org))
   (home-page "https://github.com/stig/ox-jira.el")
   (synopsis "JIRA Backend for Org Export Engine")
   (description
    "This module plugs into the regular Org Export Engine and transforms Org files to
JIRA markup for pasting into JIRA tickets & comments.

In an Org buffer, hit `C-c C-e j j' to bring up *Org Export Dispatcher* and
export it as a JIRA buffer.  I usually use `C-x h' to mark the whole buffer,
then `M-w' to save it to the kill ring (and global pasteboard) for pasting into
JIRA issues.")
   (license license:gpl3+)))
#+end_src

****** emacs-kubernetes
:PROPERTIES:
:ID:       584e9a93-0058-4bf5-8573-69b35b93e8c0
:CREATED:  [2022-10-12 Wed 13:27]
:UPDATED:  [2022-10-12 Wed 13:39]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme

(define-public emacs-kubernetes
  (package
   (name "emacs-kubernetes")
   (version "20220715.1717")
   (source (origin
            (method git-fetch)
            (uri (git-reference
                  (url "https://github.com/kubernetes-el/kubernetes-el.git")
                  (commit "8163fd38015cbde0485f6eaab41450132bf6e19d")))
            (sha256
             (base32
              "06p5qz4h5ar86vv4nzpw08x18fjvs2zg5brx55h80hjdgr89b771"))))
   (build-system emacs-build-system)
   (inputs (list emacs-magit
                 emacs-magit-popup
                 emacs-dash
                 emacs-with-editor
                 emacs-request
                 emacs-s
                 emacs-transient))
   (arguments
    '(#:include '("^[^/]+.el$" "^[^/]+.el.in$"
                  "^dir$"
                  "^[^/]+.info$"
                  "^[^/]+.texi$"
                  "^[^/]+.texinfo$"
                  "^doc/dir$"
                  "^doc/[^/]+.info$"
                  "^doc/[^/]+.texi$"
                  "^doc/[^/]+.texinfo$")
                #:exclude '("^.dir-locals.el$" "^test.el$" "^tests.el$" "^[^/]+-test.el$"
                            "^[^/]+-tests.el$" "^kubernetes-evil.el$")))
   (home-page "https://github.com/kubernetes-el/kubernetes-el")
   (synopsis "Magit-like porcelain for Kubernetes")
   (description
    "kubernetes-el is a text-based, interactive management interface for managing
Kubernetes clusters within Emacs.")
   (license license:gpl3+)))
#+end_src

****** emacs-ox-slack
:PROPERTIES:
:ID:       a24f5f97-483b-440b-adb7-a1cd7732a212
:UPDATED:  [2022-11-08 Tue 12:36]
:END:

#+begin_src scheme
(define-public emacs-ox-slack
  (package
   (name "emacs-ox-slack")
   (version "20200108.1546")
   (source (origin
            (method git-fetch)
            (uri (git-reference
                  (url "https://github.com/titaniumbones/ox-slack.git")
                  (commit "bd797dcc58851d5051dc3516c317706967a44721")))
            (sha256
             (base32
              "1kh2v08fqmsmfj44ik8pljs3fz47fg9zf6q4mr99c0m5ccj5ck7w"))))
   (build-system emacs-build-system)
   (propagated-inputs (list emacs-org emacs-ox-gfm))
   (home-page "https://github.com/titaniumbones/ox-slack")
   (synopsis "Slack Exporter for org-mode")
   (description
    "This library implements a Slack backend for the Org exporter, based on the `md
and `gfm back-ends.")
   (license license:gpl3+)))
#+end_src

****** emacs-svg-clock
:PROPERTIES:
:ID:       9765acda-2dc5-45ea-9196-5abfb1ae29da
:CREATED:  [2022-11-21 Mon 18:22]
:UPDATED:  [2022-11-22 Tue 11:45]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(define-public emacs-svg-clock
  (package
   (name "emacs-svg-clock")
   (version "1.2")
   (source (origin
            (method url-fetch)
            (uri (string-append "https://elpa.gnu.org/packages/svg-clock-"
                                version ".el"))
            (sha256
             (base32
              "15pmj07wnlcpv78av9qpnbfwdjlkf237vib8smpa7nvyikdfszfr"))))
   (build-system emacs-build-system)
   (propagated-inputs (list emacs-svg-lib))
   (home-page "http://elpa.gnu.org/packages/svg-clock.html")
   (synopsis "Analog clock using Scalable Vector Graphics")
   (description
    "svg-clock provides a scalable analog clock.  Rendering is done by means of svg
(Scalable Vector Graphics).  In order to use svg-clock you need to build Emacs
with svg support. (To check whether your Emacs supports svg, do \"M-:
(image-type-available-p svg) RET\" which must return t).  Call `svg-clock to
start a clock.  This will open a new buffer \"*clock*\" displaying a clock which
fills the buffer's window.  Use `svg-clock-insert to insert a clock
programmatically in any buffer, possibly specifying the clock's size, colours
and offset to the current-time.  Arbitrary many clocks can be displayed
independently.  Clock instances ared updated automatically.  Their resources
(timers etc.) are cleaned up automatically when the clocks are removed.")
   (license license:gpl3+)))
#+end_src

****** emacs-consult-recoll
:PROPERTIES:
:ID:       bfd3fa1e-935b-4c03-9b16-0bb232ddcfce
:CREATED:  [2023-03-04 Sat 12:33]
:UPDATED:  [2023-03-04 Sat 12:33]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(define-public emacs-consult-recoll
  (package
    (name "emacs-consult-recoll")
    (version "0.8")
    (source (origin
              (method url-fetch)
              (uri (string-append
                    "https://elpa.gnu.org/packages/consult-recoll-" version
                    ".tar"))
              (sha256
               (base32
                "02vg1rr2fkcqrrivqgggdjdq0ywvlyzazwq1xd02yah3j4sbv4ag"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-consult))
    (home-page "https://codeberg.org/jao/consult-recoll")
    (synopsis "Recoll queries using consult")
    (description "This package provides an emacs interface to perform recoll queries, and display its results, via consult. It is also recommened that you use a a package for vertical display of completions that works well with consult, such as vertico.")
    (license license:gpl3+)))
    #+end_src

****** emacs-bigquery-mode
:PROPERTIES:
:ID:       47bf4150-8113-438f-9b56-87bc6e24744c
:CREATED:  [2023-04-03 Mon 12:17]
:UPDATED:  [2024-01-25 Thu 16:06]
:ROAM_EXCLUDE: t
:END:

#+name: guix-bq
#+call: guix-shell-repo-info(URL="https://github.com/christophstockhusen/bigquery-mode") :cache yes

#+RESULTS[2b0e1f19649b93e1a0fadab78ef05e5175e69c05]:
:results:
| url      | https://github.com/christophstockhusen/bigquery-mode |
| repo     | bigquery-mode                                        |
| checkout | /tmp/bigquery-mode                                   |
| hash     | 0w1b2d64hdzxk58lq0zfpfavmi8w80lmgqybvgfkl7l3mhnwzgj2 |
| sha      | 308bdccf194f1bca230de3a070459836e30b502a             |
| tag      | 20200412.155                                         |
:end:

#+begin_src scheme
;; :var props=guix-bq() :noweb yes
;; ^^ wow

(define-public emacs-bigquery-mode
  (package
    (name "emacs-bigquery-mode")
    (version "20200412.155")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/christophstockhusen/bigquery-mode")
             (commit "308bdccf194f1bca230de3a070459836e30b502a")))
       (file-name (git-file-name name version))
       (sha256
        (base32 "0w1b2d64hdzxk58lq0zfpfavmi8w80lmgqybvgfkl7l3mhnwzgj2"))))
    (propagated-inputs
     (list emacs-sql-indent))
    (build-system emacs-build-system)
    (home-page "https://github.com/christophstockhusen/bigquery-mode")
    (synopsis "Major mode for interacting with Google Cloud Platform's BigQuery")
    (description "Major mode for interacting with Google Cloud Platform's BigQuery")
    (license license:gpl3+)))

#+end_src

****** emacs-dogears
:PROPERTIES:
:ID:       11e33a8f-f5e3-4081-a337-23fe0ed7733c
:CREATED:  [2023-04-03 Mon 16:45]
:UPDATED:  [2023-04-03 Mon 16:48]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(define-public emacs-dogears
  (package
  (name "emacs-dogears")
  (version "20220829.441")
  (source (origin
            (method git-fetch)
            (uri (git-reference
                  (url "https://github.com/alphapapa/dogears.el.git")
                  (commit "5b8a85d03ca17d8b8185868fdbacf320784026d5")))
            (sha256
             (base32
              "0h4gh4ja9dnslj286skc8nzp9dvpyp53ig9y4kniq5lji6gn3r1f"))))
  (build-system emacs-build-system)
  (propagated-inputs (list emacs-map))
  (arguments
   '(#:include '("^[^/]+.el$" "^[^/]+.el.in$"
                 "^dir$"
                 "^[^/]+.info$"
                 "^[^/]+.texi$"
                 "^[^/]+.texinfo$"
                 "^doc/dir$"
                 "^doc/[^/]+.info$"
                 "^doc/[^/]+.texi$"
                 "^doc/[^/]+.texinfo$")
     #:exclude '("^.dir-locals.el$" "^test.el$" "^tests.el$" "^[^/]+-test.el$"
                 "^[^/]+-tests.el$" "^helm-dogears.el$")))
  (home-page "https://github.com/alphapapa/dogears.el")
  (synopsis "Never lose your place again")
  (description
   "This library automatically and smartly remembers where you've been, in and
across buffers, and helps you quickly return to any of those places.  It uses
the Emacs bookmarks system internally (but without modifying the
bookmarks-alist) to save and restore places with mode-specific functionality.")
  (license license:gpl3+)))
#+end_src

#+RESULTS:

******* dogears-remember
:PROPERTIES:
:ID:       74f332b7-de08-4ca7-b1bb-3e8d017d579c
:CREATED:  [2023-07-15 Sat 17:30]
:UPDATED:  [2023-07-15 Sat 19:13]
:END:

#+begin_src emacs-lisp
(defun dogears-remember (&rest _ignore)
  "Remember (\"dogear\") the current place."
  (interactive)
  (unless (cl-some 'funcall dogears-ignore-places-functions)
    (if-let* ((record (or (ignore-errors
                            (funcall bookmark-make-record-function))
                          (dogears--buffer-record)))
              (record (list (car record)
                            (append (cdr record)
                                    (cons 'region (call-interactively
                                                   'qz/anno-yank-region-to-point))))))

        (progn
          (pcase (car record)
            ;; Like `bookmark-make-record', we may have to add a string ourselves.
            ;; And we want every record to have one as its first element, for
            ;; consistency.  And sometimes, records have a nil name rather than an
            ;; empty string, depending on the bookmark-make-record-function (I'm
            ;; not sure if there are defined standards for what the first element
            ;; of a bookmark record should be).
            ((pred stringp)
             ;; Record already has a string as its first element: do nothing.
             nil)
            (`nil (setf (car record) ""))
            (_ (push "" record)))
          (setf (map-elt (cdr record) 'manual)
                (if (called-interactively-p 'interactive) "✓" " "))
          (unless (map-elt (cdr record) 'buffer)
            (setf (map-elt (cdr record) 'buffer) (buffer-name)))
          (when-let ((within (or (funcall dogears-within-function)
                                 (dogears--within)
                                 (car record))))
            (setf (map-elt (cdr record) 'within) within))
          (setf (map-elt (cdr record) 'mode) major-mode
                (map-elt (cdr record) 'line) (buffer-substring
                                              (point-at-bol) (point-at-eol)))
          ;; It's hard to say whether push or pushnew is the best choice.  When returning
          ;; to a dogeared place, that place gets moved to the front of the list, or it
          ;; remains where it was.  Either way, unless we allow dupes, the list changes.
          (cl-pushnew record dogears-list :test 'dogears--equal)
          (setf dogears-list (delete-dups dogears-list)
                dogears-list (seq-take dogears-list dogears-limit))
          (when (and dogears-update-list-buffer (buffer-live-p dogears-list-buffer))
            (with-current-buffer dogears-list-buffer
              (revert-buffer))))
      (when (called-interactively-p 'interactive)
        (message "Dogears: Couldn't dogear this place"))
      )))
#+end_src

#+RESULTS:
: dogears-remember

******* dogears-list-mode
:PROPERTIES:
:ID:       343eccdc-82d5-460b-b1b4-f7d083aee729
:UPDATED:  [2023-07-15 Sat 17:38]
:END:

#+begin_src emacs-lisp :noweb-ref null
(defun qz/dogears-list ()
  "Show dogears list."
  (interactive)
  (with-current-buffer (get-buffer-create "*Dogears List*")
    (setf dogears-list-buffer (current-buffer))
    (qz/dogears-list-mode)
    (pop-to-buffer (current-buffer))))

(define-derived-mode qz/dogears-list-mode tabulated-list-mode
  "Dogears-List"
  :group 'dogears
  (setf tabulated-list-format (vector
                               '("#" 3 (lambda (a b)
                                         (< (string-to-number (elt (cadr a) 0))
                                            (string-to-number (elt (cadr b) 0)))))
                               (list (propertize "✓" 'help-echo "Manually remembered") 1 t)
                               '("Region" 25 t :right-align t)
                               '("Relevance" 10 t :right-align t)
                               '("Within" 25 t)
                               '("Buffer" 20 t)
                               '("Directory" 25 t))
        tabulated-list-sort-key '("#" . nil)
        truncate-string-ellipsis dogears-ellipsis)
  (add-hook 'tabulated-list-revert-hook
            (lambda ()
              (setf tabulated-list-entries
                    (with-current-buffer (window-buffer (get-mru-window t nil nil))
                      (qz/dogears-list--entries))))
            nil 'local)
  (tabulated-list-init-header)
  (tabulated-list-revert))

(defun qz/dogears-list--entries ()
  "Return `tabulated-list-entries'."
  (cl-loop for place in dogears-list
           for i from 0
           collect (list place
                         (cl-coerce (cons (number-to-string i)
                                          (qz/dogears--format-record-list place))
                                    'vector))))

(defun qz/dogears--format-record-list (record)
  "Return a list of elements in RECORD formatted."
  (cl-labels ((face-propertize
                (string face)
                ;; Return copy of STRING with FACE appended, but only if it doesn't already
                ;; contain FACE.  (I don't know a better way to prevent faces being added
                ;; repeatedly, which eventually, drastically slows down redisplay).
                (setf string (copy-sequence string))
                (let ((property (get-text-property 0 'face string)))
                  (unless (or (equal face property)
                              (and (listp property) (member face property)))
                    (add-face-text-property 0 (length string) face 'append string)))
                string))
    (pcase-let* ((`(,name . ,(map manual within region filename)) record)
                 (buffer (face-propertize (if filename
                                              (file-name-nondirectory filename)
                                            name)
                                          'font-lock-constant-face))
                 (region region)
                 (relevance (face-propertize (dogears--relevance record)
                                             'font-lock-keyword-face))
                 (within (if within
                             (face-propertize within 'font-lock-function-name-face)
                           ""))
                 ;; The filename may not always *be* a filename; e.g. somehow in
                 ;; EWXM buffers it gets set to " - no file -", instead of just nil.
                 (dir (when filename
                        (file-name-directory filename))))
      (if dir
          (setf dir (split-string dir "/" t)
                dir (nreverse dir)
                dir (cl-loop for d in dir
                             concat (truncate-string-to-width d 10)
                             concat "\\")
                dir (face-propertize dir 'font-lock-comment-face))
        (setf dir ""))
      (list manual relevance within buffer dir))))

#+end_src

#+RESULTS:
: qz/dogears--format-record-list

****** emacs-chatgpt-shell
:PROPERTIES:
:ID:       9809acde-26e3-4bc8-bb47-a43759be7568
:CREATED:  [2023-04-21 Fri 16:13]
:UPDATED:  [2023-04-21 Fri 16:15]
:ROAM_EXCLUDE: t
:END:

- [[id:a5b61661-e777-4fdd-b1b0-0e486c27123a][[13:32:51] guix: packaging chatgpt-shell]]

#+begin_src scheme
(define-public emacs-chatgpt-shell
  (package
    (name "emacs-chatgpt-shell")
    (version "2023-04-21")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/xenodium/chatgpt-shell")
             (commit "0ae307045fdad451f7a6e2a56ffec70c6300b8da")))
       (sha256
        (base32 "1s7pn8v79x2l02cj41z89f8rda2xd3naq6yv8vjzd0z4kag3jmzv"))))
    (build-system emacs-build-system)
    (home-page "")
    (synopsis "A minimal ChatGPT Emacs shel")
    (description
     "A minimal ChatGPT Emacs shell")
    (license license:gpl3+)))
#+end_src

****** emacs-ytdl-next
:PROPERTIES:
:ID:       24f69dd9-3e91-4743-88fa-6efd43a4ca8d
:CREATED:  [2023-04-24 Mon 15:41]
:UPDATED:  [2023-04-24 Mon 15:42]
:ROAM_EXCLUDE: t
:END:


#+begin_src scheme
(define-public emacs-ytdl-next
  (package
    (name "emacs-ytdl")
    (version "20230331.1804")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://gitlab.com/tuedachu/ytdl.git")
                    (commit "2ea3daf2f6aa9d18b71fe3e15f05c30a56fca228")))
              (sha256
               (base32
                "0y62lkgsg19j05dpd6sp6zify8vq8xvpc8caqiy4rwi7p4ahacsf"))))
    (build-system emacs-build-system)
    (propagated-inputs (list emacs-async emacs-transient emacs-dash))
    (home-page "https://gitlab.com/tuedachu/ytdl")
    (synopsis "Emacs Interface for youtube-dl")
    (description
     "ytdl.el is an Emacs-based interface for youtube-dl, written in emacs-lisp.
youtube-dl is a command-line program to download videos from YouTube and a few
more sites.  More information at https://yt-dl.org.  youtube-dl supports many
more sites: PeerTube, BBC, IMDB, InternetVideoArchive (non-exhaustive list) *
Setup Add \"(require ytdl)\" to your \"init.el\" file.  Further customization can be
found in the documentation online.")
    (license license:gpl3+)))
#+end_src

#+RESULTS:

******* import from melpa
:PROPERTIES:
:ID:       d6821367-61d5-4369-bb81-66aab6b424f8
:CREATED:  [2023-04-24 Mon 15:42]
:UPDATED:  [2023-04-24 Mon 15:42]
:ROAM_EXCLUDE: t
:END:
#+begin_src shell
guix import elpa -a melpa ytdl
#+end_src

****** emacs-selectric-mode
:PROPERTIES:
:ID:       8befc63a-afad-4c84-bf58-1e4c3e071896
:CREATED:  [2023-06-30 Fri 23:04]
:UPDATED:  [2023-06-30 Fri 23:04]
:ROAM_EXCLUDE: t
:END:

******* src
:PROPERTIES:
:ID:       fe050d49-8d00-476c-8af7-35ab189596a5
:CREATED:  [2023-06-30 Fri 23:04]
:UPDATED:  [2023-07-04 Tue 10:43]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(define-public emacs-selectric-mode
  (package
    (name "emacs-selectric-mode")
    (version "20200209.2107")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/rbanffy/selectric-mode.git")
                    (commit "1840de71f7414b7cd6ce425747c8e26a413233aa")))
              (sha256 (base32
                       "1aabqqqcafkqmyarf5kb1k0gglmlpn6kr3h3x0yph5gd6sk3l4ll"))))
    (build-system emacs-build-system)
    (arguments '(#:include '("^[^/]+.el$" "^[^/]+.el.in$"
                             "^dir$"
                             "^[^/]+.info$"
                             "^[^/]+.texi$"
                             "^[^/]+.texinfo$"
                             "^doc/dir$"
                             "^doc/[^/]+.info$"
                             "^doc/[^/]+.texi$"
                             "^doc/[^/]+.texinfo$"
                             "^[^/]+.wav$")
                 #:exclude '("^.dir-locals.el$" "^test.el$" "^tests.el$"
                             "^[^/]+-test.el$" "^[^/]+-tests.el$")))
    (home-page "https://github.com/rbanffy/selectric-mode")
    (synopsis "IBM Selectric mode for Emacs")
    (description
     "This minor mode plays the sound of an IBM Selectric typewriter as you type.")
    (license license:gpl3+)))
#+end_src

******* import from melpa
:PROPERTIES:
:ID:       e8fd13f6-029f-4867-986f-07524f194a65
:CREATED:  [2023-06-30 Fri 23:04]
:UPDATED:  [2023-06-30 Fri 23:04]
:ROAM_EXCLUDE: t
:END:
#+begin_src shell
date -uIs
guix import elpa -a melpa selectric-mode
#+end_src

#+RESULTS:
:results:
2023-06-30T21:00:14+00:00
(package
  ((name "emacs-selectric-mode")
   (version "20200209.2107")
   (source (origin
             (method git-fetch)
             (uri (git-reference
                   (url "https://github.com/rbanffy/selectric-mode.git")
                   (commit "1840de71f7414b7cd6ce425747c8e26a413233aa")))
             (sha256 (base32
                      "1aabqqqcafkqmyarf5kb1k0gglmlpn6kr3h3x0yph5gd6sk3l4ll"))))
   (build-system emacs-build-system)
   (arguments '(#:include '("^[^/]+.el$" "^[^/]+.el.in$"
                            "^dir$"
                            "^[^/]+.info$"
                            "^[^/]+.texi$"
                            "^[^/]+.texinfo$"
                            "^doc/dir$"
                            "^doc/[^/]+.info$"
                            "^doc/[^/]+.texi$"
                            "^doc/[^/]+.texinfo$"
                            "^[^/]+.wav$")
                #:exclude '("^.dir-locals.el$" "^test.el$" "^tests.el$"
                            "^[^/]+-test.el$" "^[^/]+-tests.el$")))
   (home-page "https://github.com/rbanffy/selectric-mode")
   (synopsis "IBM Selectric mode for Emacs")
   (description
    "This minor mode plays the sound of an IBM Selectric typewriter as you type.")
   (license #f)))
:end:

****** emacs-atomic-chrome
:PROPERTIES:
:CREATED:  [2023-09-21 Thu 11:40]
:UPDATED:  [2023-09-21 Thu 11:40]
:ID:       861f3467-6792-44cb-bd1b-228b7e5f33bf
:ROAM_EXCLUDE: t
:END:

******* import
:PROPERTIES:
:CREATED:  [2023-09-21 Thu 11:40]
:UPDATED:  [2023-09-21 Thu 11:41]
:ID:       b6b8b785-6cf0-42ce-ab73-0a0071777919
:ROAM_EXCLUDE: t
:END:

#+begin_src shell
date -uIs;
guix import elpa -a melpa atomic-chrome
#+end_src

#+RESULTS:
:results:
2023-09-21T09:41:06+00:00
:end:

******* src
:PROPERTIES:
:CREATED:  [2023-09-21 Thu 11:40]
:UPDATED:  [2024-02-17 Sat 17:20]
:ID:       3e06e209-1d75-4925-a130-ea418db3ab00
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(define-public emacs-atomic-chrome
  (package
   (name "emacs-atomic-chrome")
   (version "20230304.112")
   (source (origin
            (method git-fetch)
            (uri (git-reference
                  (url "https://github.com/alpha22jp/atomic-chrome.git")
                  (commit "f1b077be7e414f457191d72dcf5eedb4371f9309")))
            (sha256 (base32
                     "01024ikcy23hkxjpy6qlsa8sj3cyf4p3igx5i31qkq21dm7b8xqv"))))
   (build-system emacs-build-system)
   (propagated-inputs (list emacs-let-alist emacs-websocket))
   (home-page "https://github.com/alpha22jp/atomic-chrome")
   (synopsis "Edit Chrome text area with Emacs using Atomic Chrome")
   (description
    "This is the Emacs version of Atomic Chrome which is an extension for Google
Chrome browser that allows you to edit text areas of the browser in Emacs.  It's
similar to Edit with Emacs, but has some advantages as below with the help of
websocket. * Live update The input on Emacs is reflected to the browser
instantly and continuously. * Bidirectional communication You can edit both on
the browser and Emacs, they are synced to the same.  Firefox is supported via
the @code{GhostText} browser addon.")
   (license license:gpl3+)))
#+end_src

****** emacs-spacious-padding
:PROPERTIES:
:CREATED:  [2024-02-17 Sat 17:18]
:UPDATED:  [2024-02-17 Sat 17:27]
:ID:       53635ebe-7282-43b9-9b9e-deb4e2691164
:ROAM_EXCLUDE: t
:END:

#+begin_src shell :wrap "src scheme"
echo -e "(define-public emacs-spacious-padding\n$(guix import elpa spacious-padding)\n)"
#+end_src

#+RESULTS:
#+begin_src scheme
(define-public emacs-spacious-padding
  (package
   (name "emacs-spacious-padding")
   (version "0.3.0")
   (source (origin
            (method url-fetch)
            (uri (string-append
                  "https://elpa.gnu.org/packages/spacious-padding-" version
                  ".tar"))
            (sha256 (base32
                     "1iiaxgl18k8hkwwyz3qnargv6q8kwzyh39ai46k5xbpmyrsj4b16"))))
   (build-system emacs-build-system)
   (home-page "https://git.sr.ht/~protesilaos/spacious-padding")
   (synopsis "Increase the padding/spacing of frames and windows")
   (description
    "# spacious-padding for GNU Emacs DEMO IMAGES: -
<https://protesilaos.com/codelog/2023-06-03-emacs-spacious-padding/> -
<https://protesilaos.com/codelog/2023-11-15-spacious-padding-extra-ui-dev/> This
package provides a global minor mode to increase the spacing/padding of Emacs
windows and frames.  The idea is to make editing and reading feel more
comfortable.  Enable the mode with `M-x spacious-padding-mode`.  Adjust the
exact spacing values by modifying the user option `spacious-padding-widths`.
Inspiration for this package comes from [Nicolas Rougier's impressive
designs](https://github.com/rougier) and [Daniel Mendler's `org-modern`
package](https://github.com/minad/org-modern). + Package name (GNU ELPA):
`spacious-padding` + Official manual:
<https://protesilaos.com/emacs/spacious-padding> + Change log:
<https://protesilaos.com/emacs/spacious-padding> + Git repo on @code{SourceHut}:
<https://git.sr.ht/~protesilaos/spacious-padding> - Mirrors: + @code{GitHub}:
<https://github.com/protesilaos/spacious-padding> + @code{GitLab}:
<https://gitlab.com/protesilaos/spacious-padding> + Mailing list:
<https://lists.sr.ht/~protesilaos/general-issues> + Sample images: -
<https://protesilaos.com/codelog/2023-06-03-emacs-spacious-padding/> -
<https://protesilaos.com/codelog/2023-11-15-spacious-padding-extra-ui-dev/> +
Backronyms: Space Perception Adjusted Consistently Impacts Overall Usability
State ...  padding; Spacious ...  Precise Adjustments to Desktop Divider
Internals Neatly Generated.")
   (license license:gpl3+)))
#+end_src

***** python
:PROPERTIES:
:CREATED:  [2023-09-24 Sun 15:48]
:UPDATED:  [2023-09-24 Sun 15:48]
:ID:       4a437daf-f5c1-44ec-8d30-6033f1992ac4
:ROAM_EXCLUDE: t
:END:
****** python-pylsp-mypy
:PROPERTIES:
:ID:       6c17b978-44b6-412a-bf36-ea7854089c96
:CREATED:  [2022-10-13 Thu 13:17]
:UPDATED:  [2022-10-13 Thu 13:23]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(use-modules (guix build-system python)  ; pypi-uri
             (gnu packages python-xyz)   ; python-lsp-server
             (gnu packages python-check) ; python-mypy
             (gnu packages python-build) ; python-toml
             (gnu packages check)        ; python coverage
             )

(define-public python-pylsp-mypy
  (package
   (name "python-pylsp-mypy")
   (version "0.6.3")
   (source (origin
            (method url-fetch)
            (uri (pypi-uri "pylsp-mypy" version))
            (sha256
             (base32
              "1gf865dj9na7jyp1148k27jafwb6bg0rdg9kyv4x4ag8qdlgv9h6"))))
   (build-system python-build-system)
   (propagated-inputs (list python-lsp-server
                            python-mypy
                            python-toml))
   (native-inputs (list python-coverage
                        python-pytest
                        python-pytest-cov
                        python-tox))
   (home-page "https://github.com/python-lsp/pylsp-mypy")
   (synopsis "Mypy linter for the Python LSP Server")
   (description "Mypy linter for the Python LSP Server")
   (license license:gpl3+)))
#+end_src

****** python-keyring-pass
:PROPERTIES:
:ID:       6637fa51-4274-4ac9-b19f-8632f14ae5be
:CREATED:  [2023-03-12 Sun 12:39]
:UPDATED:  [2023-03-12 Sun 13:25]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(use-modules
 (guix packages)
 (guix download)
 (guix gexp)
 (guix git-download)
 (guix build-system cargo)
 (guix build-system python)
 (gnu packages)
 (gnu packages python-crypto))

;; TODO upstream to python-crypto
;; TODO
;; * keyringrc.cfg
;; [backend]
;; default-keyring=keyring_pass.PasswordStoreBackend
;; [pass]
;; key-prefix=/path/to/pass/dir
;; OR, given pythonkeyring >=23.0.0, envar KEYRING_PROPERTY_PASS_KEY_PREFIX


(define-public python-keyring-pass
  (package
    (name "python-keyring-pass")
    (version "0.7.0")
    (source
      (origin
        (method url-fetch)
        (uri (pypi-uri "keyring_pass" version))
        (sha256
          (base32 "0rqrsm0gxxvv6vkqyg3snf29m8q44ljsz63f3j2rkizry9csd1fl"))))
    (build-system python-build-system)
    (propagated-inputs (list python-keyring))
    (home-page "https://github.com/nazarewk/keyring_pass")
    (synopsis
      "https://www.passwordstore.org/ backend for https://pypi.org/project/keyring/")
    (description
      "https://www.passwordstore.org/ backend for https://pypi.org/project/keyring/")
    (license license:expat)))

;; TODO upgrade to 0.8.0 (needs jaraco-classes==4.0.0)
;; (define-public python-keyring-pass
;;   (package
;;   (name "python-keyring-pass")
;;   (version "0.8.0")
;;   (source (origin
;;             (method url-fetch)
;;             (uri (pypi-uri "keyring_pass" version))
;;             (sha256
;;              (base32
;;               "0dsjg5wv7n4gshpygnddg0w27fx7whdvwyms9h90xg5hqyxcpsdw"))))
;;   (build-system python-build-system)
;;   (propagated-inputs (list python-jaraco-classes python-keyring))
;;   (home-page "https://github.com/nazarewk/keyring_pass")
;;   (synopsis
;;    "https://www.passwordstore.org/ backend for https://pypi.org/project/keyring/")
;;   (description
;;    "https://www.passwordstore.org/ backend for https://pypi.org/project/keyring/")
;;   (license license:expat)))
#+end_src
***** misc
:PROPERTIES:
:CREATED:  [2023-09-24 Sun 15:48]
:UPDATED:  [2023-09-24 Sun 15:48]
:ID:       5f3e1360-0ee3-495a-8f2b-18e3ca5d7045
:ROAM_EXCLUDE: t
:END:

****** perl-graph-easy
:PROPERTIES:
:ID:       a54f3430-07b8-4ba6-8ae6-faef3b53ad6b
:CREATED:  [2023-05-04 Thu 14:37]
:UPDATED:  [2023-05-05 Fri 13:11]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref null
(use-modules (guix build-system perl))

(define-public perl-image-info
  (package
    (name "perl-image-info")
    (version "1.43")
    (source (origin
              (method url-fetch)
              (uri (string-append
                    "mirror://cpan/authors/id/S/SR/SREZIC/Image-Info-" version
                    ".tar.gz"))
              (sha256
               (base32
                "1ybibpdhz420c7n09vp7cjxq9g8d46qsgbp3fqcskvwmjf41gi2b"))))
    (build-system perl-build-system)
    (propagated-inputs `(("perl-image-info" ,perl-image-info)))
    (home-page "https://metacpan.org/release/Image-Info")
    (synopsis "Extract meta information from image files")
    (description "Extract meta information from image files")
    (license license:perl-license)))

(define-public perl-graph-easy-as-svg
  (package
    (name "perl-graph-easy-as-svg")
    (version "0.28")
    (source (origin
              (method url-fetch)
              (uri (string-append
                    "mirror://cpan/authors/id/S/SH/SHLOMIF/Graph-Easy-As_svg-"
                    version ".tar.gz"))
              (sha256
               (base32
                "0y177sznq4a1h74hcq1477jh8h3i5xnfi0ch6yrk8bs48jn5z6nd"))))
    (build-system perl-build-system)
    (native-inputs `(("perl-module-build" ,perl-module-build)))
    (propagated-inputs `(
                         ;;("perl-graph-easy" ,perl-graph-easy)
                         ("perl-image-info" ,perl-image-info)))
    (home-page "https://metacpan.org/release/Graph-Easy-As_svg")
    (synopsis "Output a Graph::Easy as Scalable Vector Graphics (SVG)")
    (description "Output a Graph::Easy as Scalable Vector Graphics (SVG)")
    (license license:gpl2)))

(define-public perl-graph-easy
  (package
    (name "perl-graph-easy")
    (version "0.76")
    (source (origin
              (method url-fetch)
              (uri (string-append
                    "mirror://cpan/authors/id/S/SH/SHLOMIF/Graph-Easy-" version
                    ".tar.gz"))
              (sha256
               (base32
                "1yni1181bqfvqcr155mvzgqsqlmpwfiklzx3ircknrpgxc5c38nl"))))
    (build-system perl-build-system)
    (native-inputs `(("perl-module-build" ,perl-module-build)))
    (propagated-inputs `(("perl-graph-easy-as_svg" ,perl-graph-easy-as-svg)))
    (home-page "https://metacpan.org/release/Graph-Easy")
    (synopsis "Convert or render graphs (as ASCII, HTML, SVG or via Graphviz)")
    (description "Convert or render graphs (as ASCII, HTML, SVG or via Graphviz)")
    (license license:gpl1)))
#+end_src

******* guix import
:PROPERTIES:
:ID:       f9fde913-acc6-4e7b-a5ba-2781a52027fd
:CREATED:  [2023-05-04 Thu 14:45]
:UPDATED:  [2023-07-04 Tue 19:38]
:ROAM_EXCLUDE: t
:END:

#+begin_src shell
echo "(use-modules (guix build-system perl))" && echo

for pkg in Image::Info Graph::Easy::As_svg Graph::Easy ; do
    name="$(echo $pkg | sed -e 's/::/-/g' -e 's/_/-/g' | awk '{print tolower($0)}')"
    echo "(define-public $name
$(guix import cpan $pkg))
" && echo
done

#+end_src

#+RESULTS:
:results:
(use-modules (guix build-system perl))

(define-public image-info
(package
  (name "perl-image-info")
  (version "1.43")
  (source (origin
            (method url-fetch)
            (uri (string-append
                  "mirror://cpan/authors/id/S/SR/SREZIC/Image-Info-" version
                  ".tar.gz"))
            (sha256
             (base32
              "1ybibpdhz420c7n09vp7cjxq9g8d46qsgbp3fqcskvwmjf41gi2b"))))
  (build-system perl-build-system)
  (propagated-inputs `(("perl-image-info" ,perl-image-info)))
  (home-page "https://metacpan.org/release/Image-Info")
  (synopsis "Extract meta information from image files")
  (description fill-in-yourself!)
  (license perl-license)))


(define-public graph-easy-as-svg
(package
  (name "perl-graph-easy-as_svg")
  (version "0.28")
  (source (origin
            (method url-fetch)
            (uri (string-append
                  "mirror://cpan/authors/id/S/SH/SHLOMIF/Graph-Easy-As_svg-"
                  version ".tar.gz"))
            (sha256
             (base32
              "0y177sznq4a1h74hcq1477jh8h3i5xnfi0ch6yrk8bs48jn5z6nd"))))
  (build-system perl-build-system)
  (native-inputs `(("perl-module-build" ,perl-module-build)))
  (propagated-inputs `(("perl-graph-easy" ,perl-graph-easy)
                       ("perl-image-info" ,perl-image-info)))
  (home-page "https://metacpan.org/release/Graph-Easy-As_svg")
  (synopsis "Output a Graph::Easy as Scalable Vector Graphics (SVG)")
  (description fill-in-yourself!)
  (license gpl2)))


(define-public graph-easy
(package
  (name "perl-graph-easy")
  (version "0.76")
  (source (origin
            (method url-fetch)
            (uri (string-append
                  "mirror://cpan/authors/id/S/SH/SHLOMIF/Graph-Easy-" version
                  ".tar.gz"))
            (sha256
             (base32
              "1yni1181bqfvqcr155mvzgqsqlmpwfiklzx3ircknrpgxc5c38nl"))))
  (build-system perl-build-system)
  (native-inputs `(("perl-module-build" ,perl-module-build)))
  (propagated-inputs `(("perl-graph-easy-as_svg" ,perl-graph-easy-as_svg)))
  (home-page "https://metacpan.org/release/Graph-Easy")
  (synopsis "Convert or render graphs (as ASCII, HTML, SVG or via Graphviz)")
  (description fill-in-yourself!)
  (license gpl1)))


:end:
***** collectors
:PROPERTIES:
:CREATED:  [2024-03-31 Sun 16:11]
:UPDATED:  [2024-03-31 Sun 16:11]
:ID:       77791020-9bfe-40e4-90d9-a540967c7465
:ROAM_EXCLUDE: t
:END:
****** home
:PROPERTIES:
:CREATED:  [2024-03-31 Sun 16:11]
:UPDATED:  [2024-03-31 Sun 16:11]
:ID:       02017447-da21-465d-a80e-5b1230936486
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref pkg-home
;; python-keyring-pass ;; TODO broken [2024-03-31 Sun 16:24]soehitng
;; perl-graph-easy
#+end_src

****** emacs
:PROPERTIES:
:CREATED:  [2024-03-31 Sun 16:11]
:UPDATED:  [2024-03-31 Sun 16:12]
:ID:       def4d5e8-d988-455b-b044-9ef8db869238
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref pkg-emacs-my
;;; ...
#+end_src

*** features
:PROPERTIES:
:ID:       be090096-e0cd-43f2-a24a-cff37457f33a
:CREATED:  [2022-07-29 Fri 18:24]
:UPDATED:  [2022-07-29 Fri 18:24]
:ROAM_EXCLUDE: t
:END:

**** my
:PROPERTIES:
:ID:       b290c986-542c-46ef-9729-defbd20da2ea
:CREATED:  [2022-08-29 Mon 17:10]
:UPDATED:  [2022-08-29 Mon 17:10]
:ROAM_EXCLUDE: t
:END:

***** bluetooth
:PROPERTIES:
:ID:       a65bf448-712a-4f32-840c-b7524c7a7120
:CREATED:  [2022-08-29 Mon 17:10]
:UPDATED:  [2023-03-23 Thu 15:48]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref null
;; (define-module (rde features bluetooth)
;;   #:use-module (rde features)
;;   #:use-module (rde features predicates)
;;   ;#:use-module (gnu home-services bluetooth) ;; TODO implement as 'fork' (in rde), then upstream to guix home proper
;;   #:use-module (gnu services)
;;   #:use-module (gnu services desktop)
;;   #:export (feature-bluetooth)
;;   ;;#:re-export (home-bluetooth-configuration) ;; ^^ as above
;;   )

(use-modules ;;(rde features bluetooth)
 (rde features)
 (rde features predicates)
 (gnu services)
 (gnu services desktop))

;; TODO ensure group "lp" exists and is applicable for USER
(define* (feature-bluetooth
          #:key
          ;;(bluetooth-configuration (home-bluetooth-configuration))
          (dual-mode #f)
          (auto-enable? #t)) ;; XXX should this stick to guix defaults, or tailor to ease for users?
  "Setup and configure Bluetooth."
  ;;(ensure-pred home-bluetooth-configuration? bluetooth-configuration)

  (define (bluetooth-home-services config)
    "Returns home services related to bluetooth."
    (list ;;(service bluetooth-service-type bluetooth-configuration)
     (bluetooth-service #:auto-enable? auto-enable?)))

  (feature
   (name 'bluetooth)
   (values '((bluetooth . #t)))
   ;; TODO port etc-service reference to make home-service > system-service
   (system-services-getter bluetooth-home-services)))
#+end_src

***** TODO redshift
:PROPERTIES:
:ID:       2fb33148-9ba8-4a2c-9d81-df60039c8267
:CREATED:  [2023-04-26 Wed 20:39]
:UPDATED:  [2023-04-26 Wed 20:39]
:ROAM_EXCLUDE: t
:END:

****** feature
:PROPERTIES:
:ID:       a8f7a40d-54a1-4b3f-ba76-396bf25c6d82
:CREATED:  [2023-04-26 Wed 21:22]
:UPDATED:  [2023-04-26 Wed 21:22]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref null
(use-modules (gnu services configuration)
             (gnu home-services-utils)
             (gnu home services shepherd)
             (gnu packages xdisorg)
             (rde serializers ini))

(define* (feature-redshift
          #:key
          (redshift redshift-wayland)
          (extra-config '()))
  "Configure redshift."
  (ensure-pred file-like? redshift)

  (define (get-home-services config)
    (list
     (service
      home-redshift-service-type
      (home-redshift-configuration
       (redshift redshift)
       (config
        `(,@extra-config))))))

  (feature
   (name 'redshift)
   (values `((redshift . ,redshift)))
   (home-services-getter get-home-services)))

#+end_src

****** TODO home-redshift-service
:PROPERTIES:
:ID:       92ae8438-7458-4873-b290-470630f04d67
:CREATED:  [2023-04-26 Wed 20:39]
:UPDATED:  [2023-04-26 Wed 21:22]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref null

;;;
;;; redshift.
;;;

(define-configuration home-redshift-configuration
  (redshift
    (file-like redshift)
    "redshift package to use.")
  (config
   (ini-config
    ;; `(redshift . ((transition . 1)
    ;;               (temp-day . 5500K)
    ;;               (temp-night . 1000K)
    ;;               (brightness-day . 0.8)
    ;;               (brightness-night . 0.4)))
    `())
   "A basic INI-style config.  See http://jonls.dk/redshift/#configuration-file for more details.

@lisp
()
@end lisp"))

(define (add-redshift-packages config)
  (list (home-redshift-configuration-redshift config)))

(define (add-redshift-configuration config)
  `(("redshift/config"
     ,(apply
       mixed-text-file
       "redshift-config"
       (generic-serialize-ini-config
        (home-redshift-configuration-config config))))))

(define (home-redshift-shepherd-service config)
  (let ((redshift (home-redshift-configuration-redshift config)))
    (list
     (shepherd-service
      (provision '(redshift))
      (start #~(make-forkexec-constructor
                (list #$(file-append redshift "/bin/redshift"))
                #:log-file (string-append
                            (or (getenv "XDG_LOG_HOME")
                                (string-append
                                 (getenv "HOME")
                                 "/.local/var/log"))
                            "/redshift.log")))
      (stop #~(make-kill-destructor))
      (documentation "Run Redshift")))))

(define (home-redshift-extensions cfg extensions)
  (home-redshift-configuration
   (inherit cfg)
   (config
    (append (home-redshift-configuration-config cfg)
            (append-map identity (reverse extensions))))))

(define home-redshift-service-type
  (service-type (name 'home-redshift)
                (extensions
                 (list (service-extension
                        home-profile-service-type
                        add-redshift-packages)
                       (service-extension
                        home-shepherd-service-type
                        home-redshift-shepherd-service)
                       (service-extension
                        home-xdg-configuration-files-service-type
                        add-redshift-configuration)))
                (compose identity)
                (extend home-redshift-extensions)
                (default-value (home-redshift-configuration))
                (description "\
Install and configure redshift, an adaptive light-temperature controller.")))
#+end_src

***** COMMENT debug; pre features
:PROPERTIES:
:ID:       36dc9e54-a5c8-43c8-a464-6349186edd50
:CREATED:  [2022-07-29 Fri 17:48]
:UPDATED:  [2023-07-23 Sun 11:42]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(pretty-print "pre-%user-features")
#+end_src

**** rde
:PROPERTIES:
:ID:       ba479dce-2f41-467e-b177-b38d2379f1a7
:CREATED:  [2022-08-01 Mon 11:05]
:UPDATED:  [2022-08-01 Mon 11:05]
:ROAM_EXCLUDE: t
:END:


***** services
:PROPERTIES:
:ID:       476030a6-84df-46c8-931d-03b86769879d
:CREATED:  [2023-07-23 Sun 11:33]
:UPDATED:  [2024-03-31 Sun 20:11]
:ROAM_EXCLUDE: t
:END:
****** custom-services
:PROPERTIES:
:ID:       52dbdae7-459f-4950-9961-c2a9cd035844
:CREATED:  [2022-08-09 Tue 12:44]
:UPDATED:  [2024-04-01 Mon 01:15]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-custom-services
 #:feature-name-prefix 'ixy
 ;; #:system-services
 ;; (list
 ;;  (simple-service 'nvidia-udev-rule udev-service-type
 ;;                  (list nvidia-driver)))
 #:home-services
 (list
  <<services>>
    ;;; not exposed!!!!   such folly!!!
  (simple-service 'emacs-my-init-el
                  home-emacs-service-type
                  (home-emacs-extension
                   (init-el
                    (append
                     (list #~"(define-key key-translation-map [?\\C-x] [?\\C-u])\n"
                           #~"(define-key key-translation-map [?\\C-u] [?\\C-x])\n")
                     (list init-el)))))

  ;; (simple-service 'emacs-my-package-rebuild
  ;;                 home-emacs-service-type
  ;;                 (home-emacs-extension
  ;;                  (rebuild-elisp-packages? #t)))

  )
  (simple-service 'emacs-my-package-list
                  home-emacs-service-type
                  (home-emacs-extension
                   (elisp-packages
                    (append
                      (list
                       <<emacs-pkg-my>>
                       )
                      (pkgs
                       <<emacs-pkg>>
                       ))))))
 #:system-services
 (remove
  unspecified?
  (append (if gaming? (@@ (gnu services desktop) %desktop-services) '())
          (list
           <<services-sys>>
           ))))
#+end_src

****** services-home
:PROPERTIES:
:ID:       32e2ffde-ff51-4a10-9256-e032d58629bf
:CREATED:  [2022-09-28 Wed 15:48]
:UPDATED:  [2023-04-18 Tue 14:07]
:ROAM_EXCLUDE: t
:END:

******* envars
:PROPERTIES:
:ID:       5b5d963a-b70c-4867-87b8-8beb1633fa02
:CREATED:  [2022-09-28 Wed 15:47]
:UPDATED:  [2024-03-31 Sun 20:02]
:ROAM_EXCLUDE: t
:END:

#+name: guile-service-envars
#+begin_src scheme :noweb-ref services
((@ (gnu services) simple-service)
 'my-environment-variables
 (@ (gnu home services) home-environment-variables-service-type)
 `(
         ;;; GRAPHICS
   ;;("LIBGL_DRIVERS_PATH" . (string-join (list "/gnu/store/bg8mrp0ply34c76xq1i8b4hgjyh6hi8k-nvidia-driver-495.46/lib/gbm"
   ;;                                           "/gnu/store/bg8mrp0ply34c76xq1i8b4hgjyh6hi8k-nvidia-driver-495.46/lib"
   ;;                                           "/gnu/store/bg8mrp0ply34c76xq1i8b4hgjyh6hi8k-nvidia-driver-495.46") ":"))
   ;;("LIBGL_DEBUG" . "verbose")
   ;;("G_MESSAGES_DEBUG" . "1")

   ;;("MESA_LOADER_DRIVER_OVERRIDE" . "nvidia") ;; no nvidia_dri
   ;;("MESA_LOADER_DRIVER_OVERRIDE" . "nvidia-drm") ;; no nvidia-drm_dri

   ;;("MESA_DEBUG" . "1")
   ;;("MESA_LOG_FILE" . "/tmp/mesa.log")

   ;; glfw patched?
   ;; https://github.com/bulletphysics/bullet3/issues/2595#issuecomment-588080665
   ;; ("MESA_GL_VERSION_OVERRIDE" . "3.4")
   ;;("MESA_GLSL_VERSION_OVERRIDE" . "340")

   ;;("GBM_BACKEND" . "nvidia-drm") ;; [2024-01-28 Sun]
        ;;;; guix build --no-grafts -f /home/samuel/git/sys/nonguix/nongnu/packages/nvidia.scm | wl-copy
        ;;;; or
        ;;;; guix build nvidia-driver | wl-copy
   ;;,@(let ((driver-path "/gnu/store/cbj701jzy9dj6cv84ak0b151y9plb5sc-nvidia-driver-495.46"))
   ;;    `(("GBM_BACKENDS_PATH" . ,(string-join (list driver-path
   ;;                                                 (string-append driver-path "/lib")
   ;;                                                 (string-append driver-path "/lib/gbm")
   ;;                                                 "$PATH") ":"))
   ;;      ("VK_ICD_FILENAMES" . ,(string-append driver-path "/share/vulkan/icd.d/nvidia_icd.json"))
   ;;      ("LIBGL_DRIVERS_PATH" . ,(string-join (list driver-path
   ;;                                                  (string-append driver-path "/lib")
   ;;                                                  (string-append driver-path "/lib/gbm")
   ;;                                                  "$PATH") ":"))
   ;;      ;; https://github.com/NVIDIA/egl-wayland/issues/39#issuecomment-927288015
   ;;      ;; undocumented
   ;;      ;; might have an issue for containerised stuff, as set(uid|gid)
   ;;      ("__EGL_EXTERNAL_PLATFORM_CONFIG_DIRS" . ,(string-append driver-path "/share/egl/egl_external_platform.d"))
   ;;      ))
   ;;
   ;;("__GLX_VENDOR_LIBRARY_NAME" . "nvidia")
   ;;("WLR_NO_HARDWARE_CURSORS" . "1")
   ;;("WLR_DRM_NO_ATOMIC" . "1")
   ;; echo "/dev/dri/card$(udevadm info -a -n /dev/dri/card1 | grep boot_vga | rev | cut -c 2)"
   ;;("WLR_DRM_DEVICES" . "/dev/dri/card1")   ;; gpu only
   ;;("WLR_DRM_DEVICES" . "/dev/dri/card1") ;; cpu only
   ;;("WLR_DRM_DEVICES" . "/dev/dri/card0:/dev/dri/card1") ;; gpu:cpu

        ;;; GUILE
   ("GUILE_LOAD_PATH" .
    "$XDG_CONFIG_HOME/guix/current/share/guile/site/3.0\
:$GUILE_LOAD_PATH")
   ("GUILE_LOAD_COMPILED_PATH" .
    "$XDG_CONFIG_HOME/guix/current/lib/guile/3.0/site-ccache\
:$GUILE_LOAD_COMPILED_PATH")

        ;;; jsBABEL
   ;; javascript sucks, npm sucks
   ;; https://github.com/npm/npm/issues/6675#issuecomment-250318382
   ;; https://github.com/npm/cli/issues/1451
   ;; https://github.com/pnpm/pnpm/issues/2574
   ;; https://github.com/rxrc/zshrc/blob/3ca83703da5bd93b015747835a8a0164160c9b83/env.zsh#L33-L928
   ("NPM_CONFIG_USERCONFIG" . "${XDG_CONFIG_HOME}/npm/config")
   ("NPM_CONFIG_CACHE" . "${XDG_CACHE_HOME}/npm")
   ("NPM_CONFIG_TMP" . "${XDG_RUNTIME_DIR}/npm")
   ("YARN_CACHE_FOLDER" . "${YARN_CACHE_FOLDER:-$XDG_CACHE_HOME/yarn}")
   ("NODE_REPL_HISTORY" . "${NODE_REPL_HISTORY:-$XDG_CACHE_HOME/node/repl_history}")
   ("NVM_DIR" . "${NVM_DIR:-$XDG_DATA_HOME/nvm}")
   ("BABEL_CACHE_PATH" . "${BABEL_CACHE_PATH:-$XDG_CACHE_HOME/babel/cache.json}")

        ;;; DEVELOPMENT
   ("GUIX_CHECKOUT" . "$HOME/git/sys/guix")
   ("GUIX_EXTRA_PROFILES" . "$HOME/.guix-extra-profiles")

        ;;; ETC
   ("GDK_BACKEND" . "wayland") ;; ... for clipboarding emasc
   ;;("DISABLE_RTKIT" . "1") ;; TODO [2022-08-03] pipewire broken ;; commented [2022-08-11 Thu]

   ("XDG_DATA_DIRS" . ,(string-join
                        (list "$XDG_DATA_DIRS"
                              ;;; flatpak: show paks alongside other apps
                              ;; this sys path is not relevant for GUIX
                              ;;"/var/lib/flatpak/exports/share"
                              "/home/samuel/.local/share/flatpak/exports/share")
                        ":"))
   ;; TODO fix this path issue
   ("PATH" . ,(string-join
               (list "$PATH"
                     "$HOME/go/bin"
                     "$HOME/.local/bin"
                     "$HOME/.krew/bin"
                     "${XDG_CACHE_HOME}/npm/bin")
               ":"))))
#+end_src

******* zsh : profile, *rc
:PROPERTIES:
:ID:       533771da-9686-48f0-85ed-e24da7b726d6
:CREATED:  [2022-09-28 Wed 15:41]
:UPDATED:  [2022-09-28 Wed 15:41]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref services

(simple-service
 'my-zshrc home-zsh-service-type
 (home-zsh-extension
  (zshrc
   (append %extra-zshrc
           (list #~(format #f "" ;;#$example-program
                           ))))))

;; ((@ (gnu services) simple-service)
;;  'extend-shell-profile
;;  (@ (gnu home-services shells) home-shell-profile-service-type)
;;  (list
;;   #~(string-append
;;      "alias superls="
;;      #$(file-append (@ (gnu packages base) coreutils) "/bin/ls"))))
#+end_src

******* mcron                                                                  :jobs:
:PROPERTIES:
:ID:       c3c092d2-4cee-48eb-abc8-e76e393b5967
:CREATED:  [2022-09-28 Wed 15:42]
:UPDATED:  [2022-09-28 Wed 16:09]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref services
    ;;; home jobs
;;
;; see logs at ~/.local/var/log/mcron.log
;;   tail --follow ~/.local/var/log/mcron.log
;;
;; see job spec at [[info:mcron#Guile Syntax][mcron#Guile Syntax]]
((@ (gnu services) simple-service)
 'home-jobs (@ (gnu home services mcron) home-mcron-service-type)
 (list
  <<jobs>>
  )
 )
#+end_src

******** notes-commit                                                          :1min:
:PROPERTIES:
:ID:       c8903598-d72e-4539-884b-a60096be7fbe
:CREATED:  [2022-09-28 Wed 15:42]
:UPDATED:  [2023-04-16 Sun 15:21]
:ROAM_EXCLUDE: t
:END:

#+name: guile-job-notes
#+begin_src scheme :noweb-ref jobs
     ;;; job: commit my notes
#~(job '(next-minute '(15))
       ;;(lambda ()
         ;; (system*
         ;;  (format #f "~a add . && ~a commit -m \"auto-commit | $( ~a -uIs )\""
         ;;          #$(file-append (@ (gnu packages version-control) git) "/bin/git")
         ;;          #$(file-append (@ (gnu packages version-control) git) "/bin/git")
         ;;          #$(file-append (@ (gnu packages base) coreutils) "/bin/date"))))
         "cd life \\
&& echo job: note-commit \\
&& git add . \\
&& git commit -m \"auto-commit | $(date -uIs)\""
       "backup: notes-commit"
       #:user #$my-user)

;; (use-modules (guix gexp))
;; (let ((f (lambda ()
;;          (call-with-output-file "/tmp/commit.log"
;;            (lambda (port)
;;              ;; (chdir "./life")
;;              (display
;;               (with-exception-handler
;;                   (lambda (exn)
;;                     (format #f "exception: ~s\n" exn))
;;                 (system*
;;                  (format #f "ls"
;;                          ;;"~a add . && ~a commit -m \"auto-commit | $( ~a -uIs )\""
;;                          ;;(file-append #$(@ (gnu packages version-control) git) "/bin/git")
;;                          ;;(file-append #$(@ (gnu packages version-control) git) "/bin/git")
;;                          ;;(file-append #$(@ (gnu packages base) coreutils) "/bin/date")
;;                          ))
       ;;                 port)))))))
;;   (f))

;; (call-with-output-file "/tmp/commit.log"
;;   (lambda (port)
;;   (display
;;    (system "git status")
;;    port)))
#+end_src

******** fulltext index (recoll)                                                 :1h:
:PROPERTIES:
:ID:       ccd773a9-5a5e-41da-b050-6fa461c9a427
:CREATED:  [2022-09-28 Wed 15:42]
:UPDATED:  [2023-02-24 Fri 12:33]
:ROAM_EXCLUDE: t
:END:

#+name: guile-job-recoll
#+begin_src scheme :noweb-ref jobs
         ;;; job: fulltext index the universe
#~(job '(next-hour)
       (lambda ()
         (system*
          #$(file-append (@ (gnu packages search) recoll) "/bin/recollindex")))
       "index: recollindex"
       #:user #$my-user)
#+end_src

******** generate source tags                                                   :12h:
:PROPERTIES:
:ID:       0681c613-5415-46d7-a079-e940c503941c
:CREATED:  [2022-09-28 Wed 15:43]
:UPDATED:  [2023-02-24 Fri 12:33]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref jobs
         ;;; job: generate tags
;; ref :: https://guix.gnu.org/en/manual/devel/en/html_node/Scheduled-Job-Execution.html
#~(job '(next-hour '(12 0)) ;; every 12 hours
       (lambda ()
         (system*
          #$(file-append (@ (gnu packages idutils) idutils) "/bin/mkid") "git"))
       "index: idutils"
       #:user #$my-user)
#+end_src

******** hourly reminder
:PROPERTIES:
:ID:       fe0efa12-ae27-4652-aa9a-89b0f31b6615
:CREATED:  [2023-04-15 Sat 12:53]
:UPDATED:  [2023-04-15 Sat 13:10]
:ROAM_EXCLUDE: t
:END:

********* things about which to be reminded
:PROPERTIES:
:ID:       2bc6f2f3-19b0-452b-9655-ecd09611c5a9
:CREATED:  [2023-04-15 Sat 14:00]
:UPDATED:  [2023-04-15 Sat 14:00]
:ROAM_EXCLUDE: t
:END:
#+begin_src conf :tangle ~/.config/cron/humanity
breathe.  do some pullups
breathe.  do some pushups
breathe.  work on your pancake stretch
breathe.  do some dips
breathe.  do some hangboarding
#+end_src

********* job
:PROPERTIES:
:ID:       170786cc-da2d-4add-be2a-038b7dc23af4
:CREATED:  [2023-04-15 Sat 14:00]
:UPDATED:  [2023-07-14 Fri 10:26]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref jobs
;;; job: generate tags
;; ref :: https://guix.gnu.org/en/manual/devel/en/html_node/Scheduled-Job-Execution.html
#~(job '(next-hour) ;; every hour
       "aplay ~/vids/gong-cut.wav &>/dev/null; shuf -n1 ~/.config/cron/humanity | espeak -s 150"
       "gong"
       #:user #$my-user)
#+end_src

******** external data; updates
:PROPERTIES:
:ID:       17e87570-2fa4-4f2e-95df-ef229c8ec1aa
:CREATED:  [2022-10-04 Tue 16:19]
:UPDATED:  [2023-04-15 Sat 14:10]
:ROAM_EXCLUDE: t
:END:

********* TODO forge-pull
:PROPERTIES:
:ID:       454cd7fc-d86d-4f4c-a685-6f9d13963db7
:CREATED:  [2022-10-04 Tue 16:19]
:UPDATED:  [2022-10-04 Tue 16:34]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref null

(defun qz/job/forge-pull ()
  (interactive)
  (require 'forge)
  (project-forget-zombie-projects)
  (let* (y n)
    (mapcar
     (lambda (proj)
       (let ((project (car proj)))
         (with-current-buffer (dired project)
           (if (forge-get-repository 'full)
               (progn (message "qz: job: forge: pulling project '%s'" project)
                      (push project y)
                      (forge-pull))
             (progn (message "qz: job: forge: project '%s' has no forge" project)
                    (push project n))))))
     project--list)

    (message "qz: job: forge: pulled %s, skipped %s"
             (length y) (length n))))

(qz/job/forge-pull)
#+end_src

#+RESULTS:
: qz/job/forge-pull

********* TODO jira-pull
:PROPERTIES:
:ID:       e1bfd63f-ae9c-4043-a2e2-629ffdfa23d5
:CREATED:  [2022-10-04 Tue 16:19]
:UPDATED:  [2023-07-05 Wed 12:42]
:ROAM_EXCLUDE: t
:END:

********* TODO magit-pull
:PROPERTIES:
:ID:       2e315ba6-5aa8-40bb-b497-55808aea22e5
:CREATED:  [2023-07-13 Thu 09:50]
:UPDATED: [2023-07-13 Thu 09:50]
:END:

********* TODO org-roam-indirect-link-cache
:PROPERTIES:
:ID:       9728dd0c-2a6b-4fe0-8307-7cb5bdbd4091
:CREATED:  [2023-07-13 Thu 09:50]
:UPDATED:  [2023-07-13 Thu 09:50]
:ROAM_EXCLUDE: t
:END:

********* TODO org-id-locations
:PROPERTIES:
:ID:       2dafc686-0a0c-4360-987a-d254df07e00a
:CREATED:  [2023-07-14 Fri 18:35]
:UPDATED:  [2023-07-14 Fri 18:35]
:ROAM_EXCLUDE: t
:END:

this approximately lists all the meaningful shell commands on my system.  [2023-07-16 Sun] ~ 3800 files.

the aim is to sideloading the IDs from these into file:~/.config/emacs/.org-id-locations, taking the synchronous load off the main emacs process.

will need a helper to just ~reload~ this async-output guy into help:org-id-locations.

- see :: help:org-id-update-id-locations
- see :: help:org-id-locations-save

#+begin_src shell :results file :file /tmp/id-locations-files
locate -r '\.org$' -e \
    | grep '/home/samuel' \
    | grep -vE '\.(moz|cache)|docker/|go/pkg|org-mode/testing|mail/lists|qz/brain|chrom(ium|e)/Default|matrix/|test(s)?/'
#+end_src

#+RESULTS:
:results:
[[file:/tmp/id-locations-files]]
:end:

#+begin_src shell
wc /tmp/id-locations-files
#+end_src

#+RESULTS:
:results:
  3738   3738 231641 /tmp/id-locations-files
:end:

********** org-id-locations X org-roam
:PROPERTIES:
:CREATED:  [2023-09-26 Tue 16:10]
:UPDATED:  [2023-09-26 Tue 16:10]
:ID:       95fd2397-3058-48ac-9ce5-a7cdb17dbf37
:ROAM_EXCLUDE: t
:END:

*********** intangible errors
:PROPERTIES:
:CREATED:  [2023-09-26 Tue 16:10]
:UPDATED:  [2023-09-26 Tue 16:10]
:ID:       0cd269f0-1f01-4358-8784-c2cac22ae659
:ROAM_EXCLUDE: t
:END:

*********** blocks ~make tangle~
:PROPERTIES:
:CREATED:  [2023-09-26 Tue 16:10]
:UPDATED:  [2023-09-26 Tue 16:10]
:ID:       b2f6a4f4-76a0-4e39-8dce-268100da207a
:ROAM_EXCLUDE: t
:END:

******* TODO xdg-desktop-portal-wlr
:PROPERTIES:
:CREATED:  [2023-09-24 Sun 15:48]
:UPDATED:  [2023-09-24 Sun 15:48]
:ID:       d91cb34e-6eb2-43f3-8d53-1710b7dc225f
:ROAM_EXCLUDE: t
:END:
******** screencast with slurpy
:PROPERTIES:
:ID:       7d5b1d90-1d2b-4a25-b7d1-f28376cb1f3d
:CREATED:  [2023-07-05 Wed 12:41]
:UPDATED:  [2024-02-03 Sat 15:12]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref null
;;; current
(simple-service
 'xdg-desktop-portal-wlr-configuration--slurpy
        home-xdg-configuration-files-service-type
        `(("xdg-desktop-portal-wlr/config"
           ,(mixed-text-file
             "xdg-desktop-portal-wlr-config"
             #~(format #f "[screencast]
output_name=
max_fps=30
chooser_cmd=~a -f %o -or -c ff0000
chooser_type=simple"
#$(file-append (get-value 'slurp config slurp) "/bin/slurp"))))))

;; TODO can this fit? ^^ returns "DP-2", but __ returns x,y, etc
(define-public subject-window-or-selection
      #~(format #f "~a -t get_tree | ~a -r '.. | select(.pid? and .visible?) \
| .rect | \"\\(.x),\\(.y) \\(.width)x\\(.height)\"' | ~a -b ~a -B ~a"
                #$(file-append (get-value 'sway config) "/bin/swaymsg")
                #$(file-append jq "/bin/jq")
                ;; TODO: Move to slurp-cmd
                #$(file-append slurp "/bin/slurp")
                "303030AA"
                "303030AA"))
#+end_src


****** services-sys
:PROPERTIES:
:ID:       c2ee7fa1-59a9-4aa5-9049-28949a17c807
:CREATED:  [2022-09-28 Wed 15:47]
:UPDATED:  [2023-08-31 Thu 10:12]
:ROAM_EXCLUDE: t
:END:

******* prometheus-node-exporter                                            :metrics:
:PROPERTIES:
:ID:       e14e8d70-c704-415d-88ac-62f72ee03df9
:CREATED:  [2022-09-28 Wed 15:47]
:UPDATED:  [2022-09-28 Wed 15:47]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref services-sys
        ;;;
(service (@ (gnu services monitoring)
            prometheus-node-exporter-service-type))

#+end_src

******* mcron                                                                  :jobs:
:PROPERTIES:
:ID:       b83cdd83-78d4-464f-bb8f-74a481713984
:CREATED:  [2022-09-28 Wed 15:47]
:UPDATED:  [2023-07-18 Tue 22:27]
:ROAM_EXCLUDE: t
:END:

- ::  https://guix.gnu.org/en/manual/devel/en/html_node/Scheduled-Job-Execution.html

#+begin_src scheme :noweb-ref services-sys
(simple-service
 'system-jobs (@ (gnu services mcron) mcron-service-type)
 ;; ref :: https://guix.gnu.org/en/manual/devel/en/html_node/Scheduled-Job-Execution.html
 (list
  <<jobs-sys>>
  ))
#+end_src

******* locate
:PROPERTIES:
:ID:       f52c8582-7b64-4dc0-a111-ea259eb5a3d9
:CREATED:  [2022-09-28 Wed 15:51]
:UPDATED:  [2022-09-28 Wed 15:51]
:ROAM_EXCLUDE: t
:END:

#+name: guile-job-locate
#+begin_src scheme :noweb-ref jobs-sys
;; update locate database
;; ref :: https://guix.gnu.org/en/manual/devel/en/html_node/Scheduled-Job-Execution.html
#~(job '(next-hour '(12 0)) ;; every 12 hours
       (lambda ()
         (execl (string-append #$(@ (gnu packages base) findutils) "/bin/updatedb")
                "updatedb"
                "--prunepaths=/tmp /var/tmp /gnu/store"))
       "updatedb")
#+end_src

******* misc
:PROPERTIES:
:CREATED:  [2023-09-24 Sun 15:55]
:UPDATED:  [2023-09-24 Sun 15:55]
:ID:       a00babb5-1422-43bf-8bb9-06a9d85a73c1
:ROAM_EXCLUDE: t
:END:

******** OLD udev-nvidia                                                   :inactive:
:PROPERTIES:
:ID:       e005dec1-7261-4fcd-84b6-49209ea7d7b0
:CREATED:  [2022-09-28 Wed 15:52]
:UPDATED:  [2023-07-16 Sun 19:46]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref services-sys
        ;;; udev: nvidia
;; (when gaming?
;;   (simple-service
;;    'nvidia-udev-rule udev-service-type
;;    (list nvidia-driver)))
#+end_src

******** OLD X11 gdm with nvidia                                           :inactive:
:PROPERTIES:
:ID:       a91bb43f-465e-4a4a-99fa-a8b4a5ba03e6
:CREATED:  [2022-09-28 Wed 15:52]
:UPDATED:  [2022-09-28 Wed 15:53]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref services-sys
        ;;; desktop manager: X11 gdm + nvidia
(when #f
  (simple-service
   'gdm-xorg-conf gdm-service-type
   (gdm-configuration
    (xorg-configuration
     (xorg-configuration (keyboard-layout %thinkpad-layout)
                         (modules (append
                                   (list nvidia-driver)
                                   %default-xorg-modules))
                         (drivers (list "nvidia")))))))
#+end_src
******** NEW nvidia-service
:PROPERTIES:
:ID:       90f44378-4708-46cb-9a88-a5ef957fca5c
:CREATED:  [2023-05-28 Sun 15:03]
:UPDATED:  [2023-05-28 Sun 15:03]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref services-sys

;;(service nvidia-service-type)
#+end_src


******* udev
:PROPERTIES:
:CREATED:  [2023-09-15 Fri 10:23]
:UPDATED:  [2023-09-15 Fri 10:24]
:ID:       0127c2bd-17af-496e-9053-1aea475b86aa
:ROAM_EXCLUDE: t
:END:

******** for qmk
:PROPERTIES:
:CREATED:  [2024-01-24 Wed 13:42]
:UPDATED:  [2024-01-24 Wed 13:42]
:ID:       ce55093e-e8c6-422d-aa46-9252d12e2703
:ROAM_EXCLUDE: t
:END:
- needs user group :: plugdev
- source: qmk-udev-rules :: https://git.savannah.gnu.org/cgit/guix.git/tree/gnu/packages/firmware.scm?h=43a82ad5450a686d2adec99d23f9544a5a1e48cb#n1686

********* as package?
:PROPERTIES:
:CREATED:  [2024-01-24 Wed 13:43]
:UPDATED:  [2024-01-24 Wed 13:43]
:ID:       839f2adb-1fd4-4b4a-8fca-b0f371eec5ae
:ROAM_EXCLUDE: t
:END:

********* group, plugdev
:PROPERTIES:
:CREATED:  [2024-01-28 Sun 14:34]
:UPDATED:  [2024-01-28 Sun 14:41]
:ID:       77bb6a5d-faaf-40af-9c0d-bb224947c52a
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref services-sys
;; User account and groups for QMK / ZSA.

(simple-service 'udev-qmk-plugdev account-service-type
                (list (user-group (name "plugdev"))))

;; (service-extension account-service-type
;;                  (const (list (user-group (name "plugdev")))))
#+end_src

******** for zsa keyboards
:PROPERTIES:
:CREATED:  [2023-09-24 Sun 15:55]
:UPDATED:  [2023-09-24 Sun 15:55]
:ID:       cb6e1e4a-c594-4955-aa32-4a07bc04620e
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref services-sys
(udev-rules-service
 'zsa
 (udev-rule
  "50-zsa.rules"
  (string-append
   ;; source :: https://github.com/zsa/wally/wiki/Linux-install
   ;; requires USER to be in GROUP `plugdev'
   "# Rules for Oryx web flashing and live training"
   "KERNEL==\"hidraw*\", ATTRS{idVendor}==\"16c0\", MODE=\"0664\", GROUP=\"plugdev\""
   "KERNEL==\"hidraw*\", ATTRS{idVendor}==\"3297\", MODE=\"0664\", GROUP=\"plugdev\""

   "# Legacy rules for live training over webusb (Not needed for firmware v21+)"
   "  # Rule for all ZSA keyboards"
   "  SUBSYSTEM==\"usb\", ATTR{idVendor}==\"3297\", GROUP=\"plugdev\""
   "  # Rule for the Moonlander"
   "  SUBSYSTEM==\"usb\", ATTR{idVendor}==\"3297\", ATTR{idProduct}==\"1969\", GROUP=\"plugdev\""
   "  # Rule for the Ergodox EZ"
   "  SUBSYSTEM==\"usb\", ATTR{idVendor}==\"feed\", ATTR{idProduct}==\"1307\", GROUP=\"plugdev\""
   "  # Rule for the Planck EZ"
   "  SUBSYSTEM==\"usb\", ATTR{idVendor}==\"feed\", ATTR{idProduct}==\"6060\", GROUP=\"plugdev\""

   "# Wally Flashing rules for the Ergodox EZ"
   "ATTRS{idVendor}==\"16c0\", ATTRS{idProduct}==\"04[789B]?\", ENV{ID_MM_DEVICE_IGNORE}=\"1\""
   "ATTRS{idVendor}==\"16c0\", ATTRS{idProduct}==\"04[789A]?\", ENV{MTP_NO_PROBE}=\"1\""
   "SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"16c0\", ATTRS{idProduct}==\"04[789ABCD]?\", MODE:=\"0666\""
   "KERNEL==\"ttyACM*\", ATTRS{idVendor}==\"16c0\", ATTRS{idProduct}==\"04[789B]?\", MODE:=\"0666\""
   "# Keymapp / Wally Flashing rules for the Moonlander and Planck EZ"
   "SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"0483\", ATTRS{idProduct}==\"df11\", MODE:=\"0666\", SYMLINK+=\"stm32_dfu\""
   "# Keymapp Flashing rules for the Voyager"
   "SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"3297\", MODE:=\"0666\", SYMLINK+=\"ignition_dfu\""
   )))
#+end_src
******** udev-sdmount
:PROPERTIES:
:ID:       c3963cdf-a521-4647-b76c-4128b42457ce
:CREATED:  [2023-03-14 Tue 17:49]
:UPDATED:  [2024-02-08 Thu 15:13]
:END:

********* exposition
:PROPERTIES:
:ID:       b665d4a3-0e73-45fb-acf1-747ee64d49ce
:CREATED:  [2023-03-14 Tue 18:18]
:UPDATED:  [2023-03-14 Tue 18:21]
:ROAM_EXCLUDE: t
:END:

In plain english:

When a block device, such as an SD card, is plugged in, if it's in a
predefined list of devices (e.g by their filesystem UUIDs) copy the contents
to the host filesystem, deleting from the source upon completion.

questions:
- is it really worth namespacing the 'dump' by date?  this would mean rsync
  cannot dedupe, but protects against residual corrupted data from the SD
  card.

********** shell example
:PROPERTIES:
:ID:       fb07c83c-8e9d-417a-9f85-4d8cd4a8184c
:CREATED:  [2023-03-14 Tue 18:18]
:UPDATED:  [2024-02-08 Thu 15:13]
:ROAM_EXCLUDE: t
:END:

#+begin_src shell
# note, uuid is fabricated

id="cf27c7d8-74f7-46ee-9529-513870eef822a"
i="/mnt/dump/${id}"
o="/media/dump/${id}/$(date +%s)"

mount UUID="${id}" "$i"
mkdir -p "${o}"
rsync \
    --archive \
    --recursive \
    --remove-source-files \
    "${i}" \
    "${o}"

#+end_src

*********** for zv
:PROPERTIES:
:ID:       0b749391-8852-4eab-abc7-89f96d2b2b64
:CREATED:  [2023-07-25 Tue 17:45]
:UPDATED:  [2023-07-25 Tue 17:45]
:ROAM_EXCLUDE: t
:END:

#+begin_src shell
i="/mnt/zv"
o="/mnt/chopi/zv/$(date +%s)"

mkdir -p "${o}"
sudo rsync \
    --archive \
    --recursive \
    --remove-source-files \
    "${i}" \
    "${o}" &&  echo i am fucking done copying |  espeak
#+end_src
********* TODO src
:PROPERTIES:
:ID:       941f6f6c-707f-4419-b655-3dfa484d17ef
:CREATED:  [2023-03-14 Tue 18:18]
:UPDATED:  [2023-09-24 Sun 16:17]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref null
(udev-rules-service
      'ydotool
      (udev-rule
       "80-uinput.rules"
       ;; TODO: Take it from ydotool package
       (string-append
        "KERNEL==\"uinput\", MODE==\"0660\", "
        "GROUP=\"input\", OPTIONS+=\"static_node=uinput\"")))

#+end_src
******** ydotool
:PROPERTIES:
:CREATED:  [2023-09-24 Sun 16:26]
:UPDATED:  [2023-09-24 Sun 16:26]
:ID:       6f388634-1b6c-4dc3-b4cb-c4f25122db50
:ROAM_EXCLUDE: t
:END:


#+begin_src scheme :noweb-ref services-sys
(udev-rules-service
      'ydotool
      (udev-rule
       "80-uinput.rules"
       ;; TODO: Take it from ydotool package
       (string-append
        "KERNEL==\"uinput\", MODE==\"0660\", "
        "GROUP=\"input\", OPTIONS+=\"static_node=uinput\"")))

#+end_src

******* db
:PROPERTIES:
:CREATED:  [2023-09-24 Sun 15:48]
:UPDATED:  [2023-09-24 Sun 15:48]
:ID:       6e163dec-f54c-4171-ae29-45f6bcf2e9a0
:ROAM_EXCLUDE: t
:END:

******** postgresql (v10)
:PROPERTIES:
:ID:       f3e1e339-0500-410e-87b2-ed61fc47f9a0
:UPDATED:  [2024-01-25 Thu 15:56]
:CREATED:  [2022-09-28 Wed 15:53]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref services-sys
(unless #t ;;gaming?
  (service postgresql-service-type
           (postgresql-configuration
            (config-file
             (postgresql-config-file
              (hba-file
               (plain-file "pg_hba.conf"
                           "
local	all	all			trust
host	all	all	127.0.0.1/32    md5
host	all	all	0.0.0.0/0       md5
"
                           ))))
            (postgresql (@ (gnu packages databases) postgresql-10)))))
#+end_src

******** postgresql: timescaledb                                           :inactive:
:PROPERTIES:
:ID:       54345225-6b45-4465-9646-6bdc81ac41a1
:CREATED:  [2022-09-28 Wed 15:54]
:UPDATED:  [2022-09-28 Wed 15:54]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref services-sys
;; analytics ; timescaledb
;; (unless gaming?
;;   (service postgresql-service-type
;;            (name "postgres-tsdb-14")
;;            (postgresql-configuration
;;             (port 5435)
;;             (extension-packages
;;              (list (@ (gnu packages databases) timescaledb)
;;                    (@ (gnu packages geo) postgis)))
;;             (postgresql (@ (gnu packages databases) postgresql-14)))))
#+end_src

********* postgresql: roles
:PROPERTIES:
:ID:       4af4ec02-7bd3-416f-a4a3-e311cd752192
:CREATED:  [2022-09-28 Wed 15:54]
:UPDATED:  [2023-07-17 Mon 10:11]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref services-sys
(unless #t ;; gaming?
  (service postgresql-role-service-type
           (postgresql-role-configuration
            (roles (list (postgresql-role
                          (name "postgres")
                          (permissions '(superuser))
                          (create-database? #t))
                         (postgresql-role
                          (name "samuel")
                          (permissions '(superuser login))
                          (create-database? #t))
                         (postgresql-role
                          (name "newstore")
                          (permissions '(login))
                          (create-database? #t)))))))
#+end_src

******** openssh server
:PROPERTIES:
:ID:       1cda9c5a-ef77-4735-aac7-b732054413c3
:CREATED:  [2022-09-28 Wed 15:54]
:UPDATED:  [2023-03-28 Tue 15:41]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref services-sys
;;; ssh
;; TODO key up, remove password method
(service openssh-service-type
         (openssh-configuration
          (password-authentication? #t)
          ;; (authorised-keys
          ;;  `(("hww" ,(local-file "hww.pub"))
          ;;    ))
          ))
#+end_src

******** nfs
:PROPERTIES:
:ID:       8b00d302-567c-4773-a98f-0d4682d3b368
:CREATED:  [2023-08-15 Tue 13:11]
:UPDATED:  [2023-09-24 Sun 15:48]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref services-sys
;; (gnu services nfs)
(service nfs-service-type
         (nfs-configuration
                (exports
                 '(("/export"
                    "*(ro,insecure,no_subtree_check,crossmnt,fsid=0)")))))
#+end_src

******* base-services
:PROPERTIES:
:ID:       8f7a4a2a-c195-4d06-8d76-25a5671ad941
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2023-03-28 Tue 15:53]
:ROAM_EXCLUDE: t
:END:

******** guix substitutes, keys
:PROPERTIES:
:CREATED:  [2023-09-24 Sun 15:55]
:UPDATED:  [2023-09-24 Sun 15:55]
:ID:       ec8eeefc-ca70-418c-ad18-d47dd7ab148b
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref main
(unless gaming?
  (feature-base-services
   #:guix-substitute-urls '("https://substitutes.nonguix.org")
   #:guix-authorized-keys
   (list
     ;;; https://substitutes.nonguix.org/signing-key.pub
    ;; see also https://guix.gnu.org/manual/en/html_node/Substitutes.html
    (plain-file "nonguix.pub" "
(public-key
 (ecc
  (curve Ed25519)
  (q #C1FD53E5D4CE971933EC50C9F307AE2171A2D3B52C804642A7A35F84F3A4EA98#)
  )
 )
"))))
#+end_src

******* desktop-services
:PROPERTIES:
:ID:       f2840489-2e7e-483b-960c-3bc8e3b41412
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 10:52]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref main
(unless gaming? (feature-desktop-services))
#+end_src

****** docker
:PROPERTIES:
:ID:       07f0f4f4-500d-488f-b678-88865aa775e0
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 12:46]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-docker)
#+end_src
****** qemu
:PROPERTIES:
:ID:       92a2bcf9-b388-4331-85c3-14a24657f0b4
:CREATED:  [2022-09-29 Thu 11:37]
:UPDATED:  [2022-09-29 Thu 12:01]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref main
(feature-qemu)
#+end_src
****** backlight
:PROPERTIES:
:ID:       10a02289-4033-4be5-a364-555a29d77849
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-09-29 Thu 11:49]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref main
(feature-backlight #:step 5)
#+end_src

****** pipewire
:PROPERTIES:
:ID:       9a824aa7-0fed-4f84-a076-f2a5efc8f1b9
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 10:52]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref main
(unless gaming? (feature-pipewire))
#+end_src

****** fonts
:PROPERTIES:
:ID:       e4de9c1d-4566-4a53-b77b-6e2ad7662d58
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2023-10-23 Mon 14:51]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-fonts
 #:font-monospace
 (font
  (name "Iosevka")
  (package (@ (gnu packages fonts) font-iosevka))
  (size 14)
  (weight 'light)))
#+end_src

****** shell
:PROPERTIES:
:ID:       d6f26fbc-df9f-4a1f-8875-78fd654ecb64
:CREATED:  [2022-09-28 Wed 15:41]
:UPDATED:  [2022-09-28 Wed 15:41]
:ROAM_EXCLUDE: t
:END:

****** vterm
:PROPERTIES:
:ID:       8bd59de0-c2f4-42fb-9f31-4c8890e9e68a
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2023-07-15 Sat 19:12]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref main
(feature-vterm)
#+end_src

****** bash
:PROPERTIES:
:ID:       c5e6bc9f-9c77-46b2-a41e-883d81ae1fc5
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 10:52]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref main
(feature-bash)
#+end_src

****** direnv
:PROPERTIES:
:ID:       4ce3bb66-ccbb-4cf3-b92d-2e3bda91adf7
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-09-07 Wed 18:16]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref main
(feature-direnv)
#+end_src

****** zsh
:PROPERTIES:
:ID:       62082caa-8650-4eca-b90d-be7f82439d55
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 10:52]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref main
(feature-zsh
 #:enable-zsh-autosuggestions? #t)
#+end_src

****** ssh
:PROPERTIES:
:ID:       855bb3df-f74b-4fff-9122-7c334a878dcc
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2023-09-24 Sun 16:44]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-ssh
 #:ssh-configuration
 (home-ssh-configuration
  ;; (default-options
  ;;   '((hostkey-algorithms . "+ssh-rsa")
  ;;     (pubkey-accepted-algorithms "+ssh-rsa")))
  (extra-config
   (list (ssh-host
          (host "qz")
          ;; <(create ixy->qz key)>
          (options '((user . "samuel")
                     (hostname . "192.168.0.249")
                     (port . 22)
                     (identity-file . "~/.ssh/qzdl"))))
         (ssh-host
          (host "ko")
          (options '((user . "root")
                     (hostname . "192.168.0.240")
                     (port . 2222)
                     (identity-file . "~/.ssh/ko"))))
         (ssh-host
          (host "yoho")
          (options '((user . "yoho")
                     (hostname . "192.168.0.12")
                     (port . 22)
                     (identity-file . "~/.ssh/yoho"))))
         (ssh-host
          (host "boggartonius")
          (options '((user . "chopi")
                     (hostname . "192.168.0.43")
                     (port . 22)
                     (identity-file . "~/.ssh/ixy-bogg"))))
         (ssh-host
          (host "medmac")
          (options '((user . "sam")
                     (hostname . "192.168.1.118")
                     (port . 22)
                     (identity-file . "~/.ssh/ixy-medmac"))))))))
#+end_src


****** git
:PROPERTIES:
:ID:       dcd3cd89-5c4d-41e3-9ed5-324a48dc3546
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2023-09-24 Sun 16:43]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-git
 #:extra-config
 '((pull
    ((rebase . #t)))
   (diff
    ((context . 4)  ;; magit default=3;  4 shows org prop-drawer & heading.
     ))
   ;; (slurp-file-like (local-file "./etc/git/work_config"))
   ;; '(#~"[includeIf \"gitdir:~/git/ns\"]
   ;;     [user]
   ;;         signingkey = \"290D5A69F2021C4E\"
   ;;         email = \"sculpepper@newstore.com\"
   ;; ")
   ))
#+end_src

******* config_work
:PROPERTIES:
:ID:       1f073518-b77a-460c-abc8-bc265c4f9e6c
:CREATED:  [2022-11-03 Thu 15:18]
:UPDATED:  [2022-11-03 Thu 15:34]
:ROAM_EXCLUDE: t
:END:

#+begin_src conf :tangle ./config/git/config_work
[includeif "gitdir:~/git/ns"]
    [user]
        signingkey = "290D5A69F2021C4E"
        email = "sculpepper@newstore.com"
#+end_src

****** network
:PROPERTIES:
:ID:       d9d8aa24-494b-4906-b5ab-0dd56c0bf070
:CREATED:  [2022-09-28 Wed 15:41]
:UPDATED:  [2023-03-30 Thu 10:40]
:ROAM_EXCLUDE: t
:END:
******* bluetooth
:PROPERTIES:
:ID:       4f2da545-1b08-4465-9e3e-060a5dcbc4c5
:CREATED:  [2022-08-26 Fri 11:49]
:UPDATED:  [2023-03-23 Thu 15:54]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref main
(feature-bluetooth)
#+end_src
******* sshsocks
:PROPERTIES:
:ID:       a94c429f-77eb-4e96-b1d3-1019071e6f6e
:CREATED:  [2022-08-01 Mon 09:49]
:UPDATED:  [2022-08-01 Mon 12:30]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
;;(feature-ssh-socks-proxy
;; #:host "204:cbf:3e07:e67a:424f:93bc:fc5c:b3dc")
#+end_src

******* ip2d
:PROPERTIES:
:ID:       73a80c20-ac38-4929-abc1-171090b6c4dd
:CREATED:  [2022-08-01 Mon 10:41]
:UPDATED:  [2022-08-08 Mon 16:48]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
;;(feature-i2pd
;; #:outproxy 'http://acetone.i2p:8888
;; ;; 'purokishi.i2p
;; #:less-anonymous? #t)
#+end_src

******* transmission
:PROPERTIES:
:ID:       6357a61f-0d61-4e62-9b8b-b4442b6923d6
:CREATED:  [2022-08-01 Mon 10:55]
:UPDATED:  [2022-09-28 Wed 15:58]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-transmission #:auto-start? #f)
#+end_src

****** wm
:PROPERTIES:
:ID:       ffb41d6f-7d79-4bee-8f4a-809240572cf9
:CREATED:  [2022-09-28 Wed 15:41]
:UPDATED:  [2022-09-28 Wed 15:41]
:ROAM_EXCLUDE: t
:END:
******* swaywm
:PROPERTIES:
:ID:       6b5b3a48-ad8a-4fa9-af06-325fd71530a0
:CREATED:  [2022-09-28 Wed 15:41]
:UPDATED:  [2022-09-28 Wed 15:41]
:ROAM_EXCLUDE: t
:END:

******** sway
:PROPERTIES:
:ID:       05be317e-8f65-4a14-a83f-db104b19788f
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2023-09-25 Mon 18:29]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(unless gaming?
  (feature-sway
   ;;#:sway (replace-mesa sway)
   #:xwayland? #t
   ;; #:opacity 0.9 ;; TODO qzdl
   ;; #:wallpaper "$HOME/.cache/wallpaper.png" ;; TODO qzdl
   #:extra-config
   `(
     ;;(include ,(local-file "./config/sway/config"))

     ;; TODO sway: toggle opacity for WINDOW

     (,#~"output * bg ~/.cache/wallpaper.png fill")
     ;;(,#~"output eDP-1 bg ~/.cache/wallpaper.png fill")
     (,#~"output DP-2 res 3840x1080")
     (,#~"output DP-1 res 3840x1080")

     ;; TODO sway: wacom input rotation matrix
     (,#~"input \"*\" tool_mode \"*\" relative calibration_matrix 0.0 -1.0 1.0 1.0 0.0 0.0")

     ;; danke demis ht - Sharing Indicatortps://github.com/minikN/guix/blob/ca15b5a5954d50fe75e2b03f21afc019e002022b/config.scm#L173
     (for_window "[app_id=\"pavucontrol\"]" floating enable, border pixel)
     (for_window "[app_id=\"pinentry-qt\"]" floating enable, border pixel)

     (for_window "[title=\"Nightly - Sharing Indicator\"]" floating enable, border pixel)
     ;; (for_window "[title=\"Emacs (Client) [pass]\"]" floating enable, border pixel)
     ;; (for_window "[title=\"Application Launcher - Emacs Client\"]" floating enable, border pixel)
     ;; (for_window "[title=\"pass - Emacs Client\"]" floating enable, border pixel)

     (bindsym $mod+Ctrl+o opacity set 1)
     (bindsym $mod+Ctrl+p opacity minus 0.1)

     ;;(bindsym $mod+x exec $menu)

     (gaps inner 20)

     ;;; Mousepad sensitivity & behaviorr
     (input type:touchpad
            ;; TODO: Move it to feature-sway or feature-mouse?
            ((accel_profile flat)
             (pointer_accel "0.2")
             (natural_scroll enabled) ;; tablet / phone mindset
             (tap enabled)))

     ;;; Nub Life.
     (input "2:10:TPPS/2_Elan_TrackPoint"
            ((pointer_accel "0.2")
             (accel_profile flat)))

     ;;; Middle Mouse.
     (bindsym $mod+button2 "[con_mark=_prev]" focus)

     ;;; Volume Control.
     (bindsym $mod+bracketright exec "pactl set-sink-volume @DEFAULT_SINK@ +5%")
     (bindsym $mod+bracketleft exec "pactl set-sink-volume @DEFAULT_SINK@ -5%")
     (bindsym $mod+Ctrl+bracketright exec "pactl set-sink-mute @DEFAULT_SINK@ toggle")
     (bindsym $mod+Ctrl+bracketleft exec "pactl set-source-mute @DEFAULT_SOURCE@ toggle")
     ;; alsa_input.usb-TEAC_Corporation_TASCAM_DR_Series-00.analog-stereo
     )))
#+end_src

#+RESULTS:

******** sh: track-prev-focus.sh
:PROPERTIES:
:CREATED:  [2023-09-24 Sun 18:27]
:UPDATED:  [2023-09-24 Sun 18:27]
:ID:       fb0a3ead-e11c-4089-be79-6df1bd8544d3
:ROAM_EXCLUDE: t
:END:

#+begin_src shell :tangle ~/.local/bin/track_prev_focus
#!/bin/sh

prev_focus=$(swaymsg -r -t get_seats | jq '.[0].focus')

swaymsg -m -t subscribe '["window"]' | \
  jq --unbuffered 'select(.change == "focus").container.id' | \
  while read new_focus; do
    swaymsg "[con_id=${prev_focus}] mark --add _prev" &>/dev/null
    prev_focus=$new_focus
  done
#+end_src

******* sway-run-on-tty
:PROPERTIES:
:ID:       1a67a54c-b9c9-4957-8bb7-24633e88c432
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2023-06-05 Mon 19:15]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-sway-run-on-tty
 #:sway-tty-number 2
 ;;#:launch-arguments "--unsupported-gpu 2> ${XDG_LOG_HOME}/sway.log"
 )

#+end_src

******** TODO sway X nvidia
:PROPERTIES:
:CREATED:  [2023-09-24 Sun 15:57]
:UPDATED:  [2023-09-24 Sun 15:57]
:ID:       e5c3e4cf-a444-4d14-8f17-87d85e97188a
:ROAM_EXCLUDE: t
:END:

******* sway-screenshot
:PROPERTIES:
:ID:       af8a8d1a-38ce-4e25-9c34-f1f0c8518394
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2023-07-05 Wed 18:47]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(unless gaming? (feature-sway-screenshot))
#+end_src

******* waybar
:PROPERTIES:
:ID:       ddc53ffa-d988-47ee-b8cf-0ced515be0a8
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-11-08 Tue 12:10]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(unless gaming?
  (feature-waybar
   #:waybar-modules
   (list
    (waybar-sway-workspaces)
    ;; (waybar-sway-window)
    (waybar-tray)
    (waybar-idle-inhibitor)
    ;; (waybar-temperature)
    ;; (waybar-sway-language)
    (waybar-microphone)
    (waybar-volume #:scroll-step 10)
    (waybar-battery #:intense? #f)
    (waybar-clock))))
#+end_src

******* swayidle
:PROPERTIES:
:ID:       95052943-1d47-455f-903f-a40a1b8e086c
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 10:52]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref null
;;:noweb-ref main
;; FIXME swayidle: external monitor resuming bug (probably gpu issue)e
;; https://github.com/swaywm/sway/issues/5759
(unless gaming?
  (feature-swayidle))
#+end_src

******* swaylock
:PROPERTIES:
:ID:       3f203601-b2fa-4e25-802a-65a539120fc7
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 12:36]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(unless gaming?
  (feature-swaylock
   #:swaylock (@ (gnu packages wm) swaylock-effects)
   ;; The blur of last-screen on lock screen is not privacy-friendly.
   ;; TODO use blurred wallpaper from $HOME/.cache/wallpaper.png
   #:extra-config '(;; (screenshots)
                    (effect-blur . 7x5)
                    (image . "~/.cache/wallpaper.png")
                    (scale . fill)
                    (clock))))
#+end_src

******* swaynotificationcenter
:PROPERTIES:
:ID:       e28ec2ac-d302-4816-b875-6663016cf7ff
:CREATED:  [2023-08-31 Thu 10:10]
:UPDATED:  [2023-08-31 Thu 10:16]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
;;(feature-swaynotificationcenter)

;; not found...
#+end_src

******* rofi
:PROPERTIES:
:ID:       3edaad94-3afa-47cf-8317-dadea891c9cf
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-09-29 Thu 12:17]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref null
(unless gaming?
  (feature-rofi
   #:theme (local-file "config/rofi/themes/base16-default-dark.rasi")))
#+end_src

*********
:PROPERTIES:
:CREATED:  [2023-09-24 Sun 16:00]
:UPDATED:  [2023-09-24 Sun 16:00]
:ID:       814ad7c1-c78c-4924-b4cf-80aafc8b4882
:ROAM_EXCLUDE: t
:END:

****** kanshi
:PROPERTIES:
:ID:       e9a4d259-45cc-43e9-89e5-69319a169928
:CREATED:  [2022-10-28 Fri 12:09]
:UPDATED:  [2023-05-23 Tue 10:09]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref null
;;:noweb-ref main
;; TODO understand why kanshi freezes my kernel
;;
;;(1200 seconds of cup sleep!!  dangerous, hard poweroff via button is only
;;recourse)
(feature-kanshi
 #:extra-config
 `((profile laptop ((output eDP-2 enable)))
   (profile laptop0 ((output eDP-1 enable)))
   (profile docked ((output eDP-2 disable)
                    (output DP-2 enable)))
   (profile docked0 ((output eDP-1 disable)
                     (output DP-2 enable)))
   (profile docked1 ((output eDP-2 disable)
                     (output DP-1 enable)))
   (profile docked2 ((output eDP-1 disable)
                     (output DP-1 enable)))
   (profile hdmi ((output eDP-1 enable)
                  (output HDMI-1 enable)))))
#+end_src

****** TODO redshift
:PROPERTIES:
:ID:       43d6b991-b37e-4d1c-86e5-36fd0a0e5cdf
:CREATED:  [2023-04-26 Wed 21:11]
:UPDATED:  [2023-04-26 Wed 21:32]
:ROAM_EXCLUDE: t
:END:

annoying! cannot fathom why this doesn't work

#+begin_src scheme :noweb-ref main
;; (feature-redshift
;;  #:redshift redshift-wayland)
#+end_src

****** i3
:PROPERTIES:
:ID:       4a57548b-2784-4807-befb-a02d27a02012
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-09-29 Thu 12:18]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref null
;;     ;; --- WM -----------------------------------------
;;     ;; --- i3   --------

;;     ;;(feature-i3)
;;     ;; (feature-i3-run-on-tty
;;     ;;  #:i3-tty-number 2
;;     ;;  ;;#:launch-args "> /tmp/i3.log"
;;     ;;  )
#+end_src

***** dev
:PROPERTIES:
:ID:       6ec8a5e5-2620-4d95-98a1-f7e382e497ed
:CREATED:  [2022-09-28 Wed 15:59]
:UPDATED:  [2022-09-28 Wed 15:59]
:ROAM_EXCLUDE: t
:END:

****** python
:PROPERTIES:
:ID:       e76dad31-73f3-4fac-bd9b-d7d3bb95cb63
:CREATED:  [2023-08-31 Thu 10:10]
:UPDATED:  [2023-08-31 Thu 10:10]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme  :noweb-ref main
(feature-python)
#+end_src
****** clojure
:PROPERTIES:
:ID:       d2a0b255-bfd5-44d4-8a22-817ec9d19769
:CREATED:  [2022-10-28 Fri 12:16]
:UPDATED:  [2022-10-28 Fri 13:25]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
;;(feature-clojure)
#+end_src
****** plantuml
:PROPERTIES:
:ID:       74fb76ed-4ddc-4f00-b9fd-328d3f60448c
:CREATED:  [2023-08-31 Thu 10:13]
:UPDATED:  [2023-08-31 Thu 10:13]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-plantuml)
#+end_src

***** emacs-related
:PROPERTIES:
:ID:       c0924a65-73cc-4693-ba65-6abd6c6634dd
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-08 Mon 17:01]
:ROAM_EXCLUDE: t
:END:

****** emacs
:PROPERTIES:
:ID:       d2fc9152-8683-46c1-9ef2-4ca84510bb49
:CREATED:  [2022-09-28 Wed 16:14]
:UPDATED:  [2024-03-31 Sun 20:06]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-emacs
 ;;-portable
 ;;#:emacs (@ (declantsien packages emacs) emacs-next-wr)
 #:emacs (@ (rde packages emacs) emacs-next-pgtk-latest)
 ;; #:emacs emacs-next-pgtk
 ;; #:emacs emacs-pgtk
 #:native-comp? #t
 )
#+end_src

****** my/emacs-packages                                                        :pkg:
:PROPERTIES:
:ID:       5f892275-23ad-429c-9651-f48f5e8576ec
:CREATED:  [2022-09-28 Wed 16:14]
:UPDATED:  [2024-04-01 Mon 02:55]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref emacs-pkg
"emacs-adaptive-wrap" ;; TODO feature-olivetti
"emacs-calfw"
"emacs-calibredb"
"emacs-chatgpt-shell"
"emacs-chess"
"emacs-company"
"emacs-consult-org-roam"
"emacs-crdt"
"emacs-csv-mode"
"emacs-debbugs"
"emacs-dimmer"
"emacs-edit-server"
"emacs-eglot"
"emacs-elfeed"
"emacs-eros"
;; "emacs-ess" ;; TODO broken [2024-04-01 Mon 02:55]
"emacs-forge"
"emacs-fountain-mode" ;; TODO feature-emacs-fountain-mode
"emacs-ggtags"
"emacs-gnuplot"
"emacs-go-mode"
"emacs-gptel"
"emacs-highlight-indent-guides"
"emacs-hl-todo"
"emacs-htmlize" ;; ement: - ox-export html: org src blocks
"emacs-hyperbole"
"emacs-jq-mode"
"emacs-json-snatcher"
"emacs-jupyter"
"emacs-ligature"
"emacs-logview" ;; https://github.com/doublep/logview
"emacs-lsp-mode"
"emacs-lsp-ui"
"emacs-lua-mode"
"emacs-magit-todos"  ;; TODO feature-version-control
"emacs-ob-async"
"emacs-org-download"
"emacs-org-edit-latex"
"emacs-org-fragtog"
"emacs-org-jira"
"emacs-org-ql"
"emacs-org-reveal"
"emacs-org-roam-ui"
"emacs-org-super-agenda"
"emacs-org-transclusion"
"emacs-org-tree-slide"
"emacs-org-web-tools"
"emacs-orgit"        ;; TODO feature-version-control
"emacs-ox-hugo"
"emacs-ox-pandoc"
"emacs-paredit"
"emacs-plantuml-mode"
"emacs-protobuf-mode"
"emacs-py-isort"
"emacs-python-black"
"emacs-restart-emacs"
"emacs-slime"
"emacs-slime-repl-ansi-color"
"emacs-slime-volleyball"
"emacs-string-inflection"
"emacs-terraform-mode"
"emacs-yaml-mode"
;; "emacs-explain-pause-mode" ;; FIXME upon reload, check fails :: https://ci.guix.gnu.org/search?query=emacs-explain-pause-mode%20spec:master
;; "emacs-impostman"
;; "emacs-org-autotangle"
;; TODO feature-emacs-lsp
;;"emacs-artbollocks"
;;"emacs-repology"
;;"emacs-vlf" ;; TODO guix: package emacs-vlf
#+end_src

****** misc/emacs-packages
:PROPERTIES:
:CREATED:  [2024-03-31 Sun 16:08]
:UPDATED:  [2024-03-31 Sun 16:08]
:ID:       6e4db0e4-2fc8-4751-a108-a1345cc839cd
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref emacs-pkg-my
;;emacs-consult-dir

;;; QZDL
emacs-sql-indent
emacs-ob-go
emacs-org-ml
emacs-ox-jira
emacs-moldable-emacs
emacs-kubernetes
python-pylsp-mypy
emacs-ox-slack
emacs-svg-clock
emacs-consult-recoll
emacs-bigquery-mode

;; emacs-dogears ;; TODO broken [2024-03-31 Sun 16:08].  consider taking a "no logic in capture approach" anywy.  prescribing / filtering the list vs logging is not a robust thing.
;; emacs-chatgpt-shell (superseded by upstream)
emacs-selectric-mode
emacs-atomic-chrome
emacs-spacious-padding

;;
;; emacs-code-review    ; TODO qzdl pkg
#+end_src
****** TODO emacs-appearance
:PROPERTIES:
:ID:       e7344b77-dfd0-4bc5-aade-cd6b92dc58da
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2024-03-31 Sun 19:10]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-emacs-modus-themes)
;; TODO extra-modus-theme-overrides
;; [[file:~/git/sys/rde/src/rde/features/emacs-xyz.scm::(define* (feature-emacs-modus-themes][emacs-xyz.scm::feature-emacs-modus-themes]]
;; #:extra-elisp
;; `((setq modus-themes-syntax '(faint))
;;   ;; (setq modus-themes-region '(bg-only))
;;   ;; (setq modus-themes-paren-match '(underline))
;;   (setq modus-themes-org-blocks 'tinted-background))

(feature-emacs-appearance)
#+end_src

****** TODO emacs .. etc
:PROPERTIES:
:ID:       480434ca-5147-45f6-9b00-e47b87345dc2
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-11-03 Thu 15:10]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-emacs-completion
 #:mini-frame? #f
 #:marginalia-align 'right)
(feature-emacs-vertico)
(feature-emacs-project)
(feature-emacs-perspective)
(feature-emacs-input-methods)
(feature-emacs-which-key)
(feature-emacs-keycast)

;; (feature-emacs-perfect-margin ;; TODO QZDL
;;  #:visible-width 150)

(feature-emacs-dired)
;;(feature-emacs-vterm) ;; TODO QZDL merge with feature-vterm
(feature-emacs-monocle)
;; (feature-emacs-message) ;; TODO compose mail.  broken with emacs-feature-portableu
#+end_src

****** emacs-smartparens
:PROPERTIES:
:ID:       01e9df44-bbc7-483d-b17a-0932d54be330
:CREATED:  [2022-09-28 Wed 15:37]
:UPDATED:  [2022-09-28 Wed 16:19]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-emacs-smartparens
 #:show-smartparens? #t)
#+end_src

#+RESULTS:

****** emacs-eglot
:PROPERTIES:
:ID:       74c844c2-55fa-4ac3-b394-6c53488e5cf7
:CREATED:  [2022-09-28 Wed 16:23]
:UPDATED:  [2022-09-28 Wed 16:23]
:ROAM_EXCLUDE: t
:END:

****** emacs-corfu
:PROPERTIES:
:ID:       2a3598dc-be14-4f8c-ae66-100d8d3f9552
:CREATED:  [2022-09-28 Wed 15:36]
:UPDATED:  [2023-04-16 Sun 15:45]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme  :noweb-ref main
(feature-emacs-corfu
 #:corfu-doc-auto #f)
#+end_src

****** emacs-helpful
:PROPERTIES:
:ID:       d652de96-8917-4689-bf94-426a509c1a98
:CREATED:  [2023-04-16 Sun 15:45]
:UPDATED:  [2023-04-16 Sun 15:45]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-emacs-help)
#+end_src

****** emacs-info
:PROPERTIES:
:ID:       96b6b673-2ef5-4981-809e-e48234ee7f5f
:CREATED:  [2023-04-16 Sun 15:45]
:UPDATED:  [2023-04-16 Sun 15:46]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-emacs-info)
#+end_src

****** emacs-tempel
:PROPERTIES:
:ID:       37e931d1-9093-484c-80ad-c7b30f20aa45
:CREATED:  [2022-09-28 Wed 15:38]
:UPDATED:  [2023-07-04 Tue 10:58]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-emacs-tempel
 #:default-templates? #t
 #:templates `(fundamental-mode
               ,#~""
               (t (format-time-string "%Y-%m-%d"))
               (ielisp (elisp "src_emacs-lisp{ " r> " }"))))
#+end_src

****** emacs-erc
:PROPERTIES:
:ID:       1019ae2e-1221-4883-bb1e-35270a6fb25d
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2023-03-02 Thu 17:58]
:ROAM_EXCLUDE: t
:END:


#+begin_src scheme :noweb-ref null
(feature-emacs-erc
 #:erc-kill-buffers-on-quit #t
 #:erc-nick "qzdl"
 #:align-nicknames? #f
 #:erc-autojoin-channels-alist
 '((Libera.Chat "#guix" "#emacs" "#tropin" "#rde" "#sway")
   (OFTC        "#pipewire" "#wayland"))
 #:log? #t
 ;; #:erc-server "chat.sr.ht"
 #:extra-config
 `((setq rde-bouncer-network-alist
         `((irc.libera.chat . "qzdl")
           (irc.oftc.net . "qzdl")))
   (setq rde-bouncer-nick "qzdl")

   ;; Rename server buffers to reflect the current network name instead
   ;; of SERVER:PORT (e.g., "freenode" instead of "irc.freenode.net:6667").
   ;; This is useful when using a bouncer like ZNC where you have multiple
   ;; connections to the same server.
   (setq erc-rename-buffers t)

   (defun rde-erc-connect-bouncer-oftc ()
     (interactive)
     (setq erc-email-userid "qzdl/irc.oftc.net")
     (erc-tls :server "chat.sr.ht" :nick rde-bouncer-nick))
   (defun rde-erc-connect-bouncer-libera ()
     (interactive)
     (setq erc-email-userid "qzdl/irc.libera.chat")
     (erc-tls :server "chat.sr.ht" :nick rde-bouncer-nick))))
#+end_src

****** emacs-elpher
:PROPERTIES:
:ID:       7e6b37b2-717b-4be7-9dcc-f0dbe1cfe043
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 12:40]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-emacs-elpher)
#+end_src

****** emacs-ement
:PROPERTIES:
:ID:       18bb85c9-07d5-4b46-8719-5aac67d10670
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 12:41]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
;;(feature-emacs-ement) ;; TODO qzdl
#+end_src


****** emacs-pdf-tools
:PROPERTIES:
:ID:       c1f0a657-91fc-4a27-b33b-df85bfaa9ff1
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2024-04-01 Mon 02:20]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
;; (feature-emacs-pdf-tools) ;; TODO broken [2024-04-01 Mon 02:19] portable emacs
#+end_src

****** emacs-nov-el
:PROPERTIES:
:ID:       1103af98-4018-4f7d-b59d-89e4b844ce2e
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2024-04-01 Mon 02:20]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
;; (feature-emacs-nov-el) ;; TODO broken [2024-04-01 Mon 02:19] portable emacs
#+end_src

****** emacs-git
:PROPERTIES:
:ID:       81f4c2b3-136b-4a37-a40b-3c3b44163bbe
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 12:41]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
;;     ;; TODO: Revisit <https://en.wikipedia.org/wiki/Git-annex>
(feature-emacs-git)
#+end_src

****** org stuff
:PROPERTIES:
:ID:       b3d5483b-2e0a-4075-baea-6c0a65e04d8f
:CREATED:  [2022-09-28 Wed 16:15]
:UPDATED:  [2022-09-28 Wed 16:15]
:ROAM_EXCLUDE: t
:END:

******* TODO org
:PROPERTIES:
:ID:       7fca8716-000f-4794-b174-2ed192d51c26
:CREATED:  [2022-08-01 Mon 12:46]
:UPDATED:  [2024-01-28 Sun 13:58]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref main
(feature-emacs-org
 #:org-directory my-org-directory
 #:org-indent? #f
 #:org-modern? #f
 ;;#:org-agenda-directory my-notes-directory ;; TODO qzdl
 )
#+end_src

******* org-agenda
:PROPERTIES:
:ID:       20c53b2d-bf63-48b9-ad00-ab417b2d9742
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 10:52]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-emacs-org-agenda
 #:org-agenda-files '("~/life/roam/inbox.org"))
#+end_src

******* TODO org-roam
:PROPERTIES:
:ID:       af1f484c-1958-426b-8377-9a1087079086
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 12:42]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
;; TODO: <https://www.labri.fr/perso/nrougier/GTD/index.html#table-of-contents>
(feature-emacs-org-roam
 ;; TODO: Rewrite to states
 #:org-roam-directory my-notes-directory
 #:org-roam-todo? #f
 ;;#:org-roam-dailies-directory (string-append my-notes-directory "/daily")) ;; TODO qzdl
 )
#+end_src

******* TODO org-roam-ui
:PROPERTIES:
:ID:       12eeeff3-fc57-497a-b344-c34824553904
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 12:42]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
;; FIXME guix: org-roam-ui: httpd communication problem (endemic to guix)
;; (feature-emacs-org-roam-ui)
#+end_src

****** TODO emacs-ref
:PROPERTIES:
:ID:       a122ca1d-751b-4af2-8abd-6980bb1a761b
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 12:43]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
;; (feature-emacs-ref
;;  ;; why error with nil for reftex-default-bibliography
;;  ;; TODO: Rewrite to states
;;  #:bibliography-paths
;;  (list (string-append my-org-directory "/tex.bib"))
;;  #:bibliography-notes
;;  (list(string-append my-org-directory "/bib.org")
;;       #:bibliography-directory my-notes-directory)
#+end_src

****** TODO emacs-es/rest
:PROPERTIES:
:ID:       d5965300-1774-44b2-bfc4-f8201622b065
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-09-28 Wed 16:15]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
;;     ;; TODO qzdl (2) es/rest
;;     ;; (feature-emacs-es-mode
;;     ;;  #:package emacs-es-mode-latest)
;;     ;; (feature-emacs-restclient
;;     ;;  #:package-ob emacs-ob-restclient-latest)
#+end_src


***** mpv
:PROPERTIES:
:ID:       dc8200af-d1cd-4911-8c42-0b01e9361da2
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2024-04-01 Mon 00:21]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
;; (feature-mpv)
#+end_src

***** mail
:PROPERTIES:
:ID:       ecb39921-a2d6-4001-8f7c-1a8826ed4b67
:CREATED:  [2022-09-28 Wed 15:41]
:UPDATED:  [2022-09-28 Wed 15:41]
:ROAM_EXCLUDE: t
:END:
****** TODO isync                                                              :mail:
:PROPERTIES:
:ID:       5f12520a-369e-43bf-ab36-64a44c5bfb98
:CREATED:  [2022-08-01 Mon 10:55]
:UPDATED:  [2022-10-28 Fri 12:24]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-isync
 #:isync-verbose #t
 #:isync-serializers
 (append %default-isync-serializers
         `((bravehost . ,bravehost-isync-settings)
           (gmail-tls . ,gmail-tls-isync-settings))))
#+end_src

****** l2md                                                                    :mail:
:PROPERTIES:
:ID:       bd9b236d-db39-449b-8314-77a79ce89fe1
:CREATED:  [2022-08-01 Mon 10:55]
:UPDATED:  [2024-04-01 Mon 02:53]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
;; (feature-l2md) ;; TODO  public-inbox mirrors& istupdate
#+end_src

****** msmtp                                                                   :mail:
:PROPERTIES:
:ID:       c5548269-6010-4a9c-b92f-83b27a722b76
:CREATED:  [2022-08-01 Mon 10:55]
:UPDATED:  [2022-08-29 Mon 17:36]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-msmtp
 #:msmtp-provider-settings
 (append
  %default-msmtp-provider-settings
  `((bravehost . ((host . "mail.bravehost.com")
                  (port . 465)
                  (tls_starttls . off)))
    (gmail-tls . ((host . "smtp.gmail.com")
                  (port . 465)
                  (tls_starttls . off))))))
#+end_src

****** notmuch                                                                 :mail:
:PROPERTIES:
:ID:       3b57f1e4-e156-4505-8d82-085ef082408c
:CREATED:  [2022-08-01 Mon 10:55]
:UPDATED:  [2024-03-04 Mon 12:10]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-notmuch
 #:extra-tag-updates-post
 '("notmuch tag +guix-home -- 'thread:\"{((subject:guix and subject:home) or (subject:service and subject:home) or subject:/home:/) and tag:new}\"'"
   "notmuch tag +calendar  -- 'tag:work and thread:\"{(subject:/nvitation/ or subject:/eclined/ or subject:/ccepted/ or subject:/anceled/)}\"'"
   "notmuch tag +noise -- 'tag:work and (tag:calendar or subject:/basecamp/)'")
 #:notmuch-saved-searches
 (cons*
  '(:name "Inbox :: Personal"  :key "P"
    :query "tag:unread and tag:inbox and tag:personal")
  '(:name "Inbox :: Work"      :key "Ww"
    :query "tag:unread and tag:inbox and tag:/work/")
  '(:name "Inbox :: Guix Home" :key "H"
    :query "tag:unread and tag:guix-home")
  '(:name "Inbox :: RDE"       :key "R"
    :query "tag:unread and (to:/rde/ or cc:/rde/)")
  '(:name "Watching"           :key "tw"
    :query "thread:{tag:watch}")
  '(:name "Work :: data"      :key "Wd"
    :query "tag:work and (from:/jlunan/ or to:/dre/)")
  %rde-notmuch-saved-searches))
#+end_src

***** xdg
:PROPERTIES:
:ID:       2a190f7d-8013-42f2-ab78-49d4f61dd180
:CREATED:  [2022-08-01 Mon 10:55]
:UPDATED:  [2024-03-31 Sun 20:21]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-xdg
 #:xdg-user-directories-configuration
 (home-xdg-user-directories-configuration
  (music "$HOME/music")
  (videos "$HOME/vids")
  (pictures "$HOME/pics")
  (documents "$HOME/docs")
  (download "$HOME/dl")
  (desktop "$HOME")
  (publicshare "$HOME")
  (templates "$HOME")))
#+end_src

***** base packages/rest                                                        :pkg:
:PROPERTIES:
:ID:       9490f8c2-7074-4a89-a62e-f82b6bfc2f2b
:CREATED:  [2022-08-01 Mon 10:55]
:UPDATED:  [2024-03-31 Sun 20:26]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main :noweb yes
(feature-base-packages
 #:home-packages
 (append
  (list
   <<pkg-home>>
   )

  (pkgs

   "figlet" ;; TODO: Move to emacs-artist-mode
   ;;"calibre"
   "utox" "qtox" "jami"

   "vim"

   "alsa-utils"
   "pavucontrol"

   ;; wayland-dev
   "wev"
   "wl-clipboard" "grim"


   "obs" "obs-wlrobs"
   "recutils" "binutils"
   "fheroes2"
   ;; TODO: Enable pipewire support to chromium by default
   ;; chrome://flags/#enable-webrtc-pipewire-capturer
   "ispell"
   ;;
   "hicolor-icon-theme" "adwaita-icon-theme" "gnome-themes-extra"
   "papirus-icon-theme" "arc-theme"
   "thunar"
   ;; "glib:bin"

   ;; TODO: Fix telega package!
   "ffmpeg"

   "ripgrep" "curl" "make"
   "sqlite"

   ;; python-base
   ;;; PYTHON
   "python"
   "python-black"
   "python-flake8"
   "python-isort"
   "python-lsp-server"
   "python-lz4"
   "python-numpy"
   "python-pandas"
   "python-pip"
   ;; "python-psycopg"
   ;; "python-pyan3"
   "python-pytest-black"
   "python-pytest-isort"
   ;; "python-pywal"
   ;; "python-pyzstd"
   "python-scipy"
   ;; "python-virtualenv"
   "python-yq"
   ;; "python-pydot"
   ;; "python-networkx"

   "libnotify"

   "gdk-pixbuf" ;; HACK to fix firefox dialog crashes

   "v4l-utils"
   "qmk-udev-rules"
   ))
 #:system-packages
 (pkgs "fwupd-nonfree")
 )
#+end_src

#+RESULTS:

***** TODO unsorted
:PROPERTIES:
:ID:       72ecbbb1-860b-471e-a2e8-d96cf8c3dac3
:CREATED:  [2023-03-30 Thu 12:47]
:UPDATED:  [2024-01-28 Sun 14:00]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-yt-dlp
 #:emacs-ytdl emacs-ytdl-next)
;;(feature-nyxt)
(feature-emacs-dashboard
 #:show-on-startup? #f)
(feature-emacs-ednc)
(feature-emacs-pulseaudio-control)
(feature-emacs-display-wttr)
(feature-slack-settings
 #:slack-accounts (list (slack-account
                         (workspace "newstoreinc")
                         (nick "sculpepper")
                         (cookie? #t))))
(feature-emacs-slack)
(feature-pantalaimon)
(feature-matrix-settings
 #:matrix-accounts (list (matrix-account
                          (id "@sculp-ns:matrix.org")
                          (server "localhost:8009"))))
(feature-emacs-ement)
(feature-emacs-geiser)
(feature-emacs-guix)
(feature-emacs-elisp)
(feature-emacs-emms)
(feature-emacs-flymake)
(feature-emacs-org-protocol)
(feature-emacs-spelling)
#+end_src

***** TODO pending
:PROPERTIES:
:ID:       5bbe74bc-777b-4dfe-ad73-8650e9ee9ec2
:CREATED:  [2023-07-04 Tue 10:59]
:UPDATED:  [2023-07-04 Tue 10:59]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref null
(feature-compile)
(feature-emacs-battery)
(feature-emacs-browse-url)
(feature-emacs-comint)

;;(feature-emacs-debbugs)
(feature-emacs-dired)


(feature-emacs-graphviz)

(feature-emacs-webpaste)
(feature-go)
(feature-gtk3)
(feature-imv)
(feature-ungoogled-chromium)
#+end_src

***** COMMENT debug: post-%main-features
:PROPERTIES:
:ID:       6a9522fb-fabc-4f94-97e4-2ab8d73905a1
:CREATED:  [2022-07-29 Fri 17:53]
:UPDATED:  [2022-07-29 Fri 18:26]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
;;(map pretty-print %main-features)
(pretty-print "post-%main-features")

#+end_src

**** collectors
:PROPERTIES:
:CREATED:  [2024-03-31 Sun 16:03]
:UPDATED:  [2024-03-31 Sun 16:03]
:ID:       00f22464-570c-4033-9801-0b71f80202c6
:ROAM_EXCLUDE: t
:END:
***** abcdw features
:PROPERTIES:
:ID:       1532c6ba-0d0c-499e-bddd-ae1caa1dc778
:CREATED:  [2022-07-29 Fri 17:48]
:UPDATED:  [2023-07-05 Wed 12:32]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(define %user-features
  (remove
   unspecified?
   (list
    my-feature-user-info
    my-feature-gnupg
    (feature-password-store)
    my-feature-mail-settings

    (feature-keyboard
     ;; To get all available options, layouts and variants run:
     ;; cat `guix build xkeyboard-config`/share/X11/xkb/rules/evdev.lst
     #:keyboard-layout %thinkpad-layout))))
#+end_src

****** COMMENT debug: print features
:PROPERTIES:
:ID:       4d60cafe-ff70-4540-a5ed-2e9b1a7b4b3e
:CREATED:  [2022-07-29 Fri 17:48]
:UPDATED:  [2022-07-29 Fri 17:48]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
;;(map pretty-print %user-features)
#+end_src

****** TODO future features
:PROPERTIES:
:ID:       ad67e350-c601-49f4-ba21-ca6486ed96fb
:CREATED:  [2022-07-29 Fri 17:48]
:UPDATED:  [2022-08-22 Mon 17:34]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
;;; TODO: feature-wallpapers https://wallhaven.cc/
;;; TODO: feature-icecat
;; PipeWire/iwd:
;; https://github.com/J-Lentz/iwgtk
;; https://github.com/krevedkokun/guix-config/blob/master/system/yggdrasil.scm
;; https://github.com/werman/noise-suppression-for-voice#pipewire
#+end_src

#+RESULTS:

****** COMMENT debug: pre main-features
:PROPERTIES:
:ID:       152578fa-8848-40dc-a0e3-a1a51825a5f7
:CREATED:  [2022-07-29 Fri 18:24]
:UPDATED:  [2022-07-29 Fri 18:24]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(pretty-print "pre-%main-features")
#+end_src

***** %main-features
:PROPERTIES:
:ID:       3455e06a-0a2b-4ca9-aca6-2ee2fa05f16f
:CREATED:  [2022-07-29 Fri 17:53]
:UPDATED:  [2022-09-28 Wed 16:09]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme

;;; WARNING: The order can be important for features extending
;;; services of other features.  Be careful changing it.

(define %main-features
  (remove
   (lambda (s) (or (not s) (unspecified? s)))
   (list
    ;;; BEGIN; main
    <<main>>
    ;;; END; main
    )))

#+end_src

**** hw/host features
:PROPERTIES:
:ID:       b34224fa-7b5c-4292-9a0d-27439812a042
:CREATED:  [2022-07-29 Fri 17:53]
:UPDATED:  [2022-07-29 Fri 17:53]
:ROAM_EXCLUDE: t
:END:
***** COMMENT future
:PROPERTIES:
:ID:       23664f9a-bd24-460b-8537-22f9efd3d298
:CREATED:  [2022-07-29 Fri 18:22]
:UPDATED:  [2022-07-29 Fri 18:22]
:ROAM_EXCLUDE: t
:END:

****** TODO Switch from UUIDs to partition labels For better reproducibilty and easier setup.
:PROPERTIES:
:ID:       8983d989-12c3-4e1b-8645-e346571cddcd
:CREATED:  [2022-07-29 Fri 18:22]
:UPDATED:  [2022-07-29 Fri 18:22]
:ROAM_EXCLUDE: t
:END:

****** TODO Grub doesn't support luks2 yet.
:PROPERTIES:
:ID:       ea1aa05f-0279-4d55-a733-f40322f3c8f5
:CREATED:  [2022-07-29 Fri 18:22]
:UPDATED:  [2022-07-29 Fri 18:22]
:ROAM_EXCLUDE: t
:END:

***** ixy                                                                  :host:ixy:
:PROPERTIES:
:ID:       ffec3337-a453-4b25-8919-bdacb6c93562
:CREATED:  [2022-07-29 Fri 17:53]
:UPDATED:  [2022-07-29 Fri 17:53]
:ROAM_EXCLUDE: t
:END:
****** mapped devices                                                      :untangle:
:PROPERTIES:
:ID:       602eb92a-7d29-4c3a-8ca4-d6e9d61f0e4b
:CREATED:  [2022-07-29 Fri 17:53]
:UPDATED:  [2022-07-29 Fri 17:53]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(define ixy-mapped-devices
  (list (mapped-device
         (source (uuid "cb453366-cc17-4742-ada1-91f7f569103f"))
         (target "sys-root")
         (type luks-device-mapping))))
#+end_src
****** file systems                                                        :untangle:
:PROPERTIES:
:ID:       40a378fb-a7a1-456a-b5e8-f15f2f7c7dd3
:CREATED:  [2022-07-29 Fri 17:53]
:UPDATED:  [2022-07-29 Fri 17:53]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(define ixy-file-systems
  (list (file-system
          (device (file-system-label "sys-root"))
          (mount-point "/")
          (type "ext4")
          (dependencies ixy-mapped-devices))
        (file-system
          (device "/dev/nvme0n1p1")
          (mount-point "/boot/efi")
          (type "vfat"))))
#+end_src


******* file systems (from andrew)
:PROPERTIES:
:ID:       4228ac9b-1665-4978-9ded-bfa6e174961c
:CREATED:  [2022-07-29 Fri 17:53]
:UPDATED:  [2022-07-29 Fri 17:53]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
;; (define ixy-file-systems
;;   (append
;;    (map (match-lambda
;;        ((subvol . mount-point)
;;         (file-system
;;           (type "btrfs")
;;           (device "/dev/mapper/enc")
;;           (mount-point mount-point)
;;           (options (format #f "subvol=~a" subvol))
;;           (dependencies ixy-mapped-devices))))
;;      '((root . "/")
;;        (boot . "/boot")
;;        (gnu  . "/gnu")
;;        (home . "/home")
;;        (data . "/data")
;;        (log  . "/var/log")))
;;    (list
;;     (file-system
;;       (mount-point "/boot/efi")
;;       (type "vfat")
;;       (device (uuid "8C99-0704" 'fat32))))))
#+end_src

****** imports
:PROPERTIES:
:ID:       5b8720fd-bc7e-4a8d-bbf7-3030b057d1b7
:CREATED:  [2022-07-29 Fri 17:53]
:UPDATED:  [2022-07-29 Fri 17:53]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(use-modules
 (gnu packages linux)
 ((nongnu packages linux) #:prefix nongnu:)
 ((nongnu system linux-initrd) #:prefix nongnu-sys:))
#+end_src

****** features                                                            :untangle:
:PROPERTIES:
:ID:       3e09d87e-4895-4ab0-9109-4693e44ecb2d
:CREATED:  [2022-07-29 Fri 17:53]
:UPDATED:  [2023-09-26 Tue 15:50]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(define %ixy-features
  (list
   (feature-host-info
    #:host-name "ixy"
    #:timezone  my-timezone)
   ;;; Allows to declare specific bootloader configuration,
   ;;; grub-efi-bootloader used by default
   (feature-bootloader
    #:bootloader-configuration
    (bootloader-configuration
     (bootloader grub-efi-removable-bootloader)
     (targets '("/boot/efi"))))
   ;; os
   (feature-kernel
    ;;#:kernel nongnu:linux-lts ;;; NVIDIA
    #:kernel nongnu:linux ;;; DEFAULT
    #:kernel-arguments
    '("quiet" "ipv6.disable=1" "net.ifnames=0"

      ;;; DEFAULT
       "nouveau.modeset=1"

      ;;; FORUM NVIDIA ATTEMPT https://forums.developer.nvidia.com/t/nvidia-495-on-sway-tutorial-questions-arch-based-distros/192212
      ;;"nvidia-drm.modeset=1" "nouveau.blacklist=1" "modprobe.blacklist=nouveau"

      ;;; NEW NVIDIA ATTEMPT 0
      ;;"nvidia_drm.modeset=1"
      ;;"modprobe.blacklist=nvidiafb,nouveau"
      ;;"nvidia.NVreg_OpenRmEnableUnsupportedGpus=1"

      ;;; NEW NVIDIA ATTEMPT 1 (fail, but progress; nvidia-smi runs)
      ;;"nvidia_drm.modeset=1"
      ;;"modprobe.blacklist=nouveau"
      )
    ;; removed "modprobe.blacklist=snd_hda_intel,snd_soc_skl"
    #:firmware (list nongnu:linux-firmware
                     nongnu:sof-firmware
                     intel-vaapi-driver)
    #:initrd nongnu-sys:microcode-initrd
    #:kernel-loadable-modules (list v4l2loopback-linux-module
                                    ;;nvidia-module ;; NVIDIA FORUM
                                    ))
   (feature-file-systems
    #:mapped-devices ixy-mapped-devices
    #:file-systems ixy-file-systems)
   ;;(feature-hidpi)
   (feature-networking)))

(pretty-print "post-%ixy-features")
#+end_src

****** config
:PROPERTIES:
:ID:       797b1544-85d0-4a89-b0fe-be6ba45ab847
:CREATED:  [2022-07-29 Fri 17:53]
:UPDATED:  [2022-08-01 Mon 13:47]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme

;;; rde-config and helpers for generating home-environment and
;;; operating-system records.

(define-public ixy-config
  (rde-config
   (features
    (append
     %user-features
     %main-features
     %ixy-features
     ))))
#+end_src

****** debug: config args (features)
:PROPERTIES:
:ID:       49cef365-d12e-41eb-9e29-b04123e4db0a
:CREATED:  [2022-07-29 Fri 18:04]
:UPDATED:  [2022-07-29 Fri 18:20]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
;; (map pretty-print
;;      (append %user-features
;;              %main-features
;;              %ixy-features))
#+end_src

****** os
:PROPERTIES:
:ID:       9fa5b517-515a-4ce0-8b08-3717080553da
:CREATED:  [2022-07-29 Fri 18:19]
:UPDATED:  [2023-09-24 Sun 16:00]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(define-public ixy-os
  (rde-config-operating-system ixy-config))
#+end_src

******* COMMENT debug: os
:PROPERTIES:
:ID:       24fc8fe1-79e9-45c9-a8b8-8e89db1161c5
:CREATED:  [2022-07-29 Fri 18:19]
:UPDATED:  [2022-07-29 Fri 18:19]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(pretty-print "post-ixy-os")
#+end_src

****** home-environment
:PROPERTIES:
:ID:       a8b0c3bc-c2f6-4460-8a67-9519d36f204c
:CREATED:  [2022-07-29 Fri 18:19]
:UPDATED:  [2022-07-29 Fri 18:19]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(define ixy-he
  (rde-config-home-environment ixy-config))
#+end_src

******* COMMENT debug: post-ixy-he
:PROPERTIES:
:ID:       58a97450-1bec-4243-b9b0-938862431fbf
:CREATED:  [2022-07-29 Fri 18:19]
:UPDATED:  [2022-07-29 Fri 18:19]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(pretty-print "post-ixy-he")
#+end_src

***** TODO live                                                           :host:live:
:PROPERTIES:
:ID:       f0223612-a7d9-4a9e-a6c9-993ac3cadcb2
:CREATED:  [2022-07-29 Fri 18:19]
:UPDATED:  [2022-07-29 Fri 18:19]
:ROAM_EXCLUDE: t
:END:

****** filesystem
:PROPERTIES:
:ID:       fca68375-9c08-4e3d-96e0-7856e9d13268
:CREATED:  [2022-07-29 Fri 18:19]
:UPDATED:  [2022-07-29 Fri 18:19]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(use-modules (gnu system file-systems))

(define live-file-systems
  (list (file-system
          (mount-point "/")
          (device (file-system-label "Guix_image"))
          (type "ext4"))

        ;; Make /tmp a tmpfs instead of keeping the overlayfs.  This
        ;; originally was used for unionfs because FUSE creates
        ;; '.fuse_hiddenXYZ' files for each open file, and this confuses
        ;; Guix's test suite, for instance (see
        ;; <http://bugs.gnu.org/23056>).  We keep this for overlayfs to be
        ;; on the safe side.
        (file-system
          (mount-point "/tmp")
          (device "none")
          (type "tmpfs")
          (check? #f))

        ;; XXX: This should be %BASE-FILE-SYSTEMS but we don't need
        ;; elogind's cgroup file systems.
        ;; (list %pseudo-terminal-file-system
        ;;       %shared-memory-file-system
        ;;       %efivars-file-system
        ;;       %immutable-store)
        ))
#+end_src

****** config
:PROPERTIES:
:ID:       6f2c9531-48c8-4bed-b843-e271888e207c
:CREATED:  [2022-07-29 Fri 18:19]
:UPDATED:  [2022-07-29 Fri 18:19]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(use-modules (gnu services))
(define-public live-config
  (rde-config
   (features
    (append
     %user-features
     %main-features
     (list
      (feature-host-info
       #:host-name "gnu"
       #:timezone  "Europe/Moscow")

      (feature-file-systems
       #:file-systems live-file-systems)
      (feature-hidpi)
      (feature-custom-services
       #:feature-name-prefix 'live
       #:system-services
       (list
        (simple-service
         'channels-and-sources
         etc-service-type
         `(("channels.scm" ,(local-file "live-channels"))
           ("guix-sources" ,(local-file "/home/bob/work/gnu/guix"
                                        #:recursive? #t))
           ("rde-sources" ,(local-file "/home/bob/work/abcdw/rde"
                                       #:recursive? #t))))
        ;; (service
        ;;  guix-home-service-type
        ;;  `(("bob" . ,ixy-he)))
        (service
         gc-root-service-type
         (list ixy-he))
        )))))))
#+end_src

****** os
:PROPERTIES:
:ID:       2c7c2f23-a1bd-4db4-8218-72035ff32495
:CREATED:  [2022-07-29 Fri 18:19]
:UPDATED:  [2022-07-29 Fri 18:19]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(define-public live-os
  (rde-config-operating-system live-config))
#+end_src

****** COMMENT debug: post live
:PROPERTIES:
:ID:       735d9883-dafd-4b64-bca8-ba5559995532
:CREATED:  [2022-07-29 Fri 18:19]
:UPDATED:  [2022-07-29 Fri 18:19]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(pretty-print "post-live-config")
#+end_src

***** TODO boggartonius
:PROPERTIES:
:CREATED:  [2023-09-24 Sun 16:02]
:UPDATED:  [2023-09-24 Sun 16:02]
:ID:       9e5ab3b1-c3d8-427f-a6c6-7872a15f928b
:ROAM_EXCLUDE: t
:END:

*** dispatcher
:PROPERTIES:
:ID:       a607e231-867a-4f99-b24d-afc9324611e2
:CREATED:  [2022-07-29 Fri 18:19]
:UPDATED:  [2023-09-24 Sun 16:03]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(define (dispatcher)
  (let ((rde-target (getenv "RDE_TARGET")))
    (match rde-target
      ("ixy-home" ixy-he)
      ("ixy-system" ixy-os)
      ("bogg-home" bogg-he)
      ("bogg-system" bogg-os)
      ("live-system" live-os)
      (_ ixy-he))))
#+end_src

**** COMMENT debug
:PROPERTIES:
:CREATED:  [2023-09-24 Sun 16:02]
:UPDATED:  [2023-09-24 Sun 16:02]
:ID:       ea0ed25c-c4d7-4c0d-ac5f-a830dbbb1c9d
:ROAM_EXCLUDE: t
:END:

***** COMMENT debug: total, whole config
:PROPERTIES:
:ID:       0ec86b5a-f300-4373-bb1e-ccd6c7327776
:CREATED:  [2022-07-29 Fri 18:19]
:UPDATED:  [2022-08-29 Mon 16:47]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
;; (pretty-print-rde-config ixy-config)
;; (use-modules (gnu services)
;;           (gnu services base))
;; (display
;;  (filter (lambda (x)
;;         (eq? (service-kind x) console-font-service-type))
;;       (rde-config-system-services ixy-config)))

;; (use-modules (rde features))
;; ((@ (ice-9 pretty-print) pretty-print)
;;  (map feature-name (rde-config-features ixy-config)))
#+end_src

***** COMMENT debug: pre dispatch
:PROPERTIES:
:ID:       3ec71f5a-394c-42e9-8f7e-cd40908fe5bd
:CREATED:  [2022-07-29 Fri 18:19]
:UPDATED:  [2022-07-29 Fri 18:19]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(pretty-print "pre-dispatch")
#+end_src

**** dispatch
:PROPERTIES:
:ID:       305b2df4-7b0c-4dc5-9c40-3f50e5d289f8
:CREATED:  [2022-07-29 Fri 18:19]
:UPDATED:  [2022-07-29 Fri 18:19]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(dispatcher)
#+end_src

*** channels
:PROPERTIES:
:ID:       4ef23979-355a-4858-841a-3551e4af3eb2
:CREATED:  [2022-08-29 Mon 16:40]
:UPDATED:  [2022-09-29 Thu 12:19]
:ROAM_EXCLUDE: t
:END:

**** channels.scm
:PROPERTIES:
:ID:       21ce54e0-18e0-460f-82c7-2b43e243ad45
:CREATED:  [2022-08-29 Mon 16:40]
:UPDATED:  [2023-08-31 Thu 10:21]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :tangle ../rde/channels.scm :noweb-ref 2chan
;; -*- mode: scheme -*-
(use-modules (guix ci)
             (guix channels))

(list
 %default-guix-channel

 (channel
  (name 'rde)
  (url "https://git.sr.ht/~abcdw/rde")
  (introduction
   (make-channel-introduction
    "257cebd587b66e4d865b3537a9a88cccd7107c95"
    (openpgp-fingerprint
     "2841 9AC6 5038 7440 C7E9  2FFA 2208 D209 58C1 DEB0"))))

 (channel
  (name 'nonguix)
  (url "https://gitlab.com/nonguix/nonguix")
  (introduction
   (make-channel-introduction
    "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
    (openpgp-fingerprint
     "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5"))))

 ;;; for hyprland
 ;; (channel
 ;; (name 'rosenthal)
 ;; (url "https://codeberg.org/hako/rosenthal.git")
 ;; (branch "trunk")
 ;; (introduction
 ;;  (make-channel-introduction
 ;;   "7677db76330121a901604dfbad19077893865f35"
 ;;   (openpgp-fingerprint
 ;;    "13E7 6CD6 E649 C28C 3385  4DF5 5E5A A665 6149 17F7"))))

 ;;; build of /gnu/store/59vmvlzgmksqryyvr45kp43v3wmz36qd-guix-package-cache.drv failed
 ;; (channel
 ;;  (name 'guix-binary)
 ;;  (url "https://git.sr.ht/~declantsien/guix-channel")
 ;;  (introduction
 ;;   (make-channel-introduction
 ;;    "0c171cf43849f86516e1ee23aec34e586654a3a7"
 ;;    (openpgp-fingerprint
 ;;     "F695 F39E C625 E081 33B5  759F 0FC6 8703 75EF E2F5"))))
 )
#+end_src

**** channels-local.scm                                                    :untangle:
:PROPERTIES:
:ID:       334b6dee-e142-4020-9417-23b3ff933cb9
:CREATED:  [2023-07-12 Wed 19:20]
:UPDATED:  [2023-08-31 Thu 09:57]
:ROAM_EXCLUDE: t
:END:

- :: https://guix.gnu.org/manual/en/html_node/Specifying-Channel-Authorizations.html

#+begin_src scheme :tangle ../rde/channels-local.scm :noweb-ref 2chan
;; -*- mode: scheme -*-
(use-modules (guix ci)
             (guix channels))

(list
 %default-guix-channel
 (channel
  (name 'rde)
  (url "/home/samuel/git/sys/rde")
  (introduction
   (make-channel-introduction
    "257cebd587b66e4d865b3537a9a88cccd7107c95"
    (openpgp-fingerprint
     "2841 9AC6 5038 7440 C7E9  2FFA 2208 D209 58C1 DEB0"))))
 (channel
  (name 'nonguix)
  (url "/home/samuel/git/sys/nonguix")
  (introduction
   (make-channel-introduction
    "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
    (openpgp-fingerprint
     "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5"))))
 ;; (channel
 ;;  (name 'guix-binary)
 ;;  (url "/home/samuel/git/sys/guix-binary")
 ;;  (introduction
 ;;   (make-channel-introduction
 ;;    "0c171cf43849f86516e1ee23aec34e586654a3a7"
 ;;    (openpgp-fingerprint
 ;;     "F695 F39E C625 E081 33B5  759F 0FC6 8703 75EF E2F5"))))
 )
#+end_src

**** etc
:PROPERTIES:
:CREATED:  [2023-10-03 Tue 15:33]
:UPDATED:  [2023-10-03 Tue 15:33]
:ID:       82f6ca07-9bc3-49b7-921b-2443cab6785e
:ROAM_EXCLUDE: t
:END:

***** science
:PROPERTIES:
:CREATED:  [2023-10-03 Tue 15:33]
:UPDATED:  [2023-10-03 Tue 15:33]
:ID:       6a85f6fa-3b22-4b7c-bcf8-5ad32fec57a3
:ROAM_EXCLUDE: t
:END:

****** channels.scm
:PROPERTIES:
:CREATED:  [2023-10-03 Tue 15:33]
:UPDATED:  [2024-01-15 Mon 12:54]
:ID:       0aeb9956-8468-4439-9a99-78b2764f3608
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :tangle ~/.config/guix/science/channels.scm :noweb-ref null
;; -*- mode: scheme -*-
(use-modules (guix ci)
             (guix channels))

(list
 %default-guix-channel
 (channel
  (name 'guix-science)
  (url "https://github.com/guix-science/guix-science.git")
  (introduction
   (make-channel-introduction
    "b1fe5aaff3ab48e798a4cce02f0212bc91f423dc"
    (openpgp-fingerprint
     "CA4F 8CF4 37D7 478F DA05  5FD4 4213 7701 1A37 8446")))))
#+end_src

** emacs
:PROPERTIES:
:ID:       0b25418b-3898-42da-81f2-cfc93aa51017
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-04-25 Tue 19:48]
:END:

*** AAA tangle emacs
:PROPERTIES:
:ID:       4527ed19-6609-47bd-8892-a00c4cba575c
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-28 Wed 16:37]
:END:
**** ensure headings are sorted alphabetically                                 :demo:
:PROPERTIES:
:ID:       0b7994f5-f5b8-4f02-b54d-995f7119a67a
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-29 Thu 12:17]
:END:

#+begin_src emacs-lisp :tangle no :noweb-ref null
(dotimes (_ 2) (org-up-heading-or-point-min))

(org-map-entries
 (lambda ()
   (when (org-get-heading)
     (org-sort-entries t ?a))))
#+end_src

**** noweb tangler ; root                                                      :meta:
:PROPERTIES:
:ID:       1b524325-ce8c-4d9a-8496-69a393a036e1
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2024-02-20 Tue 16:08]
:END:

- see :: ~/.config/emacs/init.el
- see also :: ~/.config/emacs/early-init.el
#+begin_src scheme :tangle emacs.scm :noweb-ref base-emacs
(define-module (emacs)
  #:use-module (rde serializers elisp)
  #:export (init-el))

(define init-el
  (elisp-serialize
   '(

     ;; NOWEB GENERAL START
     <<general>>
     ;; NOWEB GENERAL END

     ;; NOWEB CONF START
     <<conf-emacs>>
     ;; NOWEB CONF END (three parens and  terminate the file)
     )))

#+end_src

#+RESULTS:

*** bindings                                                                    :kbd:
:PROPERTIES:
:ID:       a0f75539-b0cc-4906-acb1-705744822bfe
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-30 Fri 14:11]
:END:


**** {C-c C-j}         :: imenu overrides
:PROPERTIES:
:ID:       1c984cd6-ef53-4c6d-a8c5-03cd3f475859
:CREATED:  [2022-10-13 Thu 10:27]
:UPDATED:  [2022-10-13 Thu 10:27]
:ROAM_EXCLUDE: t
:END:
***** {C-c C-j} consult-org-heading (replaces org-got))
:PROPERTIES:
:ID:       4ab6afa3-817d-4039-82e0-27340483d081
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

imenu's leaf-nodes-only display is wack and cba to find out why right
now.

If I could add something to this package, it would be to normalize the
padding of each headline level with a prefix arg supplied.

#+begin_src emacs-lisp :noweb-ref org
(define-key org-mode-map (kbd "C-c C-j") 'consult-org-heading)
#+end_src

#+RESULTS:
: consult-org-heading

****** consult-org--headings                                                   :demo:
:PROPERTIES:
:ID:       29f3b8ca-60ce-42fa-9d5a-fb18752e0ac6
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :results drawer :tangle no :noweb-ref null
(require 'consult)
(require 's)

(pp (let ((h (s-join "/" (org-get-outline-path nil nil))))
      (car (seq-filter (lambda (s)
                         (message "%s BONK %s" h s)
                         (s-contains? h s))
                       (consult-org--headings nil nil nil)))))
#+end_src

#+RESULTS:
:results:
#("bindings/{C-c C-j} +org-goto+ -> consult-org-heading􀜋" 0 1
(face org-level-1 consult-org--heading
(#<marker at 1803 in emacs.org> 2 nil nil))
1 8
(face org-level-1)
9 52
(face org-level-2)
52 53
(consult-strip t invisible t))
:end:

******* assoc                                                                  :demo:
:PROPERTIES:
:ID:       5827c69b-012f-4394-8973-139c454bd947
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :results drawer :tangle no :noweb-ref null
(pp (assoc (s-join "/" (org-get-outline-path t nil))
           (consult-org--headings nil nil nil)))
#+end_src

#+RESULTS:
:results:
nil
:end:

#+RESULTS:
: bindings/{C-c C-j} +org-goto+ -> consult-org-heading/outline path ; to assoc

******** org-babel-indent-block ; indent babel
:PROPERTIES:
:ID:       a2e3f5db-5cc5-4531-9c9d-470183f5e8aa
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-06-19 Mon 18:08]
:END:

#+begin_src emacs-lisp :noweb-ref org
(defvar qz/org-babel-indent-exclude-lang
  '("yaml")
  "org-babel languages to exclude from auto indent/format.")

;;(setq qz/org-babel-indent-exclude-lang nil)
;;(setq qz/debug t)


;; TODO bug with 'org-open-at-mouse :: { M-x toggle-debug-on-error } :: [2023-07-04 Tue]
(defun qz/org-babel-indent-block-hook (beg end &rest args)
  (interactive "r")
  (qz/debug- (message "qz/org-babel-indent-block: BEG %s END %s ARGS %s" beg end args))
  (qz/dwim-indent))

(define-key org-mode-map
            (kbd "C-c C-v C-\\") 'qz/dwim-indent)
(define-key global-map ;; this one is burned in hard
            (kbd "C-M-|") 'qz/dwim-indent)

;; NOTE: blocks default
;;(add-to-list 'org-ctrl-c-ctrl-c-hook 'qz/org-babel-indent-block)
;;(setq org-ctrl-c-ctrl-c-hook nil)
;;
;; NOTE: not the right eval/exec fn for `{C-c C-c}'
;;(advice-add 'org-babel-eval :before 'qz/org-babel-indent-block)
;;(advice-remove 'org-babel-eval 'qz/org-babel-indent-block)
;;
;; conclusion: use `advice' so as not to block standard org-mode
;; `{C-c C-c}' behaviour like with `org-ctrl-c-ctrl-c-hook'

(qz/advice- org-babel-execute-src-block :before qz/org-babel-indent-block-hook)
#+end_src

#+RESULTS:
| qz/advice-enable--org-babel-execute-src-block--qz/org-babel-indent-block-hook | qz/advice-disable--org-babel-execute-src-block--qz/org-babel-indent-block-hook |

******** org-babel-refresh-graphics
:PROPERTIES:
:ID:       4d9573c9-c758-40a1-9af3-8d61f65e97bd
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-04 Mon 13:09]
:END:
#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-refresh-inline-images (&rest args)
  (org-toggle-inline-images t)
  (org-toggle-inline-images t))

(qz/advice- org-babel-execute-src-block :after qz/org-refresh-inline-images)
#+end_src

#+RESULTS:
| qz/advice-enable--org-babel-execute-src-block--qz/org-refresh-inline-images | qz/advice-disable--org-babel-execute-src-block--qz/org-refresh-inline-images |

******** re-sorting to emulate initial position                                :demo:
:PROPERTIES:
:ID:       c26dda0d-fbd1-4c47-8763-6852e710aacc
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  <2022-02-27 Sun 15:07>
:END:
#+begin_src emacs-lisp :tangle no :noweb-ref null
(let* ((c 0)
       (cands (consult--with-increased-gc (consult-org--headings nil nil nil)))
       (olp (s-join "/" (org-get-outline-path t nil)))
       (current-cand (seq-find (lambda (s)
                                 (setq c (+ 1 c))
                                 (and qz/debug (message "%s BONK %s" olp s))
                                 (s-contains? olp s))
                               (consult-org--headings nil nil nil))))

  (message "%s" (list current-cand c (length cands)))

  (append
   (cl-subseq cands (- 1 c) (length cands))
   (cl-subseq cands 0 (- c 2)))

  ;;  (nth (- 1 c) cands)
  ;; (message
  ;;  "%S"
  ;;  (mapc 'org-no-properties
  ;;        (list
  ;;         (nth (- c 1) cands)
  ;;         (nth c cands)
  ;;         (nth (+ 1 c) cands))))
  )
#+end_src

#+RESULTS:
: ("bindings/{C-c C-j} +org-goto+ -> consult-org-heading/consult-org--headings/assoc/re-sorting to emulate initial position􁂽" "bindings/{C-c C-j} +org-goto+ -> consult-org-heading/consult-org-heading ; redef􁖬" "system commands􁹖")
"bindings/{C-c C-j} +org-goto+ -> consult-org-heading/consult-org--headings/assoc/re-sorting to emulate initial position􁂽"
"bindings/{C-c C-j} +org-goto+ -> consult-org-heading/consult-org-heading ; redef􁒉"
"system commands􁴲")

****** consult-org-heading ; redef                                             :demo:
:PROPERTIES:
:ID:       4c4443b8-861c-4002-9e71-495dad5df214
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  <2022-02-27 Sun 15:06>
:END:

hmm. although some proxy for 'initial position' - it doesn't actually
work so nicely.

#+begin_src emacs-lisp :tangle no :noweb-ref null
(defun consult-org-heading (&optional match scope)
  "Jump to an Org heading.

MATCH and SCOPE are as in `org-map-entries' and determine which
entries are offered.  By default, all entries of the current
buffer are offered."
  (interactive (unless (derived-mode-p 'org-mode)
                 (user-error "Must be called from an Org buffer")))
  (let* ((c 0)
         (prefix (not (memq scope '(nil tree region region-start-level file))))
         (cands (consult--with-increased-gc (consult-org--headings prefix match scope)))
         (olp (s-join "/" (org-get-outline-path t nil)))
         (current-cand (seq-find (lambda (s)
                                   (setq c (+ 1 c))
                                   (and qz/debug (message "%s BONK %s" olp s))
                                   (s-contains? olp s))
                                 (consult-org--headings nil nil nil))))
    (message "%s" c)
    (setq consult-initial-position (- c 1))
    (consult--read
     (if (and nil current-cand)
         (append
          (cl-subseq cands (- c 1) (length cands))
          (cl-subseq cands 0 (- c 2)))
       cands)

     :prompt "Go to heading: "
     ;; `default' will just make some nonsense value which doesn't respect the setup (ordering, selection)
     ;;   instead what we're going for is to
     ;;     - make the cand list, sort
     ;;     - jump to `default-candidate', retaining sort
     ;;       - note that a 'jump' can be some numerical index of cands, therefore an intial-position key
     ;;       - where relevance of candidate is given by some function of candidates
     ;;     - a resort can emulate 'initial-position'
     ;; `initial' will filter all other cands, which makes it totally unsuitable


     :category 'consult-org-heading
     :sort nil
     :require-match t
     :history '(:input consult-org--history)
     :narrow (consult-org--narrow)
     :state (consult--jump-state)
     :group
     (when prefix
       (lambda (cand transform)
         (let ((name (buffer-name
                      (marker-buffer
                       (car (get-text-property 0 'consult-org--heading cand))))))
           (if transform (substring cand (+ 1 (length name))) name))))
     :lookup
     (lambda (_ candidates cand)
       (when-let (found (member cand candidates))
         (car (get-text-property 0 'consult-org--heading (car found))))))))

(defun qz/vertico-set-initial-position()
  (when consult-initial-position
    (vertico-next consult-initial-position)))

(setq vertico-mode-hook nil)

                                        ;(add-hook 'vertico-mode-hook 'qz/vertico-set-initial-position)
#+end_src

#+RESULTS:
| qz/vertico-set-initial-position |
***** {C-c C-j} consult-imenu (global)
:PROPERTIES:
:ID:       fa04c049-503f-4f43-ada2-9d2101473db6
:CREATED:  [2022-10-13 Thu 10:27]
:UPDATED:  [2022-10-13 Thu 10:27]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref null
(with-eval-after-load 'consult
  (define-key global-map (kbd "C-c C-j") 'consult-imenu)
  (define-key python-mode-map (kbd "C-c C-j") 'consult-imenu)

  )
#+end_src

**** {C-c C-M-i}       :: org-fold
:PROPERTIES:
:ID:       9a8fc009-7e01-46ab-a467-4d639723a060
:CREATED:  <2022-02-28 Mon 09:42>
:UPDATED:  [2023-07-04 Tue 16:20]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
;; current subtree
;; given some tree

"
a
aa
 aa
  ab
ab
ac
aca
 cb
  ba
 cd
ad
"
(define-key org-mode-map (kbd "C-c C-M-i") 'qz/org-fold)
#+end_src

#+RESULTS:
: qz/org-fold

**** {C-c C-x C-j}     :: (global) org-goto
:PROPERTIES:
:ID:       3a0acecd-46ff-4132-b009-5bb4964eb288
:CREATED:  [2022-10-21 Fri 12:02]
:UPDATED:  [2022-10-21 Fri 12:02]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref kbd
(define-key global-map (kbd "C-c C-x C-j") 'org-clock-goto)
#+end_src

**** {C-c !}           :: (global) org-time-stamp-inactive
:PROPERTIES:
:ID:       2af330e9-98b1-4192-acd2-6b80b39cca0f
:CREATED:  [2022-10-21 Fri 12:00]
:UPDATED:  [2022-10-21 Fri 12:00]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref kbd
(define-key global-map (kbd "C-c !") 'org-time-stamp-inactive)
#+end_src

**** {C-s-j}           :: (global) org-roam-dailies-goto-today
:PROPERTIES:
:ID:       bfe5a74c-176e-42e8-9843-4cd8095c4b27
:CREATED:  [2023-04-25 Tue 19:56]
:UPDATED:  [2023-04-25 Tue 19:56]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref kbd
(define-key global-map (kbd "C-s-j") 'org-roam-dailies-goto-today)
#+end_src

#+RESULTS:
: org-roam-dailies-goto-today

**** {C-M-j}           :: delete-indentation
:PROPERTIES:
:ID:       ce4366f0-6d05-4e8b-b0f8-93dc87e8bf5b
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
maximum [[id:6eb04531-fbcc-45da-86e9-499b48caeb8a][ergonomics]]

#+begin_src emacs-lisp  :noweb-ref kbd
(define-key global-map (kbd "C-M-j") 'delete-indentation)
#+end_src

**** {C-M-y}           :: consult-yank
:PROPERTIES:
:ID:       bad4e8e6-d723-4422-8053-9ed48d6196b1
:CREATED:  [2022-04-08 Fri 10:29]
:UPDATED:  [2022-04-08 Fri 10:33]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref kbd
(define-key global-map (kbd "C-M-y") 'consult-yank-from-kill-ring)
#+end_src

**** {C-x C-M-f}       :: consult-recent-file
:PROPERTIES:
:ID:       b3499da4-4d04-4186-9183-f205befcc5b4
:CREATED:  <2022-02-24 Thu 16:13>
:ROAM_EXCLUDE: t
:UPDATED:  <2022-02-28 Mon 09:43>
:END:

#+begin_src emacs-lisp :noweb-ref kbd
(define-key global-map (kbd "C-x C-M-f") 'consult-recent-file)
#+end_src

**** {C-x} <-> {C-u}   :: translation
:PROPERTIES:
:ID:       c8b38800-ee6c-499e-adba-359d0bd1afe5
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-04-12 Wed 17:34]
:END:

This is so core and unchanging that I put it in the RDE emacs config
elisp, so even if my user config is fucked, I am not a helpless deer
getting C-u and C-x mixed up; see [[id:d2fc9152-8683-46c1-9ef2-4ca84510bb49][(rde . config) emacs]]

**** {C-s-k}           :: kill-buffer
:PROPERTIES:
:ID:       8a2d78b3-5926-4d90-acdd-2f0d0fc01d8c
:CREATED:  [2023-04-12 Wed 17:34]
:UPDATED:  [2023-09-29 Fri 18:51]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(define-key global-map (kbd "C-s-k") 'kill-this-buffer)
#+end_src

#+RESULTS:
: kill-this-buffer

**** {C-M-s-k}         :: kill-buffer-and-window
:PROPERTIES:
:CREATED:  [2023-09-29 Fri 18:51]
:ID:       6c4d41d1-6b79-4181-8d19-b6f63ae83b97
:ROAM_EXCLUDE: t
:UPDATED:  [2023-09-29 Fri 18:52]
:END:

#+begin_src emacs-lisp
(define-key global-map (kbd "C-M-s-k") 'kill-buffer-and-window)
#+end_src

#+RESULTS:
: kill-buffer-and-window

**** {C-z}             :: newline-above
:PROPERTIES:
:ID:       e24287bd-30ba-448b-8fec-202fc913c71d
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp  :noweb-ref kbd
;;(custom-set-variables
;; '(org-disputed-keys '([(shift o)] . [(meta shift o)])))

(defun qz/newline-above ()
  (interactive)
  (save-excursion
    (beginning-of-line)
    (newline))
  (indent-according-to-mode))

(define-key global-map (kbd "C-z") 'qz/newline-above)
;;(define-key global-map (kbd "C-o") 'open-line)
;;
;;(org-remap org-mode-map
;;           'open-line 'org-open-line)

#+end_src

#+RESULTS:
: qz/newline-above

**** {H-M-s-h}jkl      :: windmove swap
:PROPERTIES:
:ID:       e12feea7-bf2a-44b8-acfe-95e2af12357e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-07-09 Sat 17:26]
:END:

I don't use this very much, as it curls my whole left hand up (qwerty troubles)

#+begin_src emacs-lisp  :noweb-ref kbd
(define-key global-map (kbd "M-s-h") 'windmove-swap-states-left)
(define-key global-map (kbd "M-s-j") 'windmove-swap-states-down)
(define-key global-map (kbd "M-s-k") 'windmove-swap-states-up)
(define-key global-map (kbd "M-s-l") 'windmove-swap-states-right)
(define-key global-map (kbd "H-M-s-h") 'windmove-swap-states-left)
(define-key global-map (kbd "H-M-s-j") 'windmove-swap-states-down)
(define-key global-map (kbd "H-M-s-k") 'windmove-swap-states-up)
(define-key global-map (kbd "H-M-s-l") 'windmove-swap-states-right)
#+end_src

#+RESULTS:
: windmove-swap-states-right

**** {H-s-h}jkl        :: windmove
:PROPERTIES:
:ID:       e3015f6e-f7ca-4e31-aa05-290a438862da
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-01-12 Thu 20:34]
:END:

#+begin_src emacs-lisp  :noweb-ref kbd
(define-key global-map (kbd "H-s-h") 'windmove-left)
(define-key global-map (kbd "s-h")   'windmove-left)
(define-key global-map (kbd "H-s-j") 'windmove-down)
(define-key global-map (kbd "s-j")   'windmove-down)
(define-key global-map (kbd "H-s-k") 'windmove-up)
(define-key global-map (kbd "s-k")   'windmove-up)
(define-key global-map (kbd "H-s-l") 'windmove-right)
(define-key global-map (kbd "s-l")   'windmove-right)
#+end_src

#+RESULTS:
: windmove-right

**** isearch ... {C-o} :: pop occur from isearch
:PROPERTIES:
:ID:       7a81203e-e7c0-474a-941b-b6c8a2e51a8d
:CREATED:  <2022-02-25 Fri 10:11>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-10-21 Fri 12:05]
:END:

***** isearch-local occur
:PROPERTIES:
:ID:       75441f13-8830-42fe-b3fe-b22b2dbf4275
:CREATED:  <2022-02-25 Fri 10:11>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-07-09 Sat 17:57]
:END:

#+begin_src emacs-lisp :noweb-ref kbd
;; Activate occur easily inside isearch

(define-key isearch-mode-map (kbd "C-o")
            (lambda () (interactive)
              (let ((case-fold-search isearch-case-fold-search))
                (occur (if isearch-regexp
                           isearch-string
                         (regexp-quote isearch-string))))))
#+end_src

#+RESULTS:
| lambda | nil | (interactive) | (let ((case-fold-search isearch-case-fold-search)) (occur (if isearch-regexp isearch-string (regexp-quote isearch-string)))) |

***** TODO isearch-local consult-line
:PROPERTIES:
:ID:       7d110b1d-33d4-4d00-9bd2-fcb11356a57c
:CREATED:  <2022-02-25 Fri 10:19>
:ROAM_EXCLUDE: t
:END:

hmm, doesn't allow further input

#+begin_src emacs-lisp :noweb-ref kbd
(define-key isearch-mode-map (kbd "M-o")
            (lambda () (interactive)
              (let ((case-fold-search isearch-case-fold-search))
                (consult-line (if isearch-regexp
                                  isearch-string
                                (regexp-quote isearch-string))))))
#+end_src

#+RESULTS:
: (closure (t) nil (interactive) (let ((case-fold-search isearch-case-fold-search)) (consult-line (if isearch-regexp isearch-string (regexp-quote isearch-string)))))

***** regexp as default
:PROPERTIES:
:ID:       99f00fd1-d744-4bac-b3a1-11151ce843a3
:CREATED:  <2022-02-25 Fri 10:09>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-08-31 Thu 10:31]
:END:
#+begin_src emacs-lisp :noweb-ref kbd
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)
#+end_src

#+RESULTS:
: isearch-backward

**** noweb-tangler
:PROPERTIES:
:ID:       92b9eb8a-c76c-4284-8dfe-74870f4dcab9
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-07-04 Tue 16:24]
:END:

#+begin_src emacs-lisp
;; NOWEB KBD START
<<kbd>>
;; NOWEB KBD END
#+end_src
**** {s-\}             :: org-store-link
:PROPERTIES:
:ID:       344c5143-a1c9-4a3e-9ff1-3be2d104f974
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp  :noweb-ref kbd
(define-key global-map (kbd "s-\\") 'org-store-link)
#+end_src

#+RESULTS:
: org-store-link

**** {s-TAB} | {C-s-i} :: dwim-fold
:PROPERTIES:
:ID:       0c29ea9e-6cd2-43a5-8062-a8b8f557906a
:CREATED:  [2022-10-05 Wed 15:41]
:UPDATED:  [2023-07-15 Sat 18:35]
:ROAM_EXCLUDE: t
:END:

- see also :: [[id:9a8fc009-7e01-46ab-a467-4d639723a060][{C-c C-M-i} org-global-cycle]]

yes, my WM[fn:4] uses {s-TAB} to switch workspaces, but emacs only
dispatches on /received/ inputs; it won't capture 'horizontally' from

- {s-TAB} is equivalent to {s-C-i}
  - because
    - {C-i} is equivalent to {TAB}

#+begin_src emacs-lisp
(defun qz/dwim-fold ()
  (interactive)
  (let ((fold-fn
         (cond ((qz/mode-is-or-derives 'org-mode)   'qz/org-fold)
               ((qz/mode-is-or-derives 'magit-mode) 'magit-section-cycle)
               ((qz/mode-is-or-derives 'outline-mode
                                       ;; .. i.e. elisp
                                       'lisp-data-mode
                                       ;; .. i.e. markdown
                                       'text-mode
                                       )
                'outline-cycle)
               (t (message "no dwim path configured, honey")))))
    (when (symbolp fold-fn)
      (qz/debug- (message "dn: %s" fold-fn))
      (call-interactively fold-fn))
    (recenter qz/recenter-line)))

(defvar qz/recenter-line 4)
(define-key global-map (kbd "s-TAB") 'qz/dwim-fold)
#+end_src

#+RESULTS:
: qz/dwim-fold

the next development from here would be some dwim-next, dwim-previous;
e.g. in org-mode, navigating via visible elements;

if beginner movement is
| C-n   | C-p   |
| C-M-n | C-M-p |
| M-f   | M-b   |
| C-M-f | C-M-b |

intermediate movement is
| M-a   | backward-sentence  |
| M-e   | forward-sentence   |
| C-M-e | end-of-defun       |
| C-M-a | beginning-of-defun |
| C-M-u | backward-up-list   |
| C-M-d | down-list          |

seems like lots of ways to move

***** org-fold
:PROPERTIES:
:ID:       c3de27b3-951b-4650-a940-bc4021e94663
:CREATED:  [2023-07-12 Wed 20:46]
:UPDATED:  [2023-08-24 Thu 11:47]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-fold ()
  "go to default opening mode -- see `org-startup-folded'

when prefix arg single,    fold to current level.
when prefix arg numerical, fold to given level.
when prefix arg nil,       fold to all levels."
  (interactive)
  (let ((prefix-arg
         (if current-prefix-arg
             (cond
              ((equal '(4) current-prefix-arg)
               ;; with C-u prefix: reveal all
               9999)
              ((eq 0 current-prefix-arg)
               ;; with 0 prefix; reveal sibling + 1
               (+ 1 (org-outline-level)))
              (t current-prefix-arg))
           ;; by default:  reveal sibling-level
           (org-outline-level))))
    (qz/debug- ;; HACK I don't understand prefix / current-prefix
     ;; ... is it next/ now respectively?
     (message "prefix: %s" (list current-prefix-arg prefix-arg)))

    ;;; DO THE FOLD
    (funcall-interactively 'org-content prefix-arg)

    ;;; HACK ENSURE NICE DISPLAY IF NICE DISPLAY
    ;; org-modern-mode doesn't handle "demoting" and manual link
    ;; editing, etc... all too well
    (when (and (boundp 'org-modern-mode) org-modern-mode)
      (ignore-errors
        (org-modern-mode 1)))

    ;;; HACK Indent, if active
    (when (and (boundp 'org-indent-mode) org-indent-mode)
      (org-indent-indent-buffer))
    ;; FOR SOME JAZZ, PRINT THE OUTLINE
    (org-display-outline-path 'with-self t)))
#+end_src

#+RESULTS:
: qz/org-fold

**** {C-s-u}           :: dwim-unfold
:PROPERTIES:
:ID:       ab36de5a-2dd8-430a-a94f-796f8c7b0376
:CREATED:  [2023-03-02 Thu 12:21]
:UPDATED:  [2023-07-14 Fri 17:42]
:ROAM_EXCLUDE: t
:END:

- from :: [[id:8f062390-ab92-43d8-bcfd-d2babb287c07][[16:34] trying org-cycle]]

#+begin_src emacs-lisp
(defun qz/dwim-unfold ()
  (interactive)
  (let ((fold-fn
         (cond ((qz/mode-is-or-derives 'org-mode)   'qz/org-unfold)
               ((qz/mode-is-or-derives 'magit-mode) 'magit-section-cycle-global)
               ((qz/mode-is-or-derives 'outline-mode
                                       ;; .. elisp
                                       'lisp-data-mode
                                       ;; .. markdown
                                       'text-mode)
                'outline-cycle-buffer)
               (t (message "no dwim path configured, honey")))))
    (when (symbolp fold-fn)
      (call-interactively fold-fn))))

(define-key global-map (kbd "C-s-u") 'qz/dwim-unfold)
#+end_src

#+RESULTS:
: qz/dwim-unfold

***** org-show-all
:PROPERTIES:
:ID:       e08b934b-1f18-4c94-81fb-86c98a9cd5e0
:CREATED:  [2023-07-12 Wed 20:47]
:UPDATED:  [2023-07-16 Sun 17:14]
:ROAM_EXCLUDE: t
:END:
:LOGBOOK:
CLOCK: [2023-07-15 Sat 18:20]--[2023-07-15 Sat 18:20] =>  0:00
:END:

#+begin_src emacs-lisp
(defun qz/org-show-all ()
  "
- cycle-hook, show (headings blocks)

call with prefix to really reveal ALL.

"
  (interactive)
  (cond ((not current-prefix-arg)
         (message "denoise")
         (qz/org-denoise-point))
        (t
         (run-hook-with-args 'org-pre-cycle-hook 'all)
         (org-show-all '(headings blocks))
         (setq org-cycle-global-status 'all)
         (run-hook-with-args 'org-cycle-hook 'all)
         (org-cycle-hide-drawers 'all)
         (when (and (boundp 'org-indent-mode) org-indent-mode)
           ;; FIXME this is pretty slow -- maybe save-narrow?
           ;;  (scope 'visible' indent to current subtree)
           (org-indent-indent-buffer))
         (recenter qz/recenter-line)))
  ;; FOR SOME JAZZ, PRINT THE OUTLINE
  (org-display-outline-path 'with-self t))

(defalias 'qz/org-unfold 'qz/org-show-all)
#+end_src

#+RESULTS:
: qz/org-unfold

***** org-denoise point
:PROPERTIES:
:ID:       936b5274-2c3a-4167-9a67-7f267bb86a0f
:CREATED:  [2023-07-15 Sat 14:57]
:UPDATED:  [2023-08-24 Thu 11:55]
:ROAM_EXCLUDE: t
:END:
:LOGBOOK:
CLOCK: [2023-07-15 Sat 18:20]--[2023-07-15 Sat 19:00] =>  0:40
:END:

- 'org-show-all says :: "Show all contents in the visible part of the buffer."

so,  maybe if I narrow the buffer to the subtree at point; 'qz/org-show-all;

#+begin_src emacs-lisp
(defun qz/org-denoise-point ()
  (interactive)
  (call-interactively 'qz/org-fold)
  ;;
  (save-excursion
    (org-back-to-heading)
    (org-cycle)
    (recenter qz/recenter-line))
  (org-cycle-hide-drawers 'all)
  (when (and (boundp 'org-indent-mode) org-indent-mode)
    ;; FIXME this is pretty slow -- maybe save-narrow?
    ;;  (scope 'visible' indent to current subtree)
    (org-indent-indent-buffer)))
#+end_src

#+RESULTS:
: qz/org-denoise-point

**** {s-S-TAB}         :: org-roam-insert
:PROPERTIES:
:CREATED:  [2023-10-08 Sun 17:24]
:UPDATED:  [2024-02-07 Wed 11:18]
:ID:       d23dfc37-8e39-41b8-b4ee-60cfcaa34fe7
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(define-key global-map (kbd "C-s-=") 'org-roam-node-insert)
(define-key global-map (kbd "C-s-+") 'org-roam-node-find)

(define-key global-map (kbd "C-s-f") 'org-roam-node-find)
(define-key global-map (kbd "C-s-b") 'org-roam-node-insert)
#+end_src

#+RESULTS:
: org-roam-node-insert

**** {C-M-|}           :: dwim-indent
:PROPERTIES:
:ID:       6b16863f-f6a1-4ba2-82a7-e10a12890eb0
:CREATED:  [2023-06-19 Mon 18:01]
:UPDATED:  [2024-02-17 Sat 17:10]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref kbd
(defun qz/dwim-indent ()
  "format / indent something.

org-mode: indent the block at point
prog-mode: indent the whole buffer

for the rest: remember that indent-region still exists.

good-boy mode: cleans up whitespace too

dwim by mode is important

as until now, I've been dodging
org-errors about caching from my dodgy code"
  (interactive)
  (save-mark-and-excursion
    (when (symbolp 'whitespace-cleanup)
      (whitespace-cleanup))
    (when-let ((f (cond
                   ((and (derived-mode-p 'org-mode)
                         (and (call-interactively 'org-babel-mark-block)
                              (not (seq-contains-p
                                    qz/org-babel-indent-exclude-lang
                                    (car (org-babel-get-src-block-info))))))
                    (when (equal "python" (car (org-babel-get-src-block-info)))
                      (mapc 'call-interactively '(python-black-region
                                                  py-isort-region)))
                    'indent-region)
                   ((derived-mode-p 'python-mode)
                    (python-black-buffer)
                    (py-isort-buffer))
                   ((and (derived-mode-p 'prog-mode)
                         (mark-whole-buffer))
                    'indent-region)
                   (t nil))))
      (call-interactively f))))
#+end_src

#+RESULTS:
: qz/dwim-indent

***** TODO ident-region on makefiles is a joke
:PROPERTIES:
:ID:       75beb291-3b39-49d9-906a-d4c82d04b678
:CREATED:  [2023-07-12 Wed 20:50]
:UPDATED:  [2023-07-14 Fri 17:47]
:ROAM_EXCLUDE: t
:END:

... because, their indentation =can be= heterogeneous, and there are many =makefile= modes, for =(make imake bsdmake automake gmake)=.

that is to say, there may be many 'plausible' indentations for a given line, and it's context-sensitive -- akin to how python-mode indentation is kinda bonk.

- see :: https://emacs.stackexchange.com/questions/10272/how-to-make-indent-region-keep-the-tab-in-makefile-buffer
  - link to :: https://gist.github.com/jordonbiondo/dc4482f07c48cf9ee59a

maybe this is something for lookback regexps (defining our own 'indent-line-function) treesitter to address, if a parse-tree can be formalized for MAKEFILEs.

**** {C-M-=}           :: recenter
:PROPERTIES:
:ID:       5beaed40-7273-4071-af7e-549b2b342abd
:CREATED:  [2023-07-18 Tue 15:26]
:UPDATED:  [2023-07-18 Tue 15:26]
:ROAM_EXCLUDE: t
:END:
:PROPERTIES:
:ID:       4eb1314e-4169-4af2-b957-a916ba2c4684
:CREATED:  [2023-07-18 Tue 13:02]

:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(defun qz/recenter ()
  (interactive)
  (recenter qz/recenter-line))

(define-key global-map (kbd "C-M-=") 'qz/recenter)
#+end_src

**** toggle
:PROPERTIES:
:ID:       c724ddea-fffe-4fba-a908-a6cb1b8fed3b
:CREATED:  [2022-10-04 Tue 18:12]
:UPDATED:  [2022-10-04 Tue 18:12]
:ROAM_EXCLUDE: t
:END:

***** debug
:PROPERTIES:
:ID:       18fff442-12e3-4268-a1f3-13eb23826ceb
:CREATED:  [2022-10-04 Tue 18:12]
:UPDATED:  [2022-10-04 Tue 18:12]
:ROAM_EXCLUDE: t
:END:

****** -on-error
:PROPERTIES:
:ID:       4ac601d5-4d2b-4377-a29c-1118a0f24707
:CREATED:  [2022-10-04 Tue 18:12]
:UPDATED:  [2023-06-18 Sun 16:49]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref kbd
(define-key rde-toggle-map (kbd "d")   'toggle-debug-on-error)

(define-key rde-toggle-map (kbd "h c") 'highlight-changes-mode)
(define-key rde-toggle-map (kbd "h C") 'global-highlight-changes-mode)

(define-key rde-toggle-map (kbd "h i") 'highlight-indent-guides-mode)

;; a bit sus, but maybe equivalent to toggling off hi-lock-mode
(define-key rde-toggle-map (kbd "h p") 'unhighlight-regexp)
(define-key rde-toggle-map (kbd "h P") 'global-hi-lock-mode)

;; for the incessant observers demanding more than {M-g M-g}
(define-key rde-toggle-map (kbd "l")   'linum-mode)
(define-key rde-toggle-map (kbd "L")   'global-linum-mode)
#+end_src

#+RESULTS:
: toggle-debug-on-error

*** home-grown
:PROPERTIES:
:ID:       04af18a1-8d83-4ca0-a28f-7ecc2f886959
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-28 Wed 14:31]
:END:
**** noweb tangler                                                             :meta:
:PROPERTIES:
:ID:       9756d355-cbde-4d15-b83b-4f54d31b8e05
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-06-18 Sun 16:50]
:END:

#+begin_src emacs-lisp
;; NOWEB CUSTOM START
<<custom>>
;; NOWEB CUSTOM END
#+end_src

**** org-imenu-depth                                                            :var:
:PROPERTIES:
:ID:       284a5e13-b1b2-4848-ac51-db4b94fa591b
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
- :: help:imenu-create-index-function
- :: help:org-imenu-get-tree
- :: help:imenu
- :: info:elisp#Imenu

#+begin_src emacs-lisp :noweb-ref custom
(custom-set-variables
 '(org-imenu-depth 99))
#+end_src

#+RESULTS:

(setq org-goto-interface 'outline-path-completionp)
(setq org-outline-path-complete-in-steps nil)

***** COMMENT it would be nice to have individual headings present, not just 'leaves'
:PROPERTIES:
:ID:       927d486d-50ae-4e2e-806c-ab6776485c6f
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-03-25 Fri 10:39]
:END:
#+begin_src emacs-lisp :results code
(org-imenu-get-tree)
#+end_src

#+RESULTS:

**** org-refile-to-point
:PROPERTIES:
:ID:       2cad6252-5269-460d-8c57-84f521057184
:CREATED:  [2023-04-20 Thu 15:50]
:UPDATED:  [2023-04-24 Mon 10:27]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(defvar qz/org-refile-last-prior-location nil)

(defun qz/org-refile-to-point--undo ()
  (interactive)
  (when qz/org-refile-last-prior-location
    (org-id-goto (plist-get qz/org-refile-last-prior-location :id))
    (org-refile
     nil nil
     (list nil
           (plist-get qz/org-refile-last-prior-location :file)
           nil
           (plist-get qz/org-refile-last-prior-location :pos)))))

(defun qz/org-refile-to-point (file pos)
  (interactive)
  ;;; FROM {M-x describe-function RET org-refile RET}
  ;;
  ;; RFLOC can be a refile location obtained in a different way.  It
  ;; should be a list with the following 4 elements:
  ;;
  ;; 1. Name - an identifier for the refile location, typically the
  ;; headline text
  ;; 2. File - the file the refile location is in
  ;; 3. nil - used for generating refile location candidates, not
  ;; needed when passing RFLOC
  ;; 4. Position - the position in the specified file of the
  ;; headline to refile under
  (let ((rfloc (list (org-id-get)
                     (buffer-file-name (current-buffer))
                     nil
                     (point))))
    (save-mark-and-excursion
      (with-current-buffer (find-file-noselect file)
        (goto-char pos)
        (let ((id (org-id-get))
              (heading (org-link-display-format (org-get-heading))))
          (message "qz: refiling last capture: id :: %s" id)
          (message "qz: refiling last capture: heading :: %s" heading)
          (setq qz/org-refile-last-prior-location
                (list :id id :heading heading :file file :pos pos)))
        (org-refile nil nil rfloc nil)))))

(defun qz/org-refile-last-capture-to-point ()
  (interactive)
  (qz/org-refile-to-point
   (bookmark-get-filename "org-capture-last-stored")
   (bookmark-get-position "org-capture-last-stored")))
#+end_src

**** org-search-from-heading
:PROPERTIES:
:ID:       ad53ce27-a9fc-4de7-ac73-d6bca70f38ee
:CREATED:  [2023-07-16 Sun 21:40]
:UPDATED:  [2023-07-16 Sun 21:40]
:ROAM_EXCLUDE: t
:END:
:PROPERTIES:
:ID:       4fc99651-c62d-4e26-bf7b-f6fec0a2df66
:
:END:

#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-search-from-heading ()
  (interactive)
  (let* ((cleaned-heading (->> (org-get-heading)
                               (replace-regexp-in-string "\\[.*\\] " "")))
         (searchified (->> cleaned-heading
                           url-encode-url
                           (concat "https://html.duckduckgo.com/html/?q="))))
    (call-interactively 'org-insert-subheading-respect-content)
    (insert (org-make-link-string
             searchified
             (concat "!ddg :: " cleaned-heading)))
    (ignore-errors
      (org-web-tools-read-url-as-org (org-web-tools--read-url)))
    ;;; FIXME ddg sometimes has a super long guy which doesn't properly fontify
    ;; (save-excursion
    ;;   (org-next-visible-heading 3)
    ;;   (org-beginning-of-line)
    ;;   (let ((kill-ring nil))
    ;;     (org-kill-line)))
    ;;; goto first result
    ;;; get summary last (link description) as 4th-level
    (goto-char (point-min))
    (org-next-visible-heading 1)
    (save-excursion
      (org-map-entries
       (lambda ()
         (unless (> (org-outline-level) 4)
           (qz/debug-
            (message "%s" (org-link-display-format
                           (org-no-properties (org-get-heading)))))
           (org-narrow-to-subtree)
           (end-of-buffer)
           (let ((kill-ring nil))
             (call-interactively 'org-previous-link)
             (embark-org-copy-link-description)
             (end-of-buffer)
             (call-interactively
              'org-insert-subheading-respect-content)
             (insert (concat (car kill-ring))))
           (widen)))))
    (goto-char (point-min))
    (let ((current-prefix-arg 4))
      (qz/org-fold))
    (org-next-visible-heading 2)
    ;;; NOTE ddg results
    ))

(define-key org-mode-map (kbd "C-s-0") 'qz/org-search-from-heading)
#+end_src

***** TODO COMMENT ddg links are super borked.  tracking is baked in too
:PROPERTIES:
:ID:       453f4d16-d6a3-48a1-818c-89b80aa9a292
:CREATED:  [2023-07-16 Sun 21:40]
:UPDATED:  [2023-07-16 Sun 21:52]
:ROAM_EXCLUDE: t
:END:

**** TODO sway-choose-window :: {M-S-TAB}                                       :kbd:
:PROPERTIES:
:ID:       dbde67fe-7f9d-4941-ab3f-5c941cbba256
:CREATED:  [2023-07-16 Sun 21:51]
:UPDATED:  [2023-07-18 Tue 00:08]
:ROAM_EXCLUDE: t
:END:

- see :: [[id:f660eff2-5abc-40e6-8bf9-0913ad3e1dd4][[17:26:25] swaywm windows]]

#+begin_src emacs-lisp
(defun qz/sway-choose-window ()
  (interactive)
  (let* ((cmd "swaymsg -t get_tree | jq -r '
.nodes | map(.
| .current_workspace as $ws
| .nodes
 | map(.
  | .nodes | map(.
   | \"\\(.id)::\\($ws)::\\(.app_id):\\(.name)\"
   ))) | add | add' | sed -e 's/\\[//g' -e 's/\\]//g' -e 's/,//g' -e 's/\"//g'")
         (cmd-res (shell-command-to-string cmd))
         (windows (s-split "\n" cmd-res))
         ;; cleanup 'windows,
         ;; - remove trailing/leading ws,
         ;; - remove empty strings
         (windows (remove "" (mapcar 's-trim windows)))
         (window-choice (completing-read "choose a window: " windows))
         ;; e.g "173::1::emacs:<2023-04-04>"
         (con-id (car (s-split "::" window-choice)))
         (focus-cmd (format "swaymsg '[con_id=%s] focus'" con-id)))
    (message "stuff %s" (list windows con-id focus-cmd))
    (list focus-cmd window-choice (shell-command-to-string focus-cmd))))

(define-key global-map (kbd "M-<iso-lefttab>") 'qz/sway-choose-window)
(define-key global-map (kbd "s-x") 'qz/sway-choose-window)
#+end_src

#+RESULTS:
: qz/sway-choose-window

**** aws
:PROPERTIES:
:ID:       11aa93f5-5d65-4d2e-a3cd-6c5455bfb255
:CREATED:  [2022-02-22 Tue 15:27]
:UPDATED:  [2022-10-12 Wed 13:42]
:ROAM_EXCLUDE: t
:END:

***** aws-env
:PROPERTIES:
:ID:       efd7880f-07c1-4ef3-97fe-916fc7a51cb9
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-28 Wed 16:37]
:END:

#+begin_src emacs-lisp
(defvar qz/aws-env nil
  "the aws login configuration, managed through saml2aws

to manipulate, run
$ saml2aws login -a PROFILE_ALIAS

files of note
`$HOME/.aws/'
`$HOME/.saml2aws'")
#+end_src

#+RESULTS:
: qz/aws-env

****** choose
:PROPERTIES:
:ID:       6663fecd-c4a2-4218-aa18-4bc4bb3e922f
:ROAM_EXCLUDE: t
:CREATED:  [2022-02-22 Tue 15:27]
:UPDATED:  [2022-10-12 Wed 13:49]
:END:

#+begin_src emacs-lisp
(defun qz/choose-aws-env (&optional env)
  (interactive)
  (setq qz/aws-env
        (or env (completing-read
                 "aws-env: "
                 (->> (shell-command-to-string
                       "cat ~/.saml2aws | grep '^name' | cut -d'=' -f2")
                      (s-split "\n")
                      (remove "")))))
  (async-shell-command
   (format "saml2aws login -a %s && echo all good yo || echo uh-oh" qz/aws-env)
   "*aws*"
   "*error - aws*"))
#+end_src

**** kubernetes
:PROPERTIES:
:ID:       299fa738-35c3-45f6-83fb-e26db3a40ce5
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** kubectl-context                                                           :var:
:PROPERTIES:
:ID:       48fa15cd-93c1-49e6-9e4b-c610959c4b11
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-09-29 Fri 18:57]
:END:
#+begin_src emacs-lisp
(defvar qz/kubectl-context nil
  "the operating kubernetes context.

to check, at a shell, run:
`$ kubectl config get-contexts -o name'
or
`$ kubectl config current-context")
#+end_src
****** choose                                                                  :func:
:PROPERTIES:
:ID:       48e170f6-acf1-48d3-af8d-bb06069db027
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/choose-kubectl-context (&optional ctx)
  (interactive)
  (setq qz/kubectl-context
        (or ctx (completing-read "k8s ctx: "
                                 (qz/shell-command-to-list-of-strings
                                  "kubectl config get-contexts -o name"))))
  (async-shell-command (format "kubectl config use-context %s"
                               qz/kubectl-context)
                       "*kubectl*"))

;; optional; quality of life improvement to bury kubectl buffer
(add-to-list 'display-buffer-alist '("*kubectl*" display-buffer-no-window))

(defalias 'qz/choose-kubernetes-context 'qz/choose-kubectl-context )
#+end_src

#+RESULTS:
: qz/choose-kubernetes-context

**** read-tab
:PROPERTIES:
:ID:       c053accd-329e-440d-be77-735ecea9f0b3
:CREATED:  [2022-10-31 Mon 13:16]
:UPDATED:  [2023-07-15 Sat 17:54]
:END:

#+name: elisp-read-tab
#+begin_src emacs-lisp
(defun qz/get-tabs ()
  (when-let* ((file (s-trim (shell-command-to-string "python3 $HOME/life/scratch/tabs.py")))
              (file (and (not (string-empty-p file)) file)))
    (mapcar (lambda (o) (cons (gethash "title" o) o))
            (cl-sort ;; accessed ASC
             (with-temp-buffer
               (insert-file-contents file)
               (json-parse-buffer))
             'lt :key (lambda (o)
                        (gethash "accessed" o))))))

(defun qz/tab (&optional tab insert?)
  (when-let* ((tab (or tab (cdr (car (qz/get-tabs)))))
              (title (gethash "title" tab))
              (url   (gethash "url" tab))
              (text (if (derived-mode-p 'org-mode)
                        (org-make-link-string url title)
                      (format "%s %s :: %s" comment-start title url))))
    (when insert?
      (insert text)
      (org-end-of-line)
      (org-return))
    text))

(defun qz/read-tab ()
  (interactive)
  (let* ((jd (qz/get-tabs))
         (choice (cdr (assoc
                       (consult--read
                        (mapcar 'car jd)
                        :prompt "choose tab: "
                        :default (car (seq-take jd 1))
                        :sort nil)
                       jd))))
    (qz/tab choice 'as-link)))

(define-key global-map (kbd "C-c C-s-l") 'qz/read-tab)

;; nigari tofu heat at DuckDuckGo :: https://duckduckgo.com/?t=ffab&q=nigari+tofu+heat+&ia=web
;; Decompression (GNU Emacs Lisp Reference Manual) :: https://www.gnu.org/software/emacs/manual/html_node/elisp/Decompression.html
;; (qz/tab)
#+end_src

#+RESULTS: elisp-read-tab
: qz/read-tab

***** tabs.py
:PROPERTIES:
:ID:       5af6010e-4010-4c80-80c7-4050a689eeab
:CREATED:  [2022-10-31 Mon 13:22]
:UPDATED:  [2023-07-15 Sat 17:54]
:ROAM_EXCLUDE: t
:END:

#+name: python-read-tab
#+begin_src python :tangle ~/life/scratch/tabs.py :noweb yes
# tabs.py -- a script to rip condensed tabs from firefox as json
#
# Copyright (C) 2022  Samuel Culpepper <samuel@samuelculpepper.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# See footer for elisp companion, to `completing-read' inside emacs

import json
import lz4.block
import pathlib
from time import time

debug = False
output = "/tmp/tabs-out.json"

# Set up path and regex for files
# i.e.. ~/.mozilla/firefox/oxd0gsnm.default
#    *sessionstore*
path = pathlib.Path.home().joinpath(".mozilla/firefox")
files = list(path.glob("*default*/sessionstore-backups/recovery.jsonlz4"))
# files = path.glob("oxd0gsnm.default-release-1/sessionstore-backups/recovery" + ".jsonlz4")

debug and print(files)

ID = lambda t: (t.get("ID"))
CHILD = lambda t: (t.get("children", []))

tabs = []

# ID =   [(ID(t), ID(c)) for tt in t.get('entries') for c in tt.get('children')]


def go():
    for f in files:
        j = None
        try:
            # decompress if necessary
            b = f.read_bytes()
            if b[:8] == b"mozLz40\0":
                b = lz4.block.decompress(b[8:])
                j = json.loads(b)
                if debug:
                    with open("/tmp/tabs-in.json", "w+") as f:
                        json.dump(j, f, indent=2)
        except BaseException as e:
            debug and print("error: ", e)
            continue
        if not j:
            continue
        for w in j.get("windows", []):
            most_recent_tab_index = ""
            min_time = 1000

            debug and print("w.tabs len", len(w["tabs"]))
            for t in w["tabs"]:
                if not t:
                    continue
                i = t.get("index", 0) - 1  # Firefox does not 0-index
                if 1 > i:
                    continue
                debug and print(
                    "(ID . (length t/entries/[i]/children))",
                    t["entries"][i]["ID"],
                    [
                        [ID(c), [ID(cc) for cc in CHILD(c)]]
                        for c in CHILD(t["entries"][i])
                    ],
                )
                # time -> seconds elapsed
                access_time = int((int(time() * 1000) - t["lastAccessed"]) / 600)
                if access_time < min_time:
                    most_recent_tab_index = t["entries"][i]["url"]
                    # [(ID(t), ID(c)) for tt in t.get('entries') for c in tt.get('children')]

                hi = t["entries"][i]
                tabs.append(
                    {
                        "id": hi.get("ID"),
                        "url": hi.get("url"),
                        "title": hi.get("title"),
                        "accessed": access_time,
                    }
                )
                debug and print("MOST RECENT TAB: ", most_recent_tab_index)

        with open(output, "w") as f:
            json.dump(tabs, f, indent=2)
            print(output)


go()

# <<elisp-read-tab>>
#+end_src
pngg
*** general
:PROPERTIES:
:ID:       8f3dada6-e104-4726-aaa2-25c1475c534e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-28 Wed 16:36]
:END:
**** qz/advice                                                           :func:macro:
:PROPERTIES:
:ID:       f061bce6-701f-4f81-b0e2-dc97554b58c2
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-04-16 Sun 15:34]
:END:

#+begin_src emacs-lisp :noweb-ref general
(defmacro qz/advice- (target-fn state advice-fn)
  "Helper to manage advice functions.

Creates commands for on/off which state the name of the target and advised functions."
  (let* ((s-advice (lambda (e)
                     (intern (format "qz/advice-%s--%s--%s"
                                     e target-fn advice-fn))))
         (enable (funcall s-advice 'enable))
         (disable (funcall s-advice 'disable)))
    `(progn
       (defun ,enable ()
         (interactive)
         (advice-add ',target-fn ,state ',advice-fn))

       (defun ,(funcall s-advice 'disable) ()
         (interactive)
         (advice-remove ',target-fn ',advice-fn))

       (,enable)
       (list ',enable ',disable))))
#+end_src

#+RESULTS:
: qz/advice-
**** org-babel: elisp: cons->table
:PROPERTIES:
:ID:       4841fe9c-4a58-48a2-8882-efcc289ead9f
:CREATED:  [2022-04-11 Mon 10:46]
:UPDATED:  [2022-04-11 Mon 11:02]
:ROAM_EXCLUDE: t
:END:
:LOGBOOK:
CLOCK: [2022-04-11 Mon 10:07]--[2022-04-11 Mon 10:47] =>  0:40
:END:

- see also :: [[id:317eb3df-458c-411b-a8d3-32507d3f025e][org-table]]

just kind of wack to see
: ((1 . a) (2 . b))
all the time, especially when the results are massive

#+name: elisp-cons->table
#+begin_src emacs-lisp :noweb-ref general
(defun cons->table (body &optional &key cols tail-fn)
  "a transformation helper for org-babel, which has defaults
to parse robustly the proper-list[1] over the simple cons[2]

body      *values you wish to transform*: a list; cons, proper,
          a-, etc.
:cols     *column headers for the results*: wrap the result in
          ((co1 col2) . (hline . (..res..)); as such, they will
          be made in addition to any headers and/or `hlines'
          applied by `org-babel' (esp. those from `:colnames').
:tail-fn  *control the parsing of each entry of `body'*:
          by default, `cdr' because for a simple `cons' '(a . b),
          cdr will yield 'b -> (cdr '(a . b)).  If operating on
          some `list' '(a b), then the analog for `'b' is `cadr'
          -> (cadr '(a b)) -> `'b'

[1] proper-list: '(a b)   ; '(a . (b . nil))
[2] simple-cons: '(a . b) ; '(a . b)"
  (let ((res (mapcar (lambda (c)
                       (list (car c)
                             (funcall (or tail-fn 'cdr) c)))
                     body)))
    (if cols
        (cons cols (cons 'hline res))
      res)))

;;; e.g  {C-n C-SPC M-e C-p C-x C-;}
;; (cons->table
;;  '((56 . "/home/samuel/life/roam/20210420T114708Z-newstore.org")
;;    (11 . "/home/samuel/life/roam/20210813T161035Z-kubernetes.org")
;;    (10 . "/home/samuel/life/roam/20200515T151822Z-postgresql.org"))
;;  :cols '(count file))
#+end_src

#+RESULTS: elisp-cons->table
: cons->table

**** ensure-list
:PROPERTIES:
:ID:       8861b226-59df-4ce4-a54d-24695f1a5d4c
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref general
(defun qz/ensure-list (s)
  (if (listp s)
      s
    (list s)))
#+end_src

#+RESULTS:
: qz/ensure-list

**** save without hooks
:PROPERTIES:
:ID:       1cbecd4e-64c7-4692-a478-c7cb577a7b83
:CREATED:  [2023-04-03 Mon 12:46]
:UPDATED:  [2023-07-12 Wed 20:47]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref general
(defun qz/save-no-hooks ()
  (interactive)
  (let ((before-save-hook nil))
    (save-buffer)))
#+end_src

#+RESULTS:
: qz/save-no-hooks

**** mode-is-or-derives
:PROPERTIES:
:ID:       c5fe576d-aa68-42ff-a469-358ce251d182
:CREATED:  [2023-07-12 Wed 20:47]
:UPDATED:  [2023-07-12 Wed 20:47]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref general
(defun qz/mode-is-or-derives (mode &rest modes)
  (or (eq major-mode mode)
      (apply 'derived-mode-p mode modes)))

;;  (trace-function 'qz/mode-is-or-derives)
#+end_src

#+RESULTS:
: qz/mode-is-or-derives

**** TODO debug
:PROPERTIES:
:ID:       fe64fe7a-bb4c-4828-bb8b-5f263df8b3e9
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-04-16 Sun 15:35]
:END:
#+begin_src emacs-lisp :noweb-ref general
(defvar qz/debug 0 "debugging assists")

(defmacro qz/debug- (&rest body)
  (when (< 0 (or qz/debug 0))
    `(progn ,@body)))

(qz/debug- (message "yo"))
#+end_src

#+RESULTS:

***** demo ;; what is happening here? why is message evaluated
:PROPERTIES:
:ID:       759495b5-773d-4276-ae76-449267545e4c
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-04-16 Sun 15:36]
:END:

#+begin_src emacs-lisp :tangle no :noweb-ref null
(view-echo-area-messages)
(setq qz/debug 0)
(qz/debug- (message "offffff"))
(setq qz/debug 1)
(qz/debug- (message "on"))
#+end_src

#+RESULTS:

**** newstore
:PROPERTIES:
:ID:       f4fe201f-b26c-48cf-9c15-5a3f5095306d
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref general
(require 's)

(setq qz/newstore-envs '(sandbox staging production)
      qz/newstore-env-current nil
      qz/newstore-envs-abbrev '((sandbox . x) (staging . s) (production . p))
      qz/newstore-tenant-current nil
      qz/newstore-tenants '("dodici" "windsor"
                            "boardriders" "marine-layer"
                            "frankandoak" "vince"))

(defun qz/newstore-choose-env (&optional env)
  (interactive)
  (message "qz/newstore-env-current: %s"
           (setq qz/newstore-env-current
                 (or env (completing-read "env: " qz/newstore-envs))))
  (qz/restclient-choose-env qz/newstore-env-current)
  (qz/es-choose-url nil nil qz/newstore-env-current))

(defun qz/newstore-choose-tenant (&optional tenant)
  (interactive)
  (message "qz/newstore-tenant-current: %s"
           (setq qz/newstore-tenant-current
                 (or tenant (completing-read "tenant: " qz/newstore-tenants))))
  (qz/restclient-choose-tenant qz/newstore-tenant-current))

(defun qz/newstore-auth-current ()
  (message "qz/newstore-auth-cache: <for qz/newstore-env-current: %s>"
           qz/newstore-env-current)
  (setq qz/newstore-auth-cache
        (qz/newstore-auth qz/newstore-env-current)))

(defun qz/newstore-auth (env)
  "get the auth (password) associated with
a given `env' from `qz/newstore/envs'

to populate, just fill a `pass' entry like so echo mypass | pass
  insert -e newstore/production"
  (s-trim (shell-command-to-string
           (format "pass newstore/%s" env))))

;; (defun qz/newstore-quick-auth ()
;;   (interactive)
;;   (qz/newstore-choose-tenant)
;;   (qz/newstore-choose-env)
;;   (org-sbe "newstore-token"))
#+end_src

#+RESULTS:
: qz/newstore-quick-auth

**** shell-command-to-list-of-strings                                          :func:
:PROPERTIES:
:ID:       0fbf9125-f032-4c1b-ac6b-af600057cc66
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref general
(defun qz/shell-command-to-list-of-strings (command)
  (remove "" (s-split "\n" (shell-command-to-string command))))
#+end_src

#+RESULTS:
: qz/shell-command-to-list-of-strings

**** revert-buffer-no-confirm                                                  :func:
:PROPERTIES:
:ID:       0105c4f8-016b-47a8-a425-e18911027d11
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
- :: http://www.emacswiki.org/emacs-en/download/misc-cmds.el

#+begin_src emacs-lisp :noweb-ref general
(defun qz/revert-buffer-no-confirm ()
  "Revert buffer without confirmation."
  (interactive)
  (revert-buffer :ignore-auto :noconfirm))
#+end_src
**** dwim-narrow
:PROPERTIES:
:ID:       33f19a38-eb70-473d-8445-c916b7c3c2ff
:CREATED:  <2022-03-11 Fri 11:53>
:UPDATED:  [2022-04-12 Tue 09:26]
:ROAM_EXCLUDE: t
:END:

- :: [[id:23f2a12f-8537-4eb7-a150-adb82ba182d6][ergonomics: emacs: dwim narrowing]]
  - :: https://writequit.org/articles/working-with-logs-in-emacs.html

#+begin_src emacs-lisp
(defun eos/narrow-or-widen-dwim (p)
  "Widen if buffer is narrowed, narrow-dwim otherwise.
Dwim means: region, org-src-block, org-subtree, or
defun, whichever applies first. Narrowing to
org-src-block actually calls `org-edit-src-code'.

With prefix P, don't widen, just narrow even if buffer
is already narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
        ((region-active-p)
         (narrow-to-region (region-beginning)
                           (region-end)))
        ((derived-mode-p 'org-mode)
         ;; `org-edit-src-code' is not a real narrowing
         ;; command. Remove this first conditional if
         ;; you don't want it.
         (cond ((ignore-errors (org-edit-src-code) t)
                (delete-other-windows))
               ((ignore-errors (org-narrow-to-block) t))
               (t (org-narrow-to-subtree))))
        ((derived-mode-p 'latex-mode)
         (LaTeX-narrow-to-environment))
        (t (narrow-to-defun))))

(define-key global-map (kbd "C-x C-n") 'eos/narrow-or-widen-dwim)
#+end_src

**** yq-interactively
:PROPERTIES:
:ID:       d31efc58-0563-43df-b372-61428272022f
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/yq-interactively ()
  "haha yaml loophole"
  (interactive)
  (let ((jq-interactive-command "yq"))
    (call-interactively 'jq-interactively)))
#+end_src

#+RESULTS:
: qz/yq-interactively

**** insert-gpl
:PROPERTIES:
:ID:       12f23b79-b0b4-49a7-afd3-1ea730673140
:CREATED:  [2022-10-25 Tue 15:55]
:UPDATED:  [2023-02-19 Sun 18:09]
:ROAM_EXCLUDE: t
:END:

- inspired by https://efxa.org/2013/05/01/lisp-function-gnu-gpl-emacs

#+begin_src emacs-lisp
(defun qz/insert-gpl ()
  "Insert the short brief of GNU GPL v3."
  (interactive)
  (save-mark-and-excursion
    (push-mark)
    (insert "
<one line to give the program's name and a brief idea of what it does.>
Copyright (C) <year>  <name of author>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.")
    (comment-region (mark) (point))))
#+end_src

#+RESULTS:
: insert-gpl

**** recover-and-diff-buffer-with-file
:PROPERTIES:
:ID:       4ce295c9-8661-44f1-92d7-1b1cec7cca68
:CREATED:  [2023-08-28 Mon 14:00]
:UPDATED:  [2023-08-28 Mon 14:02]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(defun qz/recover-this-file-and-diff-buffer-with-file ()
  (interactive)
  (call-interactively 'recover-this-file)
  (call-interactively 'diff-buffer-with-file))
#+end_src

#+RESULTS:
: qz/recover-this-file-and-diff-buffer-with-file

**** pass shorthand :: qz/p
:PROPERTIES:
:ID:       d8341d8a-b882-4aba-8d27-a3acefb4fc2d
:CREATED:  [2023-08-30 Wed 12:08]
:UPDATED:  [2023-08-30 Wed 12:08]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(defun qz/p (token)
  (auth-source-pass-get 'secret token))
#+end_src

#+RESULTS:
: qz/p

*** programming
:PROPERTIES:
:ID:       5fe66077-8fc2-4d04-905d-d0b5ef925a6d
:CREATED:  [2022-03-17 Thu 10:06]
:UPDATED:  [2022-03-17 Thu 10:06]
:ROAM_EXCLUDE: t
:END:
**** [[id:eae3ee00-be74-4f59-8a4d-b638baebc9f8][sql]]
:PROPERTIES:
:ID:       7be3838d-a859-469e-ae8c-049a299b658a
:CREATED:  [2022-03-17 Thu 10:06]
:UPDATED:  [2022-07-09 Sat 17:48]
:ROAM_EXCLUDE: t
:END:
***** sql-indent
:PROPERTIES:
:ID:       d8965285-d090-4286-a4b5-e43e593b913b
:CREATED:  [2022-03-17 Thu 10:06]
:UPDATED:  [2022-03-17 Thu 10:06]
:ROAM_EXCLUDE: t
:END:
:LOGBOOK:
CLOCK: [2022-03-17 Thu 10:06]--[2022-03-17 Thu 11:32] =>  1:26
:END:

****** TODO add-hook ;
:PROPERTIES:
:ID:       ed32b595-8b57-4f28-86b7-0a5e97651ae0
:CREATED:  [2022-03-17 Thu 10:06]
:UPDATED:  [2022-07-09 Sat 17:48]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp

#+end_src

****** indent tweaks
:PROPERTIES:
:ID:       7436d41f-37b5-4aa9-9b61-be884f4ac459
:CREATED:  [2022-05-24 Tue 12:14]
:UPDATED:  [2022-05-24 Tue 12:21]
:ROAM_EXCLUDE: t
:END:

******* sqlind-indentation-offsets-alist
:PROPERTIES:
:ID:       eaeefe83-2fbf-4eab-81e7-34c0a278bdca
:CREATED:  [2022-05-24 Tue 12:25]
:UPDATED:  [2023-06-14 Wed 13:17]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(custom-set-variables
 '(sqlind-indentation-offsets-alist
   '((syntax-error sqlind-report-sytax-error)
     (in-string sqlind-report-runaway-string)


     (comment-continuation sqlind-indent-comment-continuation)
     (comment-start sqlind-indent-comment-start)
     (toplevel 0)
     (in-block +)
     (in-begin-block +)
     (block-start 0)
     (block-end 0)
     (declare-statement +)
     (package ++)
     (package-body 0)
     (create-statement +)
     (defun-start +)
     (labeled-statement-start 0)
     (statement-continuation +)
     (nested-statement-open sqlind-use-anchor-indentation +)
     (nested-statement-continuation sqlind-use-previous-line-indentation)
     (nested-statement-close sqlind-use-anchor-indentation)
     (with-clause sqlind-use-anchor-indentation)
     (with-clause-cte +)
     (with-clause-cte-cont ++)
     (case-clause 0)
     (case-clause-item sqlind-use-anchor-indentation +)
     (case-clause-item-cont sqlind-right-justify-clause)
     (select-clause sqlind-right-justify-clause)
     (select-column sqlind-indent-select-column)
     (select-column-continuation sqlind-indent-select-column +)
     ;;(select-table-continuation 0)
     ;; ((default . ++) (kinda . +) ( . sqlind-use-anchor-indentation))
     (select-join-condition ++) ; this should wrap
     (select-table sqlind-indent-select-table)
     (select-table-continuation sqlind-indent-select-table +)
     (in-select-clause sqlind-lineup-to-clause-end sqlind-right-justify-logical-operator)
     (insert-clause sqlind-right-justify-clause)
     (in-insert-clause sqlind-lineup-to-clause-end sqlind-right-justify-logical-operator)
     (delete-clause sqlind-right-justify-clause)
     (in-delete-clause sqlind-lineup-to-clause-end sqlind-right-justify-logical-operator)
     (update-clause sqlind-right-justify-clause)
     (in-update-clause sqlind-lineup-to-clause-end sqlind-right-justify-logical-operator))))
#+end_src

#+RESULTS:

******* sqlind-default-indentation-offsets-alist
:PROPERTIES:
:ID:       07314dae-5651-44cb-a74d-332ded269f4a
:CREATED:  [2022-05-24 Tue 12:25]
:UPDATED:  [2022-07-09 Sat 17:48]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(custom-set-variables
 '(sqlind-default-indentation-offsets-alist
   '((syntax-error sqlind-report-sytax-error)
     (in-string sqlind-report-runaway-string)
     (comment-continuation sqlind-indent-comment-continuation)
     (comment-start sqlind-indent-comment-start)
     (toplevel 0)
     (in-block +)
     (in-begin-block +)
     (block-start 0)
     (block-end 0)
     (declare-statement +)
     (package ++)
     (package-body 0)
     (create-statement +)
     (defun-start +)
     (labeled-statement-start 0)
     (statement-continuation +)
     (nested-statement-open sqlind-use-anchor-indentation +)
     (nested-statement-continuation sqlind-use-previous-line-indentation)
     (nested-statement-close sqlind-use-anchor-indentation)
     (with-clause sqlind-use-anchor-indentation)
     (with-clause-cte +)
     (with-clause-cte-cont ++)
     (case-clause 0)
     (case-clause-item sqlind-use-anchor-indentation +)
     (case-clause-item-cont sqlind-right-justify-clause)
     (select-clause sqlind-right-justify-clause)
     (select-column sqlind-indent-select-column)
     (select-column-continuation sqlind-indent-select-column +)
     (select-join-condition -- --)
     (select-table sqlind-indent-select-table)
     ;;(select-table-continuation sqlind-indent-select-table +)
     (select-table-continuation sqlind-lineup-joins-to-anchor)
     (in-select-clause sqlind-lineup-to-clause-end sqlind-right-justify-logical-operator)
     (insert-clause sqlind-right-justify-clause)
     (in-insert-clause sqlind-lineup-to-clause-end sqlind-right-justify-logical-operator)
     (delete-clause sqlind-right-justify-clause)
     (in-delete-clause sqlind-lineup-to-clause-end sqlind-right-justify-logical-operator)
     (update-clause sqlind-right-justify-clause)
     (in-update-clause sqlind-lineup-to-clause-end sqlind-right-justify-logical-operator))))
#+end_src

#+RESULTS:
***** sqlfluff
:PROPERTIES:
:ID:       0f7c1f78-677a-40a5-ac69-218c1c5e157e
:CREATED:  [2023-04-26 Wed 16:47]
:UPDATED:  [2023-07-05 Wed 10:39]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(defun qz/sqlfluff-region (&optional beg end info)
  "uses src block by default"
  (interactive)
  (let* ((info (or info (org-babel-get-src-block-info)))
         (dialect (or (and info (cl-case
                                    (intern (cdr (assoc :engine (nth 2 info))))
                                  (bq "bigquery")
                                  (postgres "postgresql")
                                  (t (error "🙄 my lazy ass"))))
                      ;; default
                      "bigquery")))
    (if info
        (save-mark-and-excursion
          (org-babel-mark-block))
      ;; default
      (unless (region-active-p)
        (mark-whole-buffer)))
    (cl-destructuring-bind
        (beg end)
        (or (and beg end (list beg end))
            (list (region-beginning) (region-end)))
      (shell-command-on-region
       beg end
       (format "sqlfluff fix --FIX-EVEN-UNPARSABLE --force --disable-progress-bar --dialect %s -"
               dialect)
       nil ;; no output buffer
       'replace))))
#+end_src

#+RESULTS:
: qz/sqlfluff-region
***** vars
:PROPERTIES:
:ID:       d4ec521b-c430-4fe4-b7f9-9ad06ca33272
:CREATED:  [2023-08-15 Tue 11:39]
:UPDATED:  [2023-08-15 Tue 11:39]
:ROAM_EXCLUDE: t
:END:
****** org-babel-default-header-args:sql
:PROPERTIES:
:ID:       51e144e6-da9d-4293-974d-9639cbee4173
:CREATED:  [2022-08-11 Thu 11:01]
:UPDATED:  [2023-09-01 Fri 17:54]
:END:

#+begin_src emacs-lisp :noweb-ref org

(setq qz/org-babel-default-header-args:sql:postgres
      '((:engine . "postgres")
        (:dbport . 5432) ;; NEVER connect to an external on 5433 by default
        (:dbhost . "localhost"))
      qz/bq/bi "`p-t-business-intelligence-0da1`"
      qz/org-babel-default-header-args:sql:bq
      `((:engine . "bq")
        (:results . "raw"))
      qz/sql:bq:etc
      `((:var bi . ,qz/bq/bi)
        (:var datep . "> timestamp_add(current_date(), interval -$period day)")
        (:var timep . "> timestamp_add(current_timestamp(), interval -$period day)")
        ;; this var 'period' must go "at the end", such that it may be
        ;; referenced by vars "at the start".  'timep' & 'datep' here
        ;; would fail otherwise.
        (:var period . 7)
        (:var return . ,(concat qz/bq/bi ".t_checkout.vw_item_return"))
        (:var soi    . ,(concat qz/bq/bi ".t_order_management.vw_dim_sales_order_item_all_time"))
        (:var so     . "`p-t-business-intelligence-0da1`.t_order_management.vw_order")
        (:var vsoi   . "`p-t-order-management-svc-6996`.validation_stream.om_public_sales_order_item")
        (:var rsoi   . "`p-t-order-management-svc-6996`.raw_stream.om_public_sales_order_item")
        (:var dmsoi  . "`p-t-order-management-svc-6996`.dm.dimension_sales_order_item")))
#+end_src

#+RESULTS:
: ((:var bi . "`p-t-business-intelligence-0da1`") (:var datep . "> timestamp_add(current_date(), interval -$period day)") (:var timep . "> timestamp_add(current_timestamp(), interval -$period day)") (:var period . 7) (:var return . "`p-t-business-intelligence-0da1`.t_checkout.vw_item_return") (:var soi . "`p-t-business-intelligence-0da1`.t_order_management.vw_dim_sales_order_item_all_time") (:var so . "`p-t-business-intelligence-0da1`.t_order_management.vw_order") (:var vsoi . "`p-t-order-management-svc-6996`.validation_stream.om_public_sales_order_item") (:var rsoi . "`p-t-order-management-svc-6996`.raw_stream.om_public_sales_order_item") (:var dmsoi . "`p-t-order-management-svc-6996`.dm.dimension_sales_order_item"))

******* qz/choose-org-babel-default-header-args:sql
:PROPERTIES:
:ID:       ceff098a-12f2-419f-911c-8ba2dfcebab0
:CREATED:  [2023-05-10 Wed 11:58]
:UPDATED:  [2023-09-01 Fri 17:54]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(defun qz/choose-org-babel-default-header-args:sql (&optional dialect)
  (interactive)
  (setq org-babel-default-header-args:sql
        (symbol-value (intern
                       (format "qz/org-babel-default-header-args:sql:%s"
                               (or dialect
                                   (completing-read "dialect: "
                                                    '(bq postgres))))))))

(qz/choose-org-babel-default-header-args:sql 'bq)
#+end_src

#+RESULTS:
: ((:engine . "bq") (:results . "raw"))
****** org-babel-default-header-args:sqlite
:PROPERTIES:
:CREATED:  [2024-02-14 Wed 18:03]
:UPDATED:  [2024-02-14 Wed 18:06]
:ID:       6b081fc0-1d13-4d5f-8321-5ed2693f25d3
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(setq org-babel-default-header-args:sqlite '((:colnames . "yes")))
#+end_src

#+RESULTS:
: ((:colnames . "yes"))

***** bigquery
:PROPERTIES:
:ID:       61feeb74-4c8a-467e-8e2e-5d17a397a303
:CREATED:  [2023-05-05 Fri 14:24]
:UPDATED:  [2023-05-05 Fri 14:24]
:ROAM_EXCLUDE: t
:END:
****** org-babel-execute:bq
:PROPERTIES:
:ID:       4bc34558-e335-475b-ad80-87333824ac44
:CREATED:  [2023-04-14 Fri 18:34]
:UPDATED:  [2023-06-18 Sun 16:52]
:ROAM_EXCLUDE: t
:END:

made with chopi!!!
she said im cool!!

- based on :: [[https://github.com/renzmann/.emacs.d][baserenzmann/.emacs.d: My literate Emacs configuration]] ([[https://github.com/renzmann/.emacs.d#bigquery-sql-blocks-in-org-babel][exact ref]])
- next: auto-taxy query plan  :: https://github.com/alphapapa/taxy.el/tree/master/examples



#+begin_src elisp :noweb-ref org
(defun org-babel-execute:bq (orig-fun body params)
  (let* ((dry? (assq :dry params))
         (cmd (format "bq query --format=json --nouse_legacy_sql %s '
%s
'"
                      (if dry? "--dry_run" "")
                      (s-replace-all '(
                                       ("'" . "\"")
                                       ;;("*" . "\*") ;; TODO \* (rde)
                                       ;; ("`" . "\\`")
                                       ;;   ("\"" . "\\\"")
                                       )
                                     (org-babel-expand-body:sql body params)))))
    (if (string-equal-ignore-case (cdr (assq :engine params)) "bq")
        (let ((res (org-babel-execute:shell
                    ;; ....the quoting ..... i know......
                    cmd
                    params)))
          (ignore-errors
            (message "Estimated Bytes: %.2f MB"
                     (let ((b (string-to-number (or (cdr (assoc 'totalBytesProcessed
                                                                (cdr (assoc 'statistics
                                                                            (json-read-from-string res)))))
                                                    0))))
                       ;; get MiB
                       (/ (/ b 1024.0) 1024.0))))
          (json-to-org-table-parse-json-string res))
      (org-babel-execute:sql body params))))

(qz/advice- org-babel-execute:sql :around org-babel-execute:bq)
#+end_src

#+RESULTS:
| qz/advice-enable--org-babel-execute:sql--org-babel-execute:bq | qz/advice-disable--org-babel-execute:sql--org-babel-execute:bq |

******* testing
:PROPERTIES:
:ID:       c3172b1e-eca3-44c0-b3c7-25996a423e8a
:CREATED:  [2023-05-11 Thu 12:37]
:UPDATED:  [2023-05-11 Thu 12:37]
:ROAM_EXCLUDE: t
:END:

#+begin_src elisp :noweb-ref null
(org-babel-execute:shell
 (format " query --format=json --nouse_legacy_sql %s '%s'"
         (if dry? "--dry_run" "")
         (org-babel-expand-body:sql body params))
 params)
#+end_src

******* TODO sort output json's top-level keys with respect to input order (need to lex the query)
:PROPERTIES:
:ID:       6f525eda-40aa-49b6-a90c-8ebd041fb9e2
:CREATED:  [2023-06-05 Mon 12:02]
:UPDATED:  [2023-06-05 Mon 12:03]
:ROAM_EXCLUDE: t
:END:

****** bq-consult-attrs
:PROPERTIES:
:ID:       3ee4f0e6-7ead-44fd-b01a-7537aa93c236
:CREATED:  [2023-05-05 Fri 14:23]
:UPDATED:  [2023-10-27 Fri 12:11]
:END:

- see also :: [[id:cbfce57c-9f96-4e68-9585-620f4f249f5a][bq: cli cheatsheet]]

******* shell
:PROPERTIES:
:ID:       d8b18278-3586-4471-b1f4-e08ae9dfc56b
:CREATED:  [2023-05-05 Fri 14:23]
:UPDATED:  [2023-05-05 Fri 14:24]
:ROAM_EXCLUDE: t
:END:

******** bq-scrape
:PROPERTIES:
:ID:       7a20fc56-4be9-48c2-869b-45dad61a5072
:CREATED:  [2023-06-21 Wed 09:59]
:UPDATED:  [2023-07-19 Wed 15:09]
:ROAM_EXCLUDE: t
:END:

#+name: sh-bq-get-dataset-table
#+begin_src shell :results file :file ~/.cache/bq-schema.txt :tangle ~/.local/bin/bq-scrape
qdatasets() { bq ls --format=json | jq -r 'map( .datasetReference | [.projectId, .datasetId] | join(".") ) | join("\n") ' ; }

datasets() { bq ls --format=json | jq -r 'map( .datasetReference.datasetId ) | join("\n") ' ; }

tables() { bq ls --format=json $1 | jq -r 'map( .tableReference | [.datasetId, .tableId] | join(".") ) | join("\n") ' ; }
#+end_src

#+name: bq-scrape
#+begin_src shell :results file :file ~/.cache/bq-schema.txt :tangle ~/.local/bin/bq-scrape :noweb yes
<<sh-bq-get-dataset-table>>

table() { bq show --format=json $1 | jq -r ' .
| (.tableReference | [.datasetId, .tableId] | join(".")) as $tbl
| .schema.fields
| map(["\($tbl).\(.name)", .type, .mode]  | join("::"))
| join("\n") ' ; }

for dataset in $(datasets) ; do
    echo $dataset
    (for tbl in $(tables $dataset) ; do
         echo $tbl
         (table $tbl) || echo oops! $tbl
     done) || echo oops! $dataset
done
    #+end_src

    #+RESULTS:
    :results:
    [[file:~/.cache/bq-schema.txt]]
    :end:

********* bq-scrape-given-project
:PROPERTIES:
:ID:       058fac72-f6f0-433f-9781-1042e9024bfb
:CREATED:  [2023-08-15 Tue 11:49]
:UPDATED:  [2023-10-27 Fri 09:56]
:ROAM_EXCLUDE: t
:END:

#+begin_src shell
for proj in p-t-business-intelligence-0da1 p-t-order-management-svc-6996 p-t-routing-svc-420b ; do
    gcloud config set project $proj
    bq-scrape > "${HOME}/.cache/bq-scrape-${proj}.txt"
done
# reset
gcloud config set project p-t-business-intelligence-0da1
#+end_src
******** bq-export-views
:PROPERTIES:
:ID:       d54a9751-5a80-42fe-b12e-2ba85b6c7b03
:CREATED:  [2023-06-21 Wed 09:59]
:UPDATED:  [2023-07-19 Wed 15:11]
:ROAM_EXCLUDE: t
:END:

#+name: bq-export-views
#+begin_src shell :tangle ~/.local/bin/bq-export-views :noweb yes
<<sh-bq-get-dataset-table>>

table() { bq show --format=json $1 | jq -r '.view.query' }

for dataset in $(datasets) ; do
    echo $dataset
    for tbl in $(tables $dataset) ; do
        o="/tmp/${tbl}.sql"
        (table $tbl > "${o}" && echo "${o}") || echo oops! $tbl
    done
    echo
done
#+end_src


#+RESULTS:
:results:
t_checkout
/tmp/t_checkout.vw_item_return.sql

t_clienteling
/tmp/t_clienteling.vw_conversation.sql
/tmp/t_clienteling.vw_message.sql
/tmp/t_clienteling.vw_sales_attribution.sql

t_currency_conversion
/tmp/t_currency_conversion.vw_currency_exchange_rates.sql

t_dre
/tmp/t_dre.gmv_dashboard.sql
/tmp/t_dre.test_join_on_view.sql
/tmp/t_dre.vw_insights_kpis.sql

t_order_management
/tmp/t_order_management.vw_dbt_freshness__audit.sql
/tmp/t_order_management.vw_dim_sales_order_item.sql
/tmp/t_order_management.vw_dim_sales_order_item_all_time.sql
/tmp/t_order_management.vw_dim_sales_order_item_all_time_timezones.sql
/tmp/t_order_management.vw_dim_sales_order_item_staging.sql
/tmp/t_order_management.vw_order.sql

t_payment
/tmp/t_payment.vw_transaction_report.sql
/tmp/t_payment.vw_transactions.sql

t_routing
/tmp/t_routing.vw_fulfillment_request.sql
/tmp/t_routing.vw_fulfillment_request_item_rejections.sql
/tmp/t_routing.vw_fulfillment_request_item_state.sql
/tmp/t_routing.vw_item_shipment.sql
/tmp/t_routing.vw_location.sql
/tmp/t_routing.vw_transitions.sql

t_store_fulfillment
/tmp/t_store_fulfillment.vw_store.sql
:end:

********* diff with src versions
:PROPERTIES:
:ID:       3b67f9f0-2ea8-4358-8033-6288892eecfc
:CREATED:  [2023-06-21 Wed 10:15]
:UPDATED:  [2023-06-21 Wed 10:38]
:ROAM_EXCLUDE: t
:END:


#+begin_src shell
src=$HOME/git/ns/dre/bi-dbt
rm /tmp/*.diff

for f in $(ls /tmp/*.sql) ; do
    s="$(echo $f | cut -d. -f2,3)"
    m="$(find $src -name "$s" | grep -v target)"
    [ "${m}x" != "x" ] && (diff "$f" "$m") > /tmp/$s.diff
done
#+end_src

#+RESULTS:
:results:
:end:


******* elisp
:PROPERTIES:
:ID:       f61e6ac0-150d-41a9-9cd3-4a4941deaaa5
:CREATED:  [2023-05-05 Fri 14:23]
:UPDATED:  [2023-10-27 Fri 12:11]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(defun qz/bq-consult-attrs ()
  (interactive)
  (let ((d (mapcar
            (lambda (line) (s-split "::" line))
            ;; lines
            (s-split "\n"
                     ;; remove last empty line
                     (s-trim (with-temp-buffer
                               ;; TODO memoize
                               (mapc 'insert-file
                                     '("~/.cache/bq-scrape-p-t-business-intelligence-0da1.txt"
                                       "~/.cache/bq-scrape-p-t-order-management-svc-6996.txt"))
                               (buffer-string)))))))
    (consult--read
     d
     :prompt "choose attr: "
     :annotate
     (lambda (c)
       (concat
        (propertize " " 'display '(space :align-to center))
        (nth 1 (assoc c d))
        (propertize " " 'display '(space))
                                        ;(nth 2 (assoc c d))

        ))
     :sort nil)))

(defun qz/bq-read-attrs ()
  (interactive)
  (let ((d (mapcar
            (lambda (line) (s-split "::" line))
            ;; lines
            (s-split "\n"
                     ;; remove last empty line
                     (s-trim (with-temp-buffer
                               ;; TODO memoize
                               (insert-file "~/.cache/bq-schema.txt")
                               (buffer-string)))))))
    (insert (completing-read
             "choose attr: "
             (mapcar 'car d))
            )))


#+end_src

#+RESULTS:
: qz/bq-read-attrs
**** general
:PROPERTIES:
:ID:       8b699792-c0e5-41a4-b3fb-11b0d8a15fb2
:CREATED:  [2023-07-15 Sat 16:56]
:UPDATED:  [2023-07-15 Sat 16:56]
:ROAM_EXCLUDE: t
:END:
***** pp-eval
:PROPERTIES:
:ID:       8ae18fe6-796c-404c-ad01-c01636f1c548
:CREATED:  [2023-07-15 Sat 16:56]
:UPDATED:  [2023-07-15 Sat 16:56]
:ROAM_EXCLUDE: t
:END:
****** reset '(temp-buffer-show-function temp-buffer-show-hook)
:PROPERTIES:
:ID:       0ec7d6ff-d6f7-4ad9-91e6-0c7e33a52e65
:CREATED:  [2023-07-15 Sat 16:56]
:UPDATED:  [2023-10-24 Tue 16:45]
:ROAM_EXCLUDE: t
:END:


#+begin_src emacs-lisp
(setq temp-buffer-show-function 'hkey-help-show
      temp-buffer-show-hook (remove 'hkey-help-show
                                    temp-buffer-show-hook))
#+end_src

#+RESULTS:
: (completion-list-mode-finish help-mode-finish)
******* TODO why?  what sort of error does this help to resolve?  maybe help-plus?
:PROPERTIES:
:CREATED:  [2023-10-24 Tue 16:46]
:UPDATED:  [2023-10-24 Tue 16:46]
:ID:       97876050-eea8-41fe-9622-4004706ea459
:ROAM_EXCLUDE: t
:END:

***** auto-mode for ~.tml~ (thoughtspot proprietary markup)
:PROPERTIES:
:CREATED:  [2023-10-24 Tue 16:43]
:UPDATED:  [2023-10-24 Tue 16:45]
:ID:       076bc272-8e95-4cfe-a373-88211c6b681c
:END:

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist
             '("\\.tml\\'" . yaml-mode))
#+end_src

**** [[id:091ac573-6b34-4e0e-88b8-415785d5ae85][python]]
:PROPERTIES:
:ID:       ed0b9a5d-4287-48f0-a518-4303fb2efe32
:CREATED:  [2022-03-24 Thu 10:24]
:UPDATED:  [2022-03-30 Wed 11:59]
:ROAM_EXCLUDE: t
:END:
***** add-py-debug                                                             :func:
:PROPERTIES:
:ID:       a8049444-d35b-4b3c-a3eb-54678a3a17aa
:CREATED:  [2022-03-24 Thu 10:24]
:UPDATED:  [2022-05-02 Mon 12:21]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(defun qz/add-pdb-py-debug ()
  "add debug code and move line down"
  (interactive)
  (back-to-indentation)
  (insert "import pdb; pdb.set_trace();\n"))
#+end_src

#+RESULTS:
: qz/add-pdb-py-debug

***** org-babel-python-command
:PROPERTIES:
:ID:       8c209f94-c43d-4cd8-94f9-2a027b6ddaa3
:CREATED:  [2022-05-02 Mon 10:55]
:UPDATED:  [2022-05-02 Mon 11:02]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(setq org-babel-python-command "python3")
#+end_src

***** python-indent-offset
:PROPERTIES:
:ID:       ec1b6b85-1309-4c5c-8dfa-6bae0750eb21
:CREATED:  [2022-11-08 Tue 13:00]
:UPDATED:  [2022-11-08 Tue 13:09]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(custom-set-variables '(python-indent-offset 4))
#+end_src

***** pyx = py
:PROPERTIES:
:CREATED:  [2023-10-30 Mon 21:52]
:UPDATED:  [2023-10-30 Mon 21:52]
:ID:       22ab8435-5ece-4544-a9e6-6a320ddccfd9
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist
             '("\\.pyx\\'" . python-mode))
#+end_src

#+RESULTS:
: (("\\.pyx\\'" . python-mode) ("\\.tml\\'" . yaml-mode) ("\\(?:\\(?:\\.\\(?:b\\(?:\\(?:abel\\|ower\\)rc\\)\\|json\\(?:ld\\)?\\)\\|composer\\.lock\\)\\'\\)" . json-mode) ("\\.odc\\'" . archive-mode) ("\\.odf\\'" . archive-mode) ("\\.odi\\'" . archive-mode) ("\\.otp\\'" . archive-mode) ("\\.odp\\'" . archive-mode) ("\\.otg\\'" . archive-mode) ("\\.odg\\'" . archive-mode) ("\\.ots\\'" . archive-mode) ("\\.ods\\'" . archive-mode) ("\\.odm\\'" . archive-mode) ("\\.ott\\'" . archive-mode) ("\\.odt\\'" . archive-mode) ("\\.kotl?\\'" . kotl-mode) ("/guix/drvs/[[:alnum:]]\\{2\\}/[[:alnum:]]\\{30\\}-\\(?:[+._[:alnum:]-]+\\)\\.drv\\'" . guix-build-log-mode) ("/gnu/store/\\(?:[+._[:alnum:]-]+\\)\\.drv\\'" . guix-derivation-mode) ("/etc/profile\\'" . guix-env-var-mode) ("/tmp/guix-build-\\(?:[+._[:alnum:]-]+\\)\\.drv-[[:digit:]]+/environment-variables\\'" . guix-env-var-mode) ("/guix/profiles/system\\(?:[+._[:alnum:]-]+\\)*/\\(?:boot\\|parameters\\)\\'" . guix-scheme-mode) ("/gnu/store/\\(?:[0-9a-df-np-sv-z]\\{32\\}\\)-\\(?:activate\\|activate-service\\|boot\\|parameters\\|shepherd\\.conf\\|shepherd\\(?:[+._[:alnum:]-]+\\)\\.scm\\|\\(?:[+._[:alnum:]-]+\\)-guile-builder\\)\\'" . guix-scheme-mode) ("\\.epub\\'" . nov-mode) ("\\.[pP][dD][fF]\\'" . pdf-view-mode) (".*Dockerfile\\'" . dockerfile-mode) ("\\.envrc\\'" . envrc-file-mode) ("\\.dockerfile\\'" . dockerfile-mode) ("/Dockerfile\\(?:\\.[^/\\]*\\)?\\'" . dockerfile-mode) ("\\.tsv\\'" . tsv-mode) ("\\.[Cc][Ss][Vv]\\'" . csv-mode) ("\\.fountain\\'" . fountain-mode) ("\\.lua\\'" . lua-mode) ("\\.pgn\\'" . chess-pgn-mode) ("\\.\\(e?ya?\\|ra\\)ml\\'" . yaml-mode) ("\\.nomad\\'" . hcl-mode) ("\\.hcl\\'" . hcl-mode) ("\\.tf\\(vars\\)?\\'" . terraform-mode) ("\\.proto\\'" . protobuf-mode) ("\\.\\(plantuml\\|pum\\|plu\\)\\'" . plantuml-mode) ("\\.hva\\'" . latex-mode) ("go\\.mod\\'" . go-dot-mod-mode) ("\\.go\\'" . go-mode) ("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . markdown-mode) ("/git-rebase-todo\\'" . git-rebase-mode) ("\\.jl\\'" . julia-mode) ("\\.[Ss][Aa][Ss]\\'" . SAS-mode) ("\\.Sout" . S-transcript-mode) ("\\.[Ss]t\\'" . S-transcript-mode) ("\\.Rd\\'" . Rd-mode) ("DESCRIPTION\\'" . conf-colon-mode) ("/Makevars\\(\\.win\\)?\\'" . makefile-mode) ("\\.[Rr]out" . ess-r-transcript-mode) ("CITATION\\'" . ess-r-mode) ("NAMESPACE\\'" . ess-r-mode) ("\\.[rR]profile\\'" . ess-r-mode) ("\\.[rR]\\'" . ess-r-mode) ("/R/.*\\.q\\'" . ess-r-mode) ("\\.[Jj][Aa][Gg]\\'" . ess-jags-mode) ("\\.[Bb][Mm][Dd]\\'" . ess-bugs-mode) ("\\.[Bb][Oo][Gg]\\'" . ess-bugs-mode) ("\\.[Bb][Uu][Gg]\\'" . ess-bugs-mode) ("\\.gpg\\(~\\|\\.~[0-9]+~\\)?\\'" nil epa-file) ("\\.elc\\'" . elisp-byte-code-mode) ("\\.zst\\'" nil jka-compr) ("\\.dz\\'" nil jka-compr) ("\\.xz\\'" nil jka-compr) ("\\.lzma\\'" nil jka-compr) ("\\.lz\\'" nil jka-compr) ("\\.g?z\\'" nil jka-compr) ("\\.bz2\\'" nil jka-compr) ("\\.Z\\'" nil jka-compr) ("\\.vr[hi]?\\'" . vera-mode) ("\\(?:\\.\\(?:rbw?\\|ru\\|rake\\|thor\\|jbuilder\\|rabl\\|gemspec\\|podspec\\)\\|/\\(?:Gem\\|Rake\\|Cap\\|Thor\\|Puppet\\|Berks\\|Brew\\|Vagrant\\|Guard\\|Pod\\)file\\)\\'" . ruby-mode) ("\\.re?st\\'" . rst-mode) ("\\.py[iw]?\\'" . python-mode) ("\\.m\\'" . octave-maybe-mode) ("\\.less\\'" . less-css-mode) ("\\.scss\\'" . scss-mode) ("\\.cs\\'" . csharp-mode) ("\\.awk\\'" . awk-mode) ("\\.\\(u?lpc\\|pike\\|pmod\\(\\.in\\)?\\)\\'" . pike-mode) ("\\.idl\\'" . idl-mode) ("\\.java\\'" . java-mode) ("\\.m\\'" . objc-mode) ("\\.ii\\'" . c++-mode) ("\\.i\\'" . c-mode) ("\\.lex\\'" . c-mode) ("\\.y\\(acc\\)?\\'" . c-mode) ("\\.h\\'" . c-or-c++-mode) ("\\.c\\'" . c-mode) ("\\.\\(CC?\\|HH?\\)\\'" . c++-mode) ("\\.[ch]\\(pp\\|xx\\|\\+\\+\\)\\'" . c++-mode) ("\\.\\(cc\\|hh\\)\\'" . c++-mode) ("\\.\\(bat\\|cmd\\)\\'" . bat-mode) ("\\.[sx]?html?\\(\\.[a-zA-Z_]+\\)?\\'" . mhtml-mode) ("\\.svgz?\\'" . image-mode) ("\\.svgz?\\'" . xml-mode) ("\\.x[bp]m\\'" . image-mode) ("\\.x[bp]m\\'" . c-mode) ("\\.p[bpgn]m\\'" . image-mode) ("\\.tiff?\\'" . image-mode) ("\\.gif\\'" . image-mode) ("\\.png\\'" . image-mode) ("\\.jpe?g\\'" . image-mode) ("\\.webp\\'" . image-mode) ("\\.te?xt\\'" . text-mode) ("\\.[tT]e[xX]\\'" . tex-mode) ("\\.ins\\'" . tex-mode) ("\\.ltx\\'" . latex-mode) ("\\.dtx\\'" . doctex-mode) ("\\.org\\'" . org-mode) ("\\.dir-locals\\(?:-2\\)?\\.el\\'" . lisp-data-mode) ("\\.eld\\'" . lisp-data-mode) ("eww-bookmarks\\'" . lisp-data-mode) ("tramp\\'" . lisp-data-mode) ("/archive-contents\\'" . lisp-data-mode) ("places\\'" . lisp-data-mode) ("\\.emacs-places\\'" . lisp-data-mode) ("\\.el\\'" . emacs-lisp-mode) ("Project\\.ede\\'" . emacs-lisp-mode) ("\\.\\(scm\\|sls\\|sld\\|stk\\|ss\\|sch\\)\\'" . scheme-mode) ("\\.l\\'" . lisp-mode) ("\\.li?sp\\'" . lisp-mode) ("\\.[fF]\\'" . fortran-mode) ("\\.for\\'" . fortran-mode) ("\\.p\\'" . pascal-mode) ("\\.pas\\'" . pascal-mode) ("\\.\\(dpr\\|DPR\\)\\'" . delphi-mode) ("\\.\\([pP]\\([Llm]\\|erl\\|od\\)\\|al\\)\\'" . perl-mode) ("Imakefile\\'" . makefile-imake-mode) ("Makeppfile\\(?:\\.mk\\)?\\'" . makefile-makepp-mode) ("\\.makepp\\'" . makefile-makepp-mode) ("\\.mk\\'" . makefile-gmake-mode) ("\\.make\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-gmake-mode) ("\\.am\\'" . makefile-automake-mode) ("\\.texinfo\\'" . texinfo-mode) ("\\.te?xi\\'" . texinfo-mode) ("\\.[sS]\\'" . asm-mode) ("\\.asm\\'" . asm-mode) ("\\.css\\'" . css-mode) ("\\.mixal\\'" . mixal-mode) ("\\.gcov\\'" . compilation-mode) ("/\\.[a-z0-9-]*gdbinit" . gdb-script-mode) ("-gdb\\.gdb" . gdb-script-mode) ("[cC]hange\\.?[lL]og?\\'" . change-log-mode) ("[cC]hange[lL]og[-.][0-9]+\\'" . change-log-mode) ("\\$CHANGE_LOG\\$\\.TXT" . change-log-mode) ("\\.scm\\.[0-9]*\\'" . scheme-mode) ("\\.[ckz]?sh\\'\\|\\.shar\\'\\|/\\.z?profile\\'" . sh-mode) ("\\.bash\\'" . sh-mode) ("/PKGBUILD\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(bash_\\(profile\\|history\\|log\\(in\\|out\\)\\)\\|z?log\\(in\\|out\\)\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(shrc\\|zshrc\\|m?kshrc\\|bashrc\\|t?cshrc\\|esrc\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\([kz]shenv\\|xinitrc\\|startxrc\\|xsession\\)\\'" . sh-mode) ("\\.m?spec\\'" . sh-mode) ("\\.m[mes]\\'" . nroff-mode) ("\\.man\\'" . nroff-mode) ("\\.sty\\'" . latex-mode) ("\\.cl[so]\\'" . latex-mode) ("\\.bbl\\'" . latex-mode) ("\\.bib\\'" . bibtex-mode) ("\\.bst\\'" . bibtex-style-mode) ("\\.sql\\'" . sql-mode) ("\\(acinclude\\|aclocal\\|acsite\\)\\.m4\\'" . autoconf-mode) ("\\.m[4c]\\'" . m4-mode) ("\\.mf\\'" . metafont-mode) ("\\.mp\\'" . metapost-mode) ("\\.vhdl?\\'" . vhdl-mode) ("\\.article\\'" . text-mode) ("\\.letter\\'" . text-mode) ("\\.i?tcl\\'" . tcl-mode) ("\\.exp\\'" . tcl-mode) ("\\.itk\\'" . tcl-mode) ("\\.icn\\'" . icon-mode) ("\\.sim\\'" . simula-mode) ("\\.mss\\'" . scribe-mode) ("\\.f9[05]\\'" . f90-mode) ("\\.f0[38]\\'" . f90-mode) ("\\.indent\\.pro\\'" . fundamental-mode) ("\\.\\(pro\\|PRO\\)\\'" . idlwave-mode) ("\\.srt\\'" . srecode-template-mode) ("\\.prolog\\'" . prolog-mode) ("\\.tar\\'" . tar-mode) ("\\.\\(arc\\|zip\\|lzh\\|lha\\|zoo\\|[jew]ar\\|xpi\\|rar\\|cbr\\|7z\\|squashfs\\|ARC\\|ZIP\\|LZH\\|LHA\\|ZOO\\|[JEW]AR\\|XPI\\|RAR\\|CBR\\|7Z\\|SQUASHFS\\)\\'" . archive-mode) ("\\.oxt\\'" . archive-mode) ("\\.\\(deb\\|[oi]pk\\)\\'" . archive-mode) ("\\`/tmp/Re" . text-mode) ("/Message[0-9]*\\'" . text-mode) ("\\`/tmp/fol/" . text-mode) ("\\.oak\\'" . scheme-mode) ("\\.sgml?\\'" . sgml-mode) ("\\.x[ms]l\\'" . xml-mode) ("\\.dbk\\'" . xml-mode) ("\\.dtd\\'" . sgml-mode) ("\\.ds\\(ss\\)?l\\'" . dsssl-mode) ("\\.js[mx]?\\'" . javascript-mode) ("\\.har\\'" . javascript-mode) ("\\.json\\'" . js-json-mode) ("\\.[ds]?va?h?\\'" . verilog-mode) ("\\.by\\'" . bovine-grammar-mode) ("\\.wy\\'" . wisent-grammar-mode) ("\\.erts\\'" . erts-mode) ("[:/\\]\\..*\\(emacs\\|gnus\\|viper\\)\\'" . emacs-lisp-mode) ("\\`\\..*emacs\\'" . emacs-lisp-mode) ("[:/]_emacs\\'" . emacs-lisp-mode) ("/crontab\\.X*[0-9]+\\'" . shell-script-mode) ("\\.ml\\'" . lisp-mode) ("\\.ld[si]?\\'" . ld-script-mode) ("ld\\.?script\\'" . ld-script-mode) ("\\.xs\\'" . c-mode) ("\\.x[abdsru]?[cnw]?\\'" . ld-script-mode) ("\\.zone\\'" . dns-mode) ("\\.soa\\'" . dns-mode) ("\\.asd\\'" . lisp-mode) ("\\.\\(asn\\|mib\\|smi\\)\\'" . snmp-mode) ("\\.\\(as\\|mi\\|sm\\)2\\'" . snmpv2-mode) ("\\.\\(diffs?\\|patch\\|rej\\)\\'" . diff-mode) ("\\.\\(dif\\|pat\\)\\'" . diff-mode) ("\\.[eE]?[pP][sS]\\'" . ps-mode) ("\\.\\(?:PDF\\|EPUB\\|CBZ\\|FB2\\|O?XPS\\|DVI\\|OD[FGPST]\\|DOCX\\|XLSX?\\|PPTX?\\|pdf\\|epub\\|cbz\\|fb2\\|o?xps\\|djvu\\|dvi\\|od[fgpst]\\|docx\\|xlsx?\\|pptx?\\)\\'" . doc-view-mode-maybe) ("configure\\.\\(ac\\|in\\)\\'" . autoconf-mode) ("\\.s\\(v\\|iv\\|ieve\\)\\'" . sieve-mode) ("BROWSE\\'" . ebrowse-tree-mode) ("\\.ebrowse\\'" . ebrowse-tree-mode) ("#\\*mail\\*" . mail-mode) ("\\.g\\'" . antlr-mode) ("\\.mod\\'" . m2-mode) ("\\.ses\\'" . ses-mode) ("\\.docbook\\'" . sgml-mode) ("\\.com\\'" . dcl-mode) ("/config\\.\\(?:bat\\|log\\)\\'" . fundamental-mode) ("/\\.\\(authinfo\\|netrc\\)\\'" . authinfo-mode) ("\\.\\(?:[iI][nN][iI]\\|[lL][sS][tT]\\|[rR][eE][gG]\\|[sS][yY][sS]\\)\\'" . conf-mode) ("\\.la\\'" . conf-unix-mode) ("\\.ppd\\'" . conf-ppd-mode) ("java.+\\.conf\\'" . conf-javaprop-mode) ("\\.properties\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-javaprop-mode) ("\\.toml\\'" . conf-toml-mode) ("\\.desktop\\'" . conf-desktop-mode) ("/\\.redshift\\.conf\\'" . conf-windows-mode) ("\\`/etc/\\(?:DIR_COLORS\\|ethers\\|.?fstab\\|.*hosts\\|lesskey\\|login\\.?de\\(?:fs\\|vperm\\)\\|magic\\|mtab\\|pam\\.d/.*\\|permissions\\(?:\\.d/.+\\)?\\|protocols\\|rpc\\|services\\)\\'" . conf-space-mode) ("\\`/etc/\\(?:acpid?/.+\\|aliases\\(?:\\.d/.+\\)?\\|default/.+\\|group-?\\|hosts\\..+\\|inittab\\|ksysguarddrc\\|opera6rc\\|passwd-?\\|shadow-?\\|sysconfig/.+\\)\\'" . conf-mode) ("[cC]hange[lL]og[-.][-0-9a-z]+\\'" . change-log-mode) ("/\\.?\\(?:gitconfig\\|gnokiirc\\|hgrc\\|kde.*rc\\|mime\\.types\\|wgetrc\\)\\'" . conf-mode) ("/\\.mailmap\\'" . conf-unix-mode) ("/\\.\\(?:asound\\|enigma\\|fetchmail\\|gltron\\|gtk\\|hxplayer\\|mairix\\|mbsync\\|msmtp\\|net\\|neverball\\|nvidia-settings-\\|offlineimap\\|qt/.+\\|realplayer\\|reportbug\\|rtorrent\\.\\|screen\\|scummvm\\|sversion\\|sylpheed/.+\\|xmp\\)rc\\'" . conf-mode) ("/\\.\\(?:gdbtkinit\\|grip\\|mpdconf\\|notmuch-config\\|orbital/.+txt\\|rhosts\\|tuxracer/options\\)\\'" . conf-mode) ("/\\.?X\\(?:default\\|resource\\|re\\)s\\>" . conf-xdefaults-mode) ("/X11.+app-defaults/\\|\\.ad\\'" . conf-xdefaults-mode) ("/X11.+locale/.+/Compose\\'" . conf-colon-mode) ("/X11.+locale/compose\\.dir\\'" . conf-javaprop-mode) ("\\.~?[0-9]+\\.[0-9][-.0-9]*~?\\'" nil t) ("\\.\\(?:orig\\|in\\|[bB][aA][kK]\\)\\'" nil t) ("[/.]c\\(?:on\\)?f\\(?:i?g\\)?\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-mode-maybe) ("\\.[1-9]\\'" . nroff-mode) ("\\.art\\'" . image-mode) ("\\.avs\\'" . image-mode) ("\\.bmp\\'" . image-mode) ("\\.cmyk\\'" . image-mode) ("\\.cmyka\\'" . image-mode) ("\\.crw\\'" . image-mode) ("\\.dcr\\'" . image-mode) ("\\.dcx\\'" . image-mode) ("\\.dng\\'" . image-mode) ("\\.dpx\\'" . image-mode) ("\\.fax\\'" . image-mode) ("\\.heic\\'" . image-mode) ("\\.hrz\\'" . image-mode) ("\\.icb\\'" . image-mode) ("\\.icc\\'" . image-mode) ("\\.icm\\'" . image-mode) ("\\.ico\\'" . image-mode) ("\\.icon\\'" . image-mode) ("\\.jbg\\'" . image-mode) ("\\.jbig\\'" . image-mode) ("\\.jng\\'" . image-mode) ("\\.jnx\\'" . image-mode) ("\\.miff\\'" . image-mode) ("\\.mng\\'" . image-mode) ("\\.mvg\\'" . image-mode) ("\\.otb\\'" . image-mode) ("\\.p7\\'" . image-mode) ("\\.pcx\\'" . image-mode) ("\\.pdb\\'" . image-mode) ("\\.pfa\\'" . image-mode) ("\\.pfb\\'" . image-mode) ("\\.picon\\'" . image-mode) ("\\.pict\\'" . image-mode) ("\\.rgb\\'" . image-mode) ("\\.rgba\\'" . image-mode) ("\\.tga\\'" . image-mode) ("\\.wbmp\\'" . image-mode) ("\\.webp\\'" . image-mode) ("\\.wmf\\'" . image-mode) ("\\.wpg\\'" . image-mode) ("\\.xcf\\'" . image-mode) ("\\.xmp\\'" . image-mode) ("\\.xwd\\'" . image-mode) ("\\.yuv\\'" . image-mode) ("\\.tgz\\'" . tar-mode) ("\\.tbz2?\\'" . tar-mode) ("\\.txz\\'" . tar-mode) ("\\.tzst\\'" . tar-mode) ("\\.log\\(?:\\.[0-9]+\\)?\\'" . logview-mode) ("\\.drv\\'" . latex-mode))

***** black formatting args
:PROPERTIES:
:CREATED:  [2023-11-16 Thu 20:45]
:UPDATED:  [2024-02-17 Sat 17:12]
:ID:       6662a59b-42a0-4240-af44-d4e384e098a7
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(with-eval-after-load 'python-black
  (setq python-black--base-args '("--quiet" "-l 78" "--preview")))
#+end_src

#+RESULTS:
: ("--quiet" "-l 78" "--preview")

**** [[id:0c02b1ad-3964-4b51-ba59-d2de0e05428f][golang]]
:PROPERTIES:
:ID:       f38578c6-09c1-4da0-8da0-90e0899a2ab1
:CREATED:  [2022-03-30 Wed 11:59]
:UPDATED:  [2022-03-30 Wed 11:59]
:ROAM_EXCLUDE: t
:END:
***** [[id:0aea7eaa-6d92-4eac-b575-64cea859302c][golines: emacs: set =gofmt-command= to =golines=, > =gofmt=]]
:PROPERTIES:
:ID:       68efdd3b-c5d0-4358-8e19-5db46d0685c6
:CREATED:  [2022-03-30 Wed 12:01]
:UPDATED:  [2022-03-30 Wed 12:01]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref golang
(setq gofmt-command "golines")
#+end_src

***** [[id:b387816a-6048-4378-b2f6-a40fd82858c4][gofmt: emacs: before-save hook]]
:PROPERTIES:
:ID:       05c0788d-0df4-472f-920d-e21d0b68d0ad
:CREATED:  [2022-03-30 Wed 11:59]
:UPDATED:  [2022-03-31 Thu 09:40]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref golang
(add-hook 'go-mode-hook
          (lambda () (add-hook 'before-save-hook
                               'gofmt-before-save
                               nil 'local)))
#+end_src

***** noweb tangler
:PROPERTIES:
:ID:       83d3fafb-7891-4dd6-bbca-4a4b1ca2f042
:CREATED:  [2022-03-30 Wed 12:01]
:UPDATED:  [2022-03-30 Wed 12:01]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
;; NOWEB GOLANG START
(with-eval-after-load 'go-mode
  <<golang>>
  )
;; NOWEB GOLANG END
#+end_src
**** jq
:PROPERTIES:
:ID:       c2c34c3c-55e3-4854-b902-5ad11d3a58b4
:CREATED:  [2022-04-05 Tue 12:49]
:UPDATED:  [2022-04-05 Tue 12:49]
:ROAM_EXCLUDE: t
:END:

***** org-babel-default-header-args:jq
:PROPERTIES:
:ID:       eddd1740-904d-4bfe-becc-d662a43f0447
:CREATED:  [2022-04-05 Tue 12:49]
:UPDATED:  [2023-08-30 Wed 15:07]
:ROAM_EXCLUDE: t
:END:

it's nice to get a consistent wrap of the result

#+begin_src emacs-lisp :noweb-ref org
(setq org-babel-default-header-args:jq
      '((:results . "output")
        (:compact . "no")
        ;;(:wrap . "src json")
        ))
#+end_src

#+RESULTS:
: ((:results . "output") (:compact . "no"))

**** es-mode
:PROPERTIES:
:ID:       acd0dc77-8aae-4777-99ba-e1f39d2a03f5
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** choose
:PROPERTIES:
:ID:       46a9f275-2dc9-4a10-9641-224c3afa5415
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
****** es-choose-url
:PROPERTIES:
:ID:       8dba72bc-f72e-42b8-8e58-3c92b3aad47b
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref es
(defun qz/es-choose-url (&optional url backend env)
  (interactive)
  (and qz/debug (message "DEBUG qz/es-choose-url: %s"
                         (list url backend env)))
  (let* ((backend (qz/es-choose-backend backend))
         (url (or url
                  (and backend env
                       (qz/es-choose-env env)
                       (format qz/newstore-es-string backend env)))))
    (message "es-default-url: %s"
             (setq es-default-url
                   (or url (completing-read
                            "es-url: " qz/newstore-es-urls)))))
  es-default-url)

(defun qz/es-choose-backend (&optional backend)
  (interactive)
  (and qz/debug (message "DEBUG qz/es-choose-backend: %s" backend))
  (message "qz/newstore-es-backend-current: %s"
           (setq qz/newstore-es-backend-current
                 (or backend (completing-read "es-backend: " qz/newstore-es-backends))))
  qz/newstore-es-backend-current)

(defun qz/es-choose-env (&optional env)
  (interactive)
  (and qz/debug (message "DEBUG qz/es-choose-env: %s" env))
  (message "qz/newstore-es-env-current: %s"
           (setq qz/newstore-es-env-current
                 (or env (completing-read "es-env: " qz/newstore-envs))))
  qz/newstore-es-env-current)

(defun qz/test-es-ui (&optional url backend env)
  (setq qz/newstore-es-env-current nil
        qz/newstore-es-backend-current nil)
  (funcall-interactively 'qz/es-choose-url url backend env)
  (list
   qz/newstore-es-env-current
   qz/newstore-es-backend-current
   es-default-url))

;;(qz/test-es-ui)              ;; prompt, noset
;;(qz/test-es-ui nil)          ;; prompt, noset
;;(qz/test-es-ui nil nil)      ;; prompt, noset
;;(qz/test-es-ui nil nil nil)  ;; prompt, noset
;;(qz/test-es-ui nil 'kibana 'production)    ;; noprompt, set

#+end_src

#+RESULTS:
: qz/test-es-ui

****** es-choose-cookie-headers
:PROPERTIES:
:ID:       3afd3b6e-400a-49ba-a3bd-1f007531a257
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-07-08 Fri 10:59]
:END:
#+begin_src emacs-lisp :noweb-ref es
(defun qz/es-choose-cookie-headers ()
  "TODO"
  (interactive)
  (message
   "es-default-headers: %s"
   (setq es-default-headers `(("Content-Type" . "application/json; charset=UTF-8")
                              ("Cookie" . ,(format "ACCEZZIOCOOKIE=%s"
                                                   (read-from-minibuffer "es cookie: ")))))))
#+end_src

#+RESULTS:
: qz/es-choose-cookie-headers

***** noweb tangler
:PROPERTIES:
:ID:       43699aa6-0e26-487b-a597-902577ddf22a
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-05-25 Wed 12:35]
:END:
#+begin_src emacs-lisp
;; NOWEB ES START
(with-eval-after-load 'restclient
  <<es>>
  )
;; NOWEB ES END
#+end_src


****** settings
:PROPERTIES:
:ID:       8d39050f-25ab-45c0-8b58-bed537d895e3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref es
(setq es-default-url "https://elasticsearch-production.newstore.luminatesec.com"
      es-current-url es-default-url
      es-default-headers nil
      es-always-pretty-print t
      es-default-headers
      `(("Content-Type" . "application/json; charset=UTF-8")
        ("Cookie" . ,(format "ACCEZZIOCOOKIE=%s"
                             "11fdbe68-b0f3-4dd0-9894-f97afe3662dc"))))

(setq qz/newstore-es-string "https://%s-%s.newstore.luminatesec.com"
      qz/newstore-es-backends '(kibana elasticsearch)
      qz/newstore-es-backend-current nil
      qz/newstore-es-env-current nil
      qz/newstore-es-urls (cl-loop for env in qz/newstore-envs
                                   append (cl-loop for es-backend in qz/newstore-es-backends
                                                   collect (format qz/newstore-es-string es-backend env))))
#+end_src

#+RESULTS:
| https://kibana-sandbox.newstore.luminatesec.com | https://elasticsearch-sandbox.newstore.luminatesec.com | https://kibana-staging.newstore.luminatesec.com | https://elasticsearch-staging.newstore.luminatesec.com | https://kibana-production.newstore.luminatesec.com | https://elasticsearch-production.newstore.luminatesec.com |

**** restclient
:PROPERTIES:
:ID:       879159c8-76fa-4688-815f-7a4e186e203e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

***** choose
:PROPERTIES:
:ID:       ada7f597-ebc8-43f2-bc32-7cb09a31a088
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

****** restclient-choose-env
:PROPERTIES:
:ID:       b88fa094-45e8-4426-8ed8-cdd333afde7a
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref restclient
(defvar qz/restclient-env nil)

(defun qz/restclient-choose-env (&optional env)
  (interactive)
  (message "qz/restclient-env: %s"
           (setq qz/restclient-env
                 (cdr (assoc (intern (or env
                                         (completing-read "restclient-env: " qz/newstore-envs)))
                             qz/newstore-envs-abbrev))))
  qz/restclient-env)
#+end_src

#+RESULTS:
: qz/restclient-choose-env

****** restclient-choose-tenant
:PROPERTIES:
:ID:       7555ab8b-5c16-432e-bedb-1159b08b940a
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref restclient
(defvar qz/restclient-tenant nil)

(defun qz/restclient-choose-tenant (&optional tenant)
  (interactive)
  (message "qz/restclient-tenant: %s"
           (setq qz/restclient-tenant
                 (or tenant (completing-read
                             "restclient-tenant: " qz/newstore-tenants))))
  qz/restclient-tenant)
#+end_src

#+RESULTS:
: qz/restclient-choose-tenant
***** noweb tangler
:PROPERTIES:
:ID:       515b64aa-7f64-45dd-adb6-253e4a24f387
:CREATED:  [2022-04-20 Wed 15:14]
:UPDATED:  [2022-04-22 Fri 12:05]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
;; NOWEB RESTCLIENT START
(with-eval-after-load 'restclient
  <<restclient>>
  )
;; NOWEB RESTCLIENT END
#+end_src
***** token
:PROPERTIES:
:ID:       7136479f-df01-4628-b15d-c5878b4e45bf
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-20 Wed 15:15]
:END:

#+begin_src emacs-lisp :noweb-ref restclient
(defvar qz/restclient-token nil)
(defvar qz/restclient-token-field 'access_token)

(defun qz/restclient-hook ()
  "Update token from a request."
  ;; url is visible while the hook is running.
  (let ((result))
    (save-excursion
      (cond
       ((string-suffix-p "/token" url)
        (condition-case nil
            (progn
              (setq result (cdr (assoc qz/restclient-token-field (json-read))))
              (when (stringp result)
                (progn
                  (setq qz/restclient-token result)
                  (message (concat "stored token: " qz/restclient-token)))))
          (error (message "That wasn't cleanly handled."))))))))

(add-hook 'restclient-response-loaded-hook 'qz/restclient-hook)
(provide 'restclient-hooks)
#+end_src

#+RESULTS:
: restclient-hooks

**** magit
:PROPERTIES:
:ID:       797bc5e1-ca1f-4e1b-abc3-e7bbef7423b8
:CREATED:  [2022-11-01 Tue 18:51]
:UPDATED:  [2022-11-01 Tue 18:51]
:ROAM_EXCLUDE: t
:END:

***** magit-project-status
:PROPERTIES:
:ID:       818d180a-ff9f-4012-bf2c-3e7acca048b7
:CREATED:  [2022-11-01 Tue 18:51]
:UPDATED:  [2022-11-08 Tue 13:43]
:ROAM_EXCLUDE: t
:END:

this gets clobbered from RDE

#+begin_src emacs-lisp
(setq magit-bind-magit-project-status t)
(with-eval-after-load 'project
  (with-eval-after-load 'magit
    ;; Only more recent versions of project.el have `project-prefix-map' and
    ;; `project-switch-commands', though project.el is available in Emacs 25.
    (when (and magit-bind-magit-project-status
               (boundp 'project-prefix-map))
      (unless ;; Only modify if it hasn't already been modified.
          (equal project-switch-commands
                 (eval (car (get 'project-switch-commands 'standard-value))
                       t))
        (message "qz: setting magit-project-status, but project-switch-commands has been changed already"))
      (progn
        (define-key project-prefix-map "m" 'magit-project-status)
        (add-to-list 'project-switch-commands '(magit-project-status "Magit") t)))))
#+end_src

#+RESULTS:
| project-find-file    | Find file      |
| project-find-regexp  | Find regexp    |
| project-find-dir     | Find directory |
| project-vc-dir       | VC-Dir         |
| project-eshell       | Eshell         |
| project-compile      | Compile        |
| magit-project-status | Magit          |

***** use magit-todos-mode
:PROPERTIES:
:ID:       e66f0f4e-9e42-4492-8629-4d6e06164abe
:CREATED:  [2023-07-07 Fri 17:49]
:UPDATED:  [2023-07-07 Fri 17:49]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(with-eval-after-load 'magit
  (if (fboundp 'magit-todos-mode)
      (funcall 'magit-todos-mode)
    (message "qz: config :: magit-todos-mode is not loaded")))
#+end_src

#+RESULTS:
: t

**** shell | (ba|z|fi)?sh
:PROPERTIES:
:ID:       40701551-041c-4b72-84dd-e5434edbb529
:CREATED:  [2023-03-14 Tue 17:43]
:UPDATED:  [2023-03-14 Tue 17:43]
:ROAM_EXCLUDE: t
:END:

***** org-babel-default-header-args:shell
:PROPERTIES:
:ID:       d2fb4f7c-d760-4fb2-bc3d-2847a3fe97e4
:CREATED:  [2023-03-14 Tue 17:44]
:UPDATED:  [2023-03-14 Tue 17:44]
:ROAM_EXCLUDE: t
:END:

I have manually typed this out so fucking much it's not even funny.  Here I am
at [2023-03-14 Tue 17:43] finally writing it to my config hahaha

#+begin_src shell
rg 'src.(shell|bash|sh).*drawer' $HOME/life/roam | wc -l
#+end_src

#+RESULTS:

#+begin_src emacs-lisp :noweb-ref org
(setq org-babel-default-header-args:shell '((:results . "drawer"))
      org-babel-default-header-args:sh org-babel-default-header-args:shell
      org-babel-default-header-args:bash org-babel-default-header-args:shell
      org-babel-default-header-args:zsh org-babel-default-header-args:shell)
#+end_src

#+RESULTS:
: ((:results . drawer))

**** js
:PROPERTIES:
:ID:       67001cd6-c880-494f-ac0e-d6423ec97c36
:END:

***** js-indent-level
:PROPERTIES:
:ID:       cc5d7bfe-c721-4f21-9c4a-76149acd0513
:UPDATED:  [2023-08-24 Thu 14:14]
:END:

this is nice at =2=, matching the defaults of 'json-pretty-print.

#+begin_src emacs-lisp
(setq js-indent-level 2)
#+end_src

#+RESULTS:
: 2

*** packages
:PROPERTIES:
:ID:       2fa9d7ef-cfd9-4d3c-aca8-09e1d6243705
:CREATED:  [2022-09-28 Wed 16:36]
:UPDATED:  [2022-09-28 Wed 16:36]
:ROAM_EXCLUDE: t
:END:
**** chatgpt-shell
:PROPERTIES:
:ID:       7c74478a-1c1a-4bb3-8b13-04a30da500dc
:CREATED:  [2023-04-21 Fri 16:10]
:UPDATED:  [2024-02-17 Sat 09:29]
:ROAM_EXCLUDE: t
:END:

- :: https://github.com/xenodium/chatgpt-shell

#+begin_src emacs-lisp :results silent
(with-eval-after-load 'chatgpt-shell
  (setq chatgpt-shell-openai-key
        (auth-source-pass-get 'secret "chatgpt/api/emacs")
        dall-e-shell-openai-key chatgpt-shell-openai-key))

#+end_src
**** gptel
:PROPERTIES:
:CREATED:  [2024-02-17 Sat 09:29]
:UPDATED:  [2024-02-17 Sat 09:29]
:ID:       d93ae918-8cf5-466d-a933-b64f222397d2
:ROAM_EXCLUDE: t
:END:
***** tangler
:PROPERTIES:
:CREATED:  [2024-02-17 Sat 09:53]
:UPDATED:  [2024-02-20 Tue 16:08]
:ID:       dc3669a8-debf-4b99-a931-6a56abffe46c
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :results silent
(with-eval-after-load 'gptel
  <<gptel>>
  )
#+end_src

***** secrets
:PROPERTIES:
:CREATED:  [2024-02-17 Sat 09:44]
:UPDATED:  [2024-02-17 Sat 09:44]
:ID:       75b67fd7-43d5-4d58-a9df-69699a7947bf
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :results silent :noweb-ref gptel
(setq gptel-api-key
      (lambda () (auth-source-pass-get 'secret "chatgpt/api/emacs")))
#+end_src
***** programmatic
:PROPERTIES:
:CREATED:  [2024-02-17 Sat 09:44]
:UPDATED:  [2024-02-17 Sat 09:44]
:ID:       c9ca21eb-b4a8-4f05-ba6a-9118fdf79084
:ROAM_EXCLUDE: t
:END:
- https://github.com/karthink/gptel/wiki
****** example from wiki
:PROPERTIES:
:CREATED:  [2024-02-17 Sat 09:44]
:UPDATED:  [2024-02-17 Sat 09:44]
:ID:       f76d0fc7-2870-40b1-b286-712cd4b232e4
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref null :eval no
(gptel-request
 "my prompt"                                 ;the prompt to send to ChatGPT
 ;; The below keys are all optional
 :buffer   some-buffer-or-name              ;defaults to (current-buffer)
 :system   "Chat directive here"            ;defaults to gptel--system-message
 :position some-pt                          ;defaults to (point)
 :context  (list "any other info")          ;will be available to the callback
 :callback (lambda (response info) ...))    ;called with the response and an info plist
                                        ;defaults to inserting the response at :position
#+end_src
***** org by default (obviously)
:PROPERTIES:
:CREATED:  [2024-02-18 Sun 17:39]
:UPDATED:  [2024-02-18 Sun 17:39]
:ID:       e45cab65-6191-4bf7-8e99-8fada3a6747f
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref gptel
(setq gptel-default-mode 'org-mode)
#+end_src

#+RESULTS:
: org-mode

***** other backends
:PROPERTIES:
:CREATED:  [2024-02-17 Sat 09:53]
:UPDATED:  [2024-02-17 Sat 09:53]
:ID:       71fa9410-6470-442c-9ecf-52a9a317af1d
:ROAM_EXCLUDE: t
:END:
****** llamafile
:PROPERTIES:
:CREATED:  [2024-02-17 Sat 09:53]
:UPDATED:  [2024-02-17 Sat 10:40]
:ID:       bfde002b-4383-4e86-ac16-5a70455a08bc
:ROAM_EXCLUDE: t
:END:

this backend simply looks at 8080, the default port for llamafile.

it will therefore interface with any model.

#+begin_src emacs-lisp :noweb-ref gptel
;; Llama.cpp offers an OpenAI compatible API
(gptel-make-openai "llama-cpp"          ;Any name
                   :stream t                             ;Stream responses
                   :protocol "http"
                   :host "localhost:8080"                ;Llama.cpp server location
                   :models '("test"))                    ;Any names, doesn't matter for Llama
#+end_src

#+RESULTS:
: #s(gptel-openai "llama-cpp" "localhost:8080" nil "http" t "/v1/chat/completions" nil ("test") "http://localhost:8080/v1/chat/completions")
******* choosing a llamafile to run
:PROPERTIES:
:CREATED:  [2024-02-17 Sat 10:40]
:UPDATED:  [2024-02-17 Sat 11:03]
:ID:       1e2e03a6-0adc-4c5a-889b-aad7a9b0b3e8
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(setq qz/llamafile-args
      '(;; gpu offload
        "-ngl 9999"
        ;;"--nobrowser"
        ))

(defun qz/llamafile ()
  (interactive)
  (async-shell-command
   (format "%s %s"
           ;; choose model,
           (cadr (s-split
                  "	" (completing-read
                           "model: " (s-split "\n" (s-trim (shell-command-to-string
                                                            "du -sh ~/dl/*.llamafile"))))))
           ;; args
           (s-join " " qz/llamafile-args))
   "*process:llamafile*"))
#+end_src

#+RESULTS:
: qz/llamafile
****** gemini
:PROPERTIES:
:CREATED:  [2024-02-18 Sun 17:26]
:UPDATED:  [2024-02-18 Sun 17:26]
:ID:       9f685134-4cc0-441b-999d-95aaf7195d71
:ROAM_EXCLUDE: t
:END:

******* custom gemini constructor for aiplatform
:PROPERTIES:
:CREATED:  [2024-02-19 Mon 09:31]
:UPDATED:  [2024-02-20 Tue 16:09]
:ID:       378f883a-9cf0-4867-810b-3c66192ffa5f
:ROAM_EXCLUDE: t
:END:
 #+begin_src emacs-lisp :noweb-ref null :results silent
 (require 'gptel-gemini)
 (cl-defun qz/gptel-make-gemini
     (name &key header key stream
           (host "generativelanguage.googleapis.com")
           (protocol "https")
           (models '("gemini-pro"))
           (endpoint "/v1beta/models/gemini-pro:"))

   "Register a Gemini backend for gptel with NAME.

  Keyword arguments:

  HOST (optional) is the API host, defaults to
  \"generativelanguage.googleapis.com\".

  MODELS is a list of available model names.  Currently only
  \"gemini-pro\" is available.

  STREAM is a boolean to enable streaming responses, defaults to
  false.

  PROTOCOL (optional) specifies the protocol, \"https\" by default.

  ENDPOINT (optional) is the API endpoint for completions, defaults to
  \"/v1beta/models/gemini-pro:streamGenerateContent\" if STREAM is true and
  \"/v1beta/models/gemini-pro:generateContent\" otherwise.

  HEADER (optional) is for additional headers to send with each
  request. It should be an alist or a function that retuns an
  alist, like:
  ((\"Content-Type\" . \"application/json\"))

  KEY (optional) is a variable whose value is the API key, or
  function that returns the key."
   (let ((backend (gptel--make-gemini
                   :name name
                   :host host
                   :header header
                   :models models
                   :protocol protocol
                   :endpoint endpoint
                   :stream stream
                   :key key
                   :url
                   (lambda ()
                     (concat protocol "://" host endpoint
                             (if gptel-stream
                                 "streamGenerateContent"
                               "generateContent"))))))
     (prog1 backend
       (setf (alist-get name gptel--known-backends
                        nil nil 'equal)
             backend))))
#+end_src
******* TODO check debug utils from gptel
:PROPERTIES:
:CREATED:  [2024-02-18 Sun 18:40]
:UPDATED:  [2024-02-18 Sun 18:40]
:ID:       cddf8e4b-003e-4a48-b54c-41586d11a79b
:ROAM_EXCLUDE: t
:END:
******* TODO check header generation code
:PROPERTIES:
:CREATED:  [2024-02-18 Sun 18:40]
:UPDATED:  [2024-02-20 Tue 16:08]
:ID:       65a0e9db-d7e1-4982-8876-436f057cf5bd
:ROAM_EXCLUDE: t
:END:

- endpoint :: v1/projects/${PROJECT_ID}/locations/${LOCATION_ID}/publishers/google/models/${MODEL_ID}:streamGenerateContent
- code: gemini :: [[file:/gnu/store/4332r56wnlqbd490n9hnnid5zpbk5axy-emacs-gptel-0.6.0/share/emacs/site-lisp/gptel-0.6.0/gptel-gemini.el::(cl-defun gptel-make-gemini][gptel-gemini.el::cl-defun gptel-make-gemini]]
- code: chatgpt :: [[file:/gnu/store/4332r56wnlqbd490n9hnnid5zpbk5axy-emacs-gptel-0.6.0/share/emacs/site-lisp/gptel-0.6.0/gptel.el::(gptel-make-openai][gptel.el::(gptel-make-openai]]
*******


#+begin_src emacs-lisp :noweb-ref null :results silent
(qz/gptel-make-gemini
 "Gemini"
 ;; TOKEN
 ;; vs
 ;; "Authorization: Bearer $(gcloud auth print-access-token)"
 ;;  https://ai.google.dev/tutorials/setup
 :header (lambda () `(("Authorization" . ,(concat "Bearer " (gptel--get-api-key)))))
 :key (lambda () (s-trim (shell-command-to-string
                          "$(gcloud auth print-access-token)")))
 :stream t
 ;;
 :host "us-central1-aiplatform.googleapis.com"
 :endpoint
 (format "v1/projects/%s/locations/%s/publishers/google/models/%s:"
         "s-t-dre-svc-62ef" "us-central1" "gemini-pro"))
 #+end_src

**** consult
:PROPERTIES:
:ID:       969bce5f-b959-496e-afe4-81f2407592f3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

***** noweb tangler
:PROPERTIES:
:ID:       2c2c7344-4b82-4f3e-9b52-f64699a295c3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
;; NOWEB CONSULT START
(with-eval-after-load 'consult
  <<consult>>
  )
;; NOWEB CONSULT END
#+end_src

***** consult-ripgrep-files                                                    :func:
:PROPERTIES:
:ID:       d047d7c0-1031-42b8-b86a-0bcfbb30901a
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

not elegant AT ALL, but the API to ripgrep from consult uses
'default-directory', so suck it up

#+begin_src emacs-lisp :noweb-ref consult
(require 's)

(defun qz/consult-ripgrep-files (files)
  (let* ((consult-ripgrep-args (concat consult-ripgrep-args " -L"))
         (rg-dir "/tmp/null"))
    (f-delete rg-dir t)
    (mkdir rg-dir t)
    (mapcar (lambda (f)
              (f-symlink (expand-file-name f)
                         (format "%s/%s-%s"
                                 rg-dir (gensym) (s-replace "/" "-" f))))
            files)
    (consult-ripgrep rg-dir)))
#+end_src

#+RESULTS:
: qz/consult-ripgrep-files

***** {C-c b s}     :: consult-ripgrep-bookmark                            :func:kbd:
:PROPERTIES:
:ID:       1ec5c6fe-e672-457a-ab67-82e358244df3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

consuming

#+begin_src emacs-lisp :noweb-ref consult
(defun qz/consult-ripgrep-bookmark ()
  (interactive)
  (let ((files (mapcar (lambda (b) (cdr (assoc 'filename b)))
                       bookmark-alist)))
    (qz/consult-ripgrep-files files)))

(define-key global-map (kbd "C-c b s") 'qz/consult-ripgrep-bookmark)
#+end_src

#+RESULTS:
: qz/consult-ripgrep-bookmark

***** {C-x C-M-SPC} :: consult-mark
:PROPERTIES:
:ID:       a4470ca2-9b0e-4ab4-a1d0-32b86da18abd
:CREATED:  [2022-03-31 Thu 11:07]
:UPDATED:  [2022-03-31 Thu 11:08]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref consult
(define-key global-map (kbd "C-x C-M-SPC") 'consult-global-mark)
#+end_src

***** {M-s L}       :: consult-line-multi
:PROPERTIES:
:ID:       5778ec90-f568-48d3-87cb-9dae958ceeb9
:CREATED:  [2022-11-17 Thu 13:09]
:UPDATED:  [2022-11-17 Thu 13:09]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref kbd
(define-key global-map (kbd "M-s L") 'consult-line-multi)
#+end_src

#+RESULTS:
: consult-line-multi

***** {C-c C-j}     :: consult-imenu
:PROPERTIES:
:ID:       cc85169e-c54b-4841-bda7-6c3d189c0b34
:CREATED:  [2023-04-25 Tue 19:54]
:UPDATED:  [2023-04-25 Tue 19:54]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref kbd
(define-key global-map (kbd "C-c C-j") 'consult-imenu)
#+end_src

#+RESULTS:
: consult-imenu

***** {C-c n C-s}   :: consult-org-agenda-dailies
:PROPERTIES:
:ID:       d0a6fa7a-8e86-4384-926a-d590972f9af6
:CREATED:  [2023-08-28 Mon 15:32]
:UPDATED:  [2023-08-28 Mon 15:37]
:ROAM_EXCLUDE: t
:END:

nice!!!  jump around headings of recent dailies files (where i do most of my thinking)

#+begin_src elisp
(defun qz/consult-org-agenda-dailies ()
  (interactive)
  (let ((org-agenda-files (s-split "\n" (s-trim (shell-command-to-string "

find $HOME/life/roam/daily -type f -name '*.org' -printf '%T+\t%p\n' \
  | sort | tail -n30 \
  | awk '{print $2}'

")))))
    (consult-org-agenda)))

(define-key global-map (kbd "C-c n C-s") 'qz/consult-org-agenda-dailies)
#+end_src

***** consult--fontify-all as interactive
:PROPERTIES:
:ID:       64723a95-781d-4dd7-9273-04882e295203
:CREATED:  [2023-07-04 Tue 11:14]
:UPDATED:  [2023-07-04 Tue 16:09]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
;;; SRC as of [2023-07-04 Tue 11:12]
;;
;; (defun consult--fontify-all ()
;;   "Ensure that the whole buffer is fontified."
;;   ;; Font-locking is lazy, i.e., if a line has not been looked at yet, the line
;;   ;; is not font-locked.  We would observe this if consulting an unfontified
;;   ;; line.  Therefore we have to enforce font-locking now, which is slow.  In
;;   ;; order to prevent is hang-up we check the buffer size against
;;   ;; `consult-fontify-max-size'.
;;   (when (and consult-fontify-preserve jit-lock-mode
;;              (< (buffer-size) consult-fontify-max-size))
;;     (jit-lock-fontify-now)))

(defun qz/fontify-all ()
  "Useful when using org-modern, which is *abhorrent* when
 partially font-locked"
  (interactive)
  (consult--fontify-all))
#+end_src

#+RESULTS:
: qz/fontify-all

***** recoll
:PROPERTIES:
:ID:       27a44696-4cf0-47d2-82b2-b830a61cf8f0
:CREATED:  [2023-03-04 Sat 12:33]
:UPDATED:  [2023-03-04 Sat 12:33]
:ROAM_EXCLUDE: t
:END:

****** fixing command inflexibility
:PROPERTIES:
:ID:       3ea06024-8456-4736-b458-05dd9c2aad1d
:CREATED:  [2023-03-04 Sat 12:33]
:UPDATED:  [2023-03-04 Sat 12:33]
:ROAM_EXCLUDE: t
:END:

recollq is not a binary, from how we (guix) build it.

sadly there is no variable =consult-recoll-program=, and =codeberg=... ???? so
we're hacking it the hard way

#+begin_src emacs-lisp
;; original, as of commit TODO
;;
;; (defun consult-recoll--command (text)
;;   "Command used to perform queries for TEXT."
;;   (setq consult-recoll--current nil)
;;   (setq consult-recoll--index 0)
;;   (setq consult-recoll--snippets nil)
;;   `("recoll" ,@(consult-recoll--search-flags) ,text))
;;
;; we need to add the -t arg (to make it exactly like recollq)

(defun consult-recoll--command (text)
  "Command used to perform queries for TEXT."
  (setq consult-recoll--current nil)
  (setq consult-recoll--index 0)
  (setq consult-recoll--snippets nil)
  `("recoll" "-t" ,@(consult-recoll--search-flags) ,text))
#+end_src

#+RESULTS:
: consult-recoll--command

******* tracing
:PROPERTIES:
:ID:       3d2cca36-536d-4a6e-bb45-be6b54fe13ae
:CREATED:  [2023-03-04 Sat 12:33]
:UPDATED:  [2023-03-04 Sat 12:33]
:ROAM_EXCLUDE: t
:END:


#+begin_src emacs-lisp :noweb-ref null
(trace-function 'consult-recoll--command)
;; (call-interactively 'toggle-debug-on-quit)

;; (setq consult-recoll--search-flags 'query)
;; (consult-recoll "ayo")

(custom-set-variables '(consult-recoll--search-flags 'query))
consult-recoll--search-flags
(consult-recoll "customer care order")

(untrace-all)
#+end_src


***** project-commands
:PROPERTIES:
:ID:       16928472-fd8f-4fe9-9c12-6144d5c05998
:CREATED:  [2022-11-14 Mon 12:27]
:UPDATED:  [2022-11-14 Mon 12:29]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref consult
(with-eval-after-load 'project
  (define-key project-prefix-map (kbd "M-g") 'consult-ripgrep)
  (add-to-list 'project-switch-commands '(consult-ripgrep "ripgrep") t))
#+end_src

#+RESULTS:
| project-find-file    | Find file      |
| project-find-regexp  | Find regexp    |
| project-find-dir     | Find directory |
| project-vc-dir       | VC-Dir         |
| project-eshell       | Eshell         |
| project-compile      | Compile        |
| magit-project-status | Magit          |
| consult-ripgrep      | ripgrep        |

***** basic remaps
:PROPERTIES:
:ID:       0209d41e-b385-4428-a6c5-a95929250975
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-03-31 Thu 11:08]
:END:
#+begin_src emacs-lisp :noweb-ref consult
(mapcar (lambda (bind)
          (define-key global-map (kbd (car bind)) (cadr bind)))
        '(("C-x b" consult-buffer)))
#+end_src

#+RESULTS:
| consult-buffer |

**** dogears
:PROPERTIES:
:ID:       8391d31e-023a-4c80-b19c-47fbb2def264
:CREATED:  [2023-04-12 Wed 18:11]
:UPDATED:  [2023-04-16 Sun 15:49]
:ROAM_EXCLUDE: t
:END:

***** init
:PROPERTIES:
:ID:       759bd7c8-702d-4358-8c43-bc8fe048545d
:CREATED:  [2023-05-03 Wed 11:39]
:UPDATED:  [2023-05-03 Wed 11:39]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref null
(require 'dogears)
(dogears-mode 1)
#+end_src

***** dogear upon org-store-link
:PROPERTIES:
:ID:       1c1c6905-2462-4aa2-a805-de40854fa3af
:CREATED:  [2023-05-03 Wed 11:39]
:UPDATED:  [2023-06-19 Mon 17:19]
:ROAM_EXCLUDE: t
:END:


#+begin_src emacs-lisp :noweb-ref null
;; FIXME this shit is broken -- org-store-link
(defun dogears-safe (&rest ignored)
  (save-mark-and-excursion
    (dogears-remember)))

(qz/advice- org-store-link :after dogear-safe)

;; (progn (toggle-debug-on-error) (call-interactively 'org-store-link))
#+end_src

#+RESULTS:
| qz/advice-enable--org-store-link--dogear-safe | qz/advice-disable--org-store-link--dogear-safe |

****** why org-store-link doesn't play nicely with advice?
:PROPERTIES:
:ID:       53e02e0b-e8db-4fa4-a4bc-12e20d03e17a
:CREATED:  [2023-06-19 Mon 18:41]
:UPDATED:  [2023-06-19 Mon 18:41]
:ROAM_EXCLUDE: t
:END:

#+begin_src elisp :noweb-ref null
(defun qz/safe (&rest ignored)
  )



(qz/advice- org-store-link :after qz/safe)
#+end_src

#+RESULTS:
| qz/advice-enable--org-store-link--qz/safe | qz/advice-disable--org-store-link--qz/safe |

**** embark
:PROPERTIES:
:ID:       dfab35d0-222c-4d67-82d8-07a2d068a597
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** noweb tangler
:PROPERTIES:
:ID:       0336dc83-f896-4b36-9f70-c1784b997019
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
;; NOWEB EMBARK START
<<embark-hoist>>
(with-eval-after-load 'embark
  <<embark>>
  )
;; NOWEB EMBARK END
#+end_src

***** {C-.}            :: embark-act                                            :kbd:
:PROPERTIES:
:ID:       8234c6dc-773a-4da2-8e8a-e96970f8c47f
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2024-02-01 Thu 15:16]
:END:
#+begin_src emacs-lisp :noweb-ref embark-hoist
(define-key global-map (kbd "C-.") 'embark-act)
#+end_src

#+RESULTS:
: embark-act

***** {C-M-n}, {C-M-p} :: embark-select-and-[next|previous]                     :kbd:
:PROPERTIES:
:ID:       8a00fc8c-1be0-4f6f-8c5e-9b9018f65298
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED: [2024-02-01 Thu 15:16]
:END:


#+begin_src emacs-lisp :noweb-ref embark
;;; https://www.reddit.com/r/emacs/comments/pac8kp/how_to_send_an_embark_command_without_pulling_up/
;;; (defun shell-command-on-current-completion-candidate ()
;;;   (interactive)
;;;   (embark--act 'shell-command (car (embark--targets))))

(defun qz/example-embark-act-arbitrary ()
  (interactive)
  (embark--act 'shell-command (car (embark--targets))))

(defun qz/embark-select-and-next ()
  (interactive)
  (call-interactively 'embark-select)
  (call-interactively 'vertico-next))
(defun qz/embark-select-and-previous ()
  (interactive)
  (call-interactively 'embark-select)
  (call-interactively 'vertico-previous))

(define-key minibuffer-mode-map (kbd "C-M-n") 'qz/embark-select-and-next)
(define-key minibuffer-mode-map (kbd "C-M-p") 'qz/embark-select-and-previous)
#+end_src

**** eww
:PROPERTIES:
:ID:       05495ea8-2e30-4fb2-839c-0f91a347bb25
:CREATED:  [2023-07-05 Wed 10:12]
:UPDATED:  [2023-07-05 Wed 10:12]
:ROAM_EXCLUDE: t
:END:

***** {C-RET} :: eww-open-in-new-buffer
:PROPERTIES:
:ID:       eb34e4cb-5a88-4166-add1-bd1970667e89
:CREATED:  [2023-07-05 Wed 10:12]
:UPDATED:  [2023-07-05 Wed 10:12]
:ROAM_EXCLUDE: t
:END:

By default, this is clobbered by 'hkey-either.

#+begin_src emacs-lisp
(with-eval-after-load 'eww
  (define-key eww-mode-map (kbd "C-<return>") 'eww-open-in-new-buffer)
  )
#+end_src

#+RESULTS:
: eww-open-in-new-buffer

**** git-gutter-transient
:PROPERTIES:
:ID:       59a2a735-af5e-4401-a55c-78ae28a133f2
:CREATED:  [2023-05-03 Wed 13:26]
:UPDATED:  [2023-05-03 Wed 13:26]
:ROAM_EXCLUDE: t
:END:

***** noweb-tangler
:PROPERTIES:
:ID:       6074ff3a-a5c5-46ad-9f68-a07318e57a9b
:CREATED:  [2023-05-03 Wed 18:21]
:UPDATED:  [2023-05-03 Wed 18:31]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(with-eval-after-load 'git-gutter-transient
  <<git-gutter>>
)
#+end_src

***** Add magit-commit
:PROPERTIES:
:ID:       0261fbe2-6485-458f-8480-c625b24197cc
:CREATED:  [2023-05-03 Wed 13:27]
:UPDATED:  [2023-05-03 Wed 18:34]
:ROAM_EXCLUDE: t
:END:


#+begin_src emacs-lisp :noweb-ref git-gutter
(defun git-gutter-transient:magit-commit ()
  "Close hunk buffer and call `magit-file-dispatch'."
  (interactive)
  (git-gutter-transient:quit)
  (magit-commit))

(defun git-gutter-transient:stage-magit-commit ()
  "Close hunk buffer and call `magit-file-dispatch'."
  (interactive)
  (git-gutter-transient:quit)
  (cl-letf (((symbol-function 'yes-or-no-p) (lambda (&rest args) t))
            ((symbol-function 'y-or-n-p) (lambda (&rest args) t)))
    (git-gutter:stage-hunk))
  (magit-commit))


(let ((end (- (length (nth 3 (seq--into-list
                              (transient-get-suffix  'git-gutter-transient
                                                     '(0)))))
              1)))
  ;; ... seems a totally goofy way to simply push stuff to the end
  ;; of a list...
  (transient-append-suffix 'git-gutter-transient `(0 ,end)
    (vector '("c" "Commit" git-gutter-transient:magit-commit)))
  (transient-append-suffix 'git-gutter-transient `(0 ,(+ 1 end))
    (vector '("C" "Stage & Commit" git-gutter-transient:stage-magit-commit))))
#+end_src

#+RESULTS:
| [1 transient-column nil ((1 transient-suffix (:key C :description Stage & Commit :command git-gutter-transient:stage-magit-commit)))] |


***** show diff when popping up
:PROPERTIES:
:ID:       45c9ebe8-5220-4d7f-8c01-1bc3a71e2ead
:CREATED:  [2023-05-03 Wed 18:21]
:UPDATED:  [2023-05-07 Sun 17:29]
:ROAM_EXCLUDE: t
:END:

this is amazing!!!!

#+begin_src emacs-lisp :noweb-ref git-gutter
(defun qz/git-gutter:popup-hunk ()
  (interactive)
  (ignore-errors (git-gutter:popup-hunk)))

(qz/advice- git-gutter-transient :after qz/git-gutter:popup-hunk)
#+end_src

#+RESULTS:
| qz/advice-enable--git-gutter-transient--qz/git-gutter:popup-hunk | qz/advice-disable--git-gutter-transient--qz/git-gutter:popup-hunk |

***** filter timestamp writes when reverting (avoid circular writing)
:PROPERTIES:
:ID:       2f59c06e-6f3e-425c-aa8f-ff4330a7a3a7
:CREATED:  [2023-05-03 Wed 18:45]
:UPDATED:  [2023-05-03 Wed 18:51]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref git-gutter
(defun qz/filter--updated-timestamp (orig-fun &rest R)
  (let ((before-save-hook (remove 'qz/org-roam--updated-timestamp
                                  before-save-hook)))
    (funcall orig-fun)))

(qz/advice- git-gutter:revert-hunk :around qz/filter--updated-timestamp)
#+end_src

#+RESULTS:
| qz/advice-enable--git-gutter:revert-hunk--qz/filter--updated-timestamp | qz/advice-disable--git-gutter:revert-hunk--qz/filter--updated-timestamp |

***** get hunks around point
:PROPERTIES:
:ID:       927246c3-3ca0-4162-8f1b-27eaab48d7fd
:CREATED:  [2023-05-07 Sun 17:36]
:UPDATED:  [2023-05-10 Wed 12:23]
:END:

the scope of [[id:a7be4fdd-eead-4590-9ab7-765605ea1b84][git-gutter:popup-hunk]] will only address the current line.

if i have changed near the point, and hit the gutter I am probably interested
in stuff near the point.

to ease the precision required in this spirit, jump me (in order of
preference) backwards or forwards if there's a change within =N= lines.

the current implementation from [[id:70371eff-c009-4546-8ce5-543e36e28419][git-gutter:search-here-diffinfo]] goes like
this:

#+name: current-hunk-detection code
#+begin_src emacs-lisp :noweb-ref null
(cl-loop with current-line = (line-number-at-pos)
         for diffinfo in git-gutter:diffinfos
         for start = (git-gutter-hunk-start-line diffinfo)
         for end   = (or (git-gutter-hunk-end-line diffinfo) (+ 1 start))
         when (and (>= current-line start) (<= current-line end))
         return diffinfo
         finally do (error "Here is not changed!!"))
#+end_src

this is a very verbose way of returning the first hunk which is at point.
Running this code as I'm writing this very prose[fn:5], yields:

#+RESULTS: current-hunk-detection code
#+begin_example
#s(git-gutter-hunk added "@@ -6700,0 +6876,33 @@ this is amazing!!!!
+***** get hunks around point
+:PROPERTIES:
+:ID:       927246c3-3ca0-4162-8f1b-27eaab48d7fd
+:CREATED:  [2023-05-07 Sun 17:36]
+:UPDATED:  [2023-05-07 Sun 17:38]
+:END:
+
+the scope of [[id:a7be4fdd-eead-4590-9ab7-765605ea1b84][git-gutter:popup-hunk]] will only address the current line.
+
+if i have changed near the point, and hit the gutter I am probably interested
+in stuff near the point.
+
+to ease the precision required in this spirit, jump me (in order of
+preference) backwards or forwards if there's a change within =N= lines.
+
+the current implementation from [[id:70371eff-c009-4546-8ce5-543e36e28419][git-gutter:search-here-diffinfo]] goes like
+this:
+
+#+name: current-hunk-detection code
+#+begin_src emacs-lisp
+(cl-loop with current-line = (line-number-at-pos)
+         for diffinfo in git-gutter:diffinfos
+         for start = (git-gutter-hunk-start-line diffinfo)
+         for end   = (or (git-gutter-hunk-end-line diffinfo) (+ 1 start))
+         when (and (>= current-line start) (<= current-line end))
+         return diffinfo
+         finally do (error \"Here is not changed!!\"))
+#+end_src
+
+this is a very verbose way of returning the first hunk which is at point.
+Running this code as I'm writing this very prose, yields:
+
+" 6876 6908)
#+end_example

Good to exit upon first relevant result, but we can simplyify this into the
basic constraints

#+begin_src emacs-lisp :noweb-ref null
;; (cl-loop with current-line = line
;;          for diffinfo in diffinfos
;;          for start =
;;          for end   = (or (git-gutter-hunk-end-line diffinfo) (+ 1 start))
;;          when (and (>= current-line start) (<= current-line end))
;;          return diffinfo
;;          finally do (error "Here is not changed!!"))

(let* ((line (line-number-at-pos))
       (diffinfos git-gutter:diffinfos))
  (cons (list line)
        (mapcar
         (lambda (i)
           (mapcar (lambda (f)
                     (when-let* ((n (- line (funcall f i))))
                       (and (< (abs n) 40) n)))
                   '(git-gutter-hunk-start-line
                     git-gutter-hunk-end-line)))
         diffinfos)))
#+end_src

#+RESULTS:
| 6965 |     |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |
| nil  | nil |



**** HACK nov-el
:PROPERTIES:
:ID:       628a3caa-7fbd-4c56-bc5e-221cfdb2a5da
:CREATED:  [2022-10-04 Tue 18:12]
:UPDATED:  [2023-05-07 Sun 21:46]
:ROAM_EXCLUDE: t
:END:


it's [2022-10-04 Tue]; I have just retrieved the dirtiest hack in a while from the archive; but I mean... [[id:0f7be177-127d-4476-9a0f-a1ed3a570400][look at it]][fn:3]

#+begin_src emacs-lisp
(with-eval-after-load 'justify-kp
  (defun pj-line-width ()
    (* (max 1 text-scale-mode-amount) 600)))
#+end_src

#+RESULTS:
: pj-line-width

***** screenshot
:PROPERTIES:
:ID:       0f7be177-127d-4476-9a0f-a1ed3a570400
:CREATED:  [2022-10-04 Tue 18:13]
:UPDATED:  [2022-10-04 Tue 18:13]
:END:

#+DOWNLOADED: screenshot @ 2022-10-04 18:13:11
[[file:configs/2022-10-04_18-13-11_screenshot.png]]

**** hl-phrase                                                          :mode:global:
:PROPERTIES:
:ID:       ad0691da-c0b2-464b-a031-021d50f6b258
:CREATED:  [2022-10-26 Wed 11:50]
:UPDATED:  [2023-04-06 Thu 11:27]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref null
(global-hi-lock-mode 1)
#+end_src

#+RESULTS:
: t

**** ligature / prettify-symbols
:PROPERTIES:
:CREATED:  [2023-09-23 Sat 21:35]
:UPDATED:  [2023-09-23 Sat 23:39]
:ID:       3f426a34-4e86-4def-8435-26e884a1554a
:ROAM_EXCLUDE: t
:END:

***** ligature
:PROPERTIES:
:CREATED:  [2023-09-23 Sat 23:51]
:UPDATED:  [2023-09-23 Sat 23:51]
:ID:       b8000fbf-e560-42f5-abab-0bdd1276955f
:ROAM_EXCLUDE: t
:END:
****** init
:PROPERTIES:
:CREATED:  [2023-09-23 Sat 23:39]
:UPDATED:  [2023-09-23 Sat 23:39]
:ID:       1ca0a2a0-48e6-4641-87f3-b0f9d7f5d81f
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(with-eval-after-load 'ligature
  (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                       ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                       "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "--n-" "-<<"
                                       "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                       "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                       "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                       "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                       "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                       ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                       "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                       "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                       "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                       "\\\\" "://")) ;;
  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t))
#+end_src

#+RESULTS:
: t

#+end_src

***** prettify-symbols
:PROPERTIES:
:CREATED:  [2023-09-23 Sat 23:51]
:UPDATED:  [2023-09-23 Sat 23:53]
:ID:       44a496b8-e3fa-4e90-9de4-24e4d16dbf3e
:ROAM_EXCLUDE: t
:END:

****** pretty logical
:PROPERTIES:
:CREATED:  [2023-09-23 Sat 23:53]
:UPDATED:  [2023-09-29 Fri 14:26]
:ID:       8921d00d-46bd-4e84-8012-66ca17a640ac
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
;; (string-to-char "⋈")
(setq qz/pretty-logicals
      (mapcan (lambda (e) (list e (cons (upcase (car e)) (cdr e))))
              '(("lambda"       . 955)  ; λ  _LAMBDA
                ("union"        . 8746) ; ∪  _UNION
                ("union all"    . 8746) ; ""
                ("and"          . 8743) ; ∧  LOGICAL AND
                ("or"           . 8744) ; ∨  LOGICAL OR
                ("intersect"    . 8745) ; ∩  INTERSECTION
                ("with"         . 9723) ; ◻ IT IS NECESSARY THAT  (dubious)
                ("select"       . 928)  ; Π  PROJECT
                ("as"           . 8788) ; ≔  IS DEFINED AS         (dubious)
                ("from"         . 8704) ; ∀  FOR ALL               (dubious)
                ("where"        . 963)  ; σ  SELECT
                ("not"          . 172)  ; ¬  NOT SIGN
                ("in"           . 8712) ; ∈  MEMBER OF
                ("inner join"   . 8904) ; ⋈  NATURAL (INNER) JOIN
                ("contains"     . 8712) ; ""
                ("not in"       . 8713) ; ∉ NOT MEMBER OF
                ("not contains" . 8712) ; ""
                ;; ∴ therefore
                ;; ∵ because
                ;; ∃ 8707
                ;; ∃ EXISTS ONE (UNIQUE)
                ;; ∄ not exists
                ;; σ_φ(R)
                ))
      qz/pretty-text
      '(("[...]" . 8943) ; ⋯  MIDLINE HORIZONTAL ELLIPSIS
        ;;("clocking" . 128339)
        ))

(defun my-pretty--add (s)
  "extend prettify-symbols-alist with s"
  (setq prettify-symbols-alist (seq-uniq (append prettify-symbols-alist s))))

(defun my-pretty-logicals ()
  (my-pretty--add qz/pretty-logicals))

(defun my-pretty-text ()
  (my-pretty--add qz/pretty-text))

(add-hook 'prog-mode-hook 'my-pretty-logicals)
(add-hook 'text-mode 'my-pretty-text)
(add-hook 'org-mode 'my-pretty-text)
(global-prettify-symbols-mode 1)
#+end_src

#+RESULTS:
: t

******* explore around char point 8746
:PROPERTIES:
:CREATED:  [2023-09-24 Sun 00:04]
:UPDATED:  [2023-09-24 Sun 00:04]
:ID:       ab211c47-a1e5-4674-92c0-9b4f65a8dfdd
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(cl-loop for c from (- 8746 10) to (+ 8746 50)
         collect (cons c (char-to-string c)))
#+end_src

#+RESULTS:
: ((8736 . "∠") (8737 . "∡") (8738 . "∢") (8739 . "∣") (8740 . "∤") (8741 . "∥") (8742 . "∦") (8743 . "∧") (8744 . "∨") (8745 . "∩") (8746 . "∪") (8747 . "∫") (8748 . "∬") (8749 . "∭") (8750 . "∮") (8751 . "∯") (8752 . "∰") (8753 . "∱") (8754 . "∲") (8755 . "∳") (8756 . "∴") (8757 . "∵") (8758 . "∶") (8759 . "∷") (8760 . "∸") (8761 . "∹") (8762 . "∺") (8763 . "∻") (8764 . "∼") (8765 . "∽") (8766 . "∾") (8767 . "∿") (8768 . "≀") (8769 . "≁") (8770 . "≂") (8771 . "≃") (8772 . "≄") (8773 . "≅") (8774 . "≆") (8775 . "≇") (8776 . "≈") (8777 . "≉") (8778 . "≊") (8779 . "≋") (8780 . "≌") (8781 . "≍") (8782 . "≎") (8783 . "≏") (8784 . "≐") (8785 . "≑") (8786 . "≒") (8787 . "≓") (8788 . "≔") (8789 . "≕") (8790 . "≖") (8791 . "≗") (8792 . "≘") (8793 . "≙") (8794 . "≚") (8795 . "≛") (8796 . "≜"))

**** hl-todo                                                            :mode:global:
:PROPERTIES:
:ID:       edde55d4-808b-49e3-8e9f-67c7b55ec0a3
:CREATED:  [2022-10-21 Fri 12:27]
:UPDATED:  [2022-10-26 Wed 11:51]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(global-hl-todo-mode 1)
#+end_src

#+RESULTS:
: t

**** hyperbole
:PROPERTIES:
:ID:       530fac5a-4f90-489a-83d8-69b1b75ab249
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-04-12 Wed 17:31]
:END:

***** ... require
:PROPERTIES:
:ID:       03b4c561-6d9e-4c53-97ea-559dfbfc7eff
:ROAM_EXCLUDE: t
:UPDATED:  [2023-04-12 Wed 17:30]
:END:

#+begin_src emacs-lisp
(require 'hyperbole)
#+end_src

***** {C-<mouse-2} :: hkey-either                                               :kbd:
:PROPERTIES:
:ID:       ccc12df3-8b40-4bec-937f-c28692f1fed4
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-04-25 Tue 19:55]
:END:
#+begin_src emacs-lisp
(define-key global-map (kbd "C-<mouse-2>") 'hkey-either)
(define-key global-map (kbd "M-<return>") 'hkey-either)
#+end_src

#+RESULTS:
: hkey-either

**** kubernetes
:PROPERTIES:
:ID:       97ae5500-35f5-43c9-b2cb-088159ae2f2b
:CREATED:  [2022-10-12 Wed 13:43]
:UPDATED:  [2022-10-12 Wed 13:43]
:ROAM_EXCLUDE: t
:END:
**** moldable-emacs
:PROPERTIES:
:ID:       f4532c31-7054-42c9-a0b0-c4279cccebca
:CREATED:  [2023-07-05 Wed 17:06]
:UPDATED:  [2023-07-15 Sat 16:58]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(defun qz/mold ()
  (interactive)
  (unless (fboundp 'me-mold)
    (require 'moldable-emacs)
    (me-setup-molds))
  (call-interactively 'me-mold))
#+end_src

#+RESULTS:
: qz/mold

***** TODO optimize 'me-mold (me-usable-molds)
:PROPERTIES:
:ID:       e73afb55-c53b-4a8c-a41a-e4332d1236a3
:CREATED:  [2023-07-15 Sat 15:26]
:UPDATED:  [2023-07-15 Sat 15:26]
:ROAM_EXCLUDE: t
:END:

****** redef me-usable-molds
:PROPERTIES:
:ID:       80d7b977-1c38-4b58-a84b-555a0c92eb19
:CREATED:  [2023-07-15 Sat 15:26]
:UPDATED:  [2023-07-16 Sun 18:23]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
;;(setq me-molds-debug-on t)

(with-eval-after-load 'moldable-emacs
  (require 'dash)

  (defun qz/me-usable-molds (&optional molds buffer)
    "Return the usable molds among the `me-available-molds'.
Optionally you can pass your own candidate MOLDS.
Optionally you can pass a BUFFER to use instead of the `current-buffer'."
    (let ((_ (setq me-usable-mold-stats nil))
          (molds (or molds me-available-molds))
          (buffer (or buffer (current-buffer))))
      (with-current-buffer buffer
        (--filter
         (let* ((beginning (current-time))
                (result (save-excursion
                          (condition-case err
                              (me-mold-run-given it)
                            (error (message "me-usable-molds: error in :given of %s:\n   %s" (plist-get it :key) err))))) ; TODO composite molds
                (ending (current-time))
                (_ (when me-molds-debug-on
                     (add-to-list 'me-usable-mold-stats (list :time
                                                              (time-to-seconds
                                                               (time-subtract
                                                                ending
                                                                beginning))
                                                              :nmold (plist-get it q:key)
                                                              :given (plist-get it :given))))))
           result) ;; TODO run this in parallel when time goes over 100ms)
         molds))))

  ;; TODO macro; dump all molds as M-x
  (defmacro qz/me-mold--M-x ()
    `(progn
       (ignore-errors
         ,@(--map
            (let* ((k (plist-get it :key))
                   (f (intern (concat "qz/me-mold--" k))))
              `((fmakunbound ',f)
                (defun ,f ()
                  (interactive)
                  (if (me-mold-run-given ',it)
                      (me-mold , k)
                    (message "me-mold: Cannot run '%s' here" ,k)))))
            me-available-molds))))

  (qz/me-mold--M-x))
;;(qz/me-mold--Stats)
#+end_src

#+RESULTS:
: nil
**** modus-themes
:PROPERTIES:
:CREATED:  [2024-01-15 Mon 19:48]
:UPDATED:  [2024-01-15 Mon 19:48]
:ID:       ac80f0a8-cbdd-45fa-b394-8db550421234
:ROAM_EXCLUDE: t
:END:
***** modus-themes-reload
:PROPERTIES:
:CREATED:  [2024-01-15 Mon 19:48]
:UPDATED:  [2024-01-15 Mon 19:54]
:ID:       24f6c2ba-e447-4840-ba81-5ec128cfd5a4
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(with-eval-after-load 'modus-themes
  <<modus>>
  (qz/modus-themes-reload)
  )
#+end_src

#+RESULTS:
: modus-operandi-deuteranopia

#+begin_src emacs-lisp :noweb-ref modus
(defun qz/modus-themes-reload ()
  (interactive)
  (when current-prefix-arg
    (setq modus-themes-common-palette-overrides qz/modus-overrides))
  (when-let* ((modus-themes-custom-auto-reload t)
              (theme (modus-themes--current-theme)))
    (modus-themes-load-theme theme)))
#+end_src

#+RESULTS:
: qz/modus-themes-reload
***** my-modus-overrides
:PROPERTIES:
:CREATED:  [2024-01-15 Mon 19:49]
:UPDATED:  [2024-01-15 Mon 19:55]
:ID:       07da6a8b-d165-408e-ad28-6577ff25da67
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref modus :results table
;; Apply gray scale foreground, background, and overline (headings 0-8)
;; headings are oblique (face:bold)
(setq
 qz/modus-overrides
 (append
  '(
    (default light) ;; TODO default text is light
    )
  (cl-loop
   for pre in '("" "fg-") append
   (cl-loop
    for n from 1 to 8
    append (cl-labels ((s (pre) (intern (format "%s-heading-%s" pre n))))
             `((,(s 'fg)
                ;;; what color should the headings be?
                ;;fg-main   ;; 1.  whatever the main text color is.
                ;;"#333"    ;; 2.  a lightening.
                "#666"      ;; 2.  a lightening, 2.
                )
               ;;(,(s 'bg) nil)
               ))))))
;;; (qz/modus-themes-reload)
#+end_src

#+RESULTS:
| default      | light |
| fg-heading-1 | #666  |
| fg-heading-2 | #666  |
| fg-heading-3 | #666  |
| fg-heading-4 | #666  |
| fg-heading-5 | #666  |
| fg-heading-6 | #666  |
| fg-heading-7 | #666  |
| fg-heading-8 | #666  |
| fg-heading-1 | #666  |
| fg-heading-2 | #666  |
| fg-heading-3 | #666  |
| fg-heading-4 | #666  |
| fg-heading-5 | #666  |
| fg-heading-6 | #666  |
| fg-heading-7 | #666  |
| fg-heading-8 | #666  |

**** mpv
:PROPERTIES:
:ID:       7c3d77d7-f5e5-4c69-b260-b7ebd51be79b
:CREATED:  [2023-04-25 Tue 12:27]
:UPDATED:  [2023-04-25 Tue 12:27]
:ROAM_EXCLUDE: t
:END:

***** etc
:PROPERTIES:
:ID:       cf6bc373-1f5e-4a19-ac68-e78e1dc23580
:CREATED:  [2023-04-25 Tue 12:27]
:UPDATED:  [2023-04-25 Tue 12:27]
:ROAM_EXCLUDE: t
:END:


***** helpers
:PROPERTIES:
:ID:       a571d35b-a8e0-4733-9bb7-86bab3a8f574
:CREATED:  [2023-04-25 Tue 12:27]
:UPDATED:  [2023-05-03 Wed 16:16]
:ROAM_EXCLUDE: t
:END:

- nicked & consolidated from ::
https://github.com/NapoleonWils0n/cerberus/blob/master/emacs/mpv-timer.org

#+begin_src emacs-lisp
(defun mpv-osd ()
  "Show the osd"
  (interactive)
  (mpv--enqueue '("set_property" "osd-level" "3") 'ignore))

(defun mpv-screenshot ()
  "Take a screenshot"
  (interactive)
  (mpv--enqueue '("screenshot") 'ignore))



(defun mpv-frame-step ()
  "Step one frame forward."
  (interactive)
  (mpv--enqueue '("frame-step") 'ignore))


(defun mpv-frame-back-step ()
  "Step one frame backward."
  (interactive)
  (mpv--enqueue '("frame-back-step") 'ignore))


#+end_src

***** TODO quick-cutting
:PROPERTIES:
:ID:       d3c85696-80f3-4299-8218-544814daa267
:CREATED:  [2023-04-25 Tue 12:27]
:UPDATED:  [2023-04-25 Tue 12:27]
:ROAM_EXCLUDE: t
:END:

-kwq
:: https://github.com/NapoleonWils0n/cerberus/blob/master/emacs/edit-videos-with-ffmpeg-mpv-emacs.org

**** pdf-view
:PROPERTIES:
:ID:       90477387-9ef3-4e7b-8d80-d2344623d521
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-28 Wed 16:36]
:END:

***** COMMENT noweb tangler
:PROPERTIES:
:CREATED:  [2024-02-08 Thu 14:58]
:UPDATED:  [2024-02-08 Thu 14:58]
:ID:       0582ec93-19e9-4f33-95bf-a5c67fcde7c0
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb yes
(with-eval-after-load 'pdf-view
  <<pdf-view>>
  )
#+end_src
***** midnight-minor-mode ; dark-mode filter on pdfs                         :visual:
:PROPERTIES:
:ID:       539f2eb0-e47d-4976-8c96-6c5a7705835a
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2024-02-08 Thu 14:57]
:END:
#+end_src

#+begin_src emacs-lisp :noweb-ref pdf-view
(add-hook 'pdf-view-mode-hook 'pdf-view-midnight-minor-mode)
#+end_src
***** list-annot, custom date format
:PROPERTIES:
:CREATED:  [2024-02-08 Thu 15:59]
:UPDATED:  [2024-02-08 Thu 16:04]
:ID:       19c27145-8a22-4ed0-b95e-81c90c70b3e5
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref pdf-view
(defun pdf-annot-print-property (a property)
  "Pretty print annotation A's property PROPERTY."
  (let ((value (pdf-annot-get a property)))
    (cl-case property
      (color
       (propertize (or value "")
                   'face (and value
                              `(:background ,value))))
      ((created modified)
       (let ((date value))
         (if (null date)
             "No date"
           ;;; ✂ ----
           (format-time-string (org-time-stamp-format t t) date)
           ;; (current-time-string  date)
           ;;; ---- ✂
           )))
      ;; print verbatim
      (subject
       (or value "No subject"))
      (opacity
       (let ((opacity (or value 1.0)))
         (format "%d%%" (round (* 100 opacity)))))
      (t (format "%s" (or value ""))))))

;; (format-time-string (org-time-stamp-format t t) (current-time))
#+end_src

#+RESULTS:
: pdf-annot-print-property

***** swap {n C-n} {p C-p} :kbd:
:PROPERTIES:
:CREATED:  [2024-02-08 Thu 14:57]
:UPDATED:  [2024-02-08 Thu 14:58]
:ID:       0ff5518d-8481-4590-8844-778798924153
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref pdf-view
(define-key pdf-view-mode-map (kbd "n") 'pdf-view-next-line-or-next-page)
(define-key pdf-view-mode-map (kbd "p") 'pdf-view-previous-line-or-previous-page)
(define-key pdf-view-mode-map (kbd "C-n") 'pdf-view-next-page-command)
(define-key pdf-view-mode-map (kbd "C-p") 'pdf-view-previous-page-command)
#+end_src
***** easy actions: highlighting, underlining
:PROPERTIES:
:CREATED:  [2024-02-08 Thu 14:59]
:UPDATED:  [2024-02-12 Mon 10:41]
:ID:       f8b18fa1-22e4-4bfe-a305-4ad3ea0d1ba2
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref pdf-view
(define-key pdf-view-mode-map (kbd "u") 'pdf-annot-add-underline-markup-annotation)
(define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
(define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)

(define-key pdf-view-mode-map (kbd "L") 'pdf-annot-list-annotations)
(define-key pdf-view-mode-map (kbd "D") 'pdf-annot-delete)

(define-key pdf-view-mode-map (kbd "M-g M-g") 'pdf-view-goto-page)

;; markup vs text
;; Pdf-annot-add-text-annotation
;; pdf-annot-add-markup-annotation
;; pdf-annot-mouse-add-text-annotation
;; pdf-annot-add-squiggly-markup-annotation
;; pdf-annot-add-highlight-markup-annotation
;; pdf-annot-add-strikeout-markup-annotation
;; pdf-annot-add-underline-markup-annotation
#+end_src

#+RESULTS:
: pdf-view-goto-page

****** {M-<mouse-1-drag>} pdf-view-mouse-set-region-rectangle (is slow)
:PROPERTIES:
:CREATED:  [2024-02-08 Thu 15:49]
:UPDATED:  [2024-02-08 Thu 15:49]
:ID:       a328fcc0-6707-4b92-9e04-057ac362f18a
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref pdf-view
;;; pdf-view-mouse-set-region-rectangle
;;; - pdf-view-mouse-set-region
;;; - pdf-view-active-region.
#+end_src

******* toggle text-highlight, word | char
:PROPERTIES:
:CREATED:  [2024-02-08 Thu 16:06]
:UPDATED:  [2024-02-08 Thu 18:56]
:ID:       869af486-19c5-495d-824a-e2df77bc6104
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref pdf-view
(setq pdf-view-selection-style 'glyph)
(setq pdf-view-selection-style 'word
      )HOMNE
#+end_src

#+RESULTS:
: word

******** pdf-annot-list-format
:PROPERTIES:
:CREATED:  [2024-02-08 Thu 16:08]
:UPDATED:  [2024-02-08 Thu 16:23]
:ID:       38f357f2-e816-4ebf-8a30-60f967b56dba
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref pdf-view
(setq pdf-annot-list-format
      '((page . 4)
        (date . 22)
        (type . 10)
        (contents . 73)
        (label . 24)))
#+end_src


********* annot-list-listed-types
:PROPERTIES:
:CREATED:  [2024-02-08 Thu 16:23]
:UPDATED:  [2024-02-08 Thu 16:23]
:ID:       2705658e-6e09-4828-a769-7550a380d005
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref pdf-view
(setq pdf-annot-list-listed-types '(nil text file squiggly highlight underline strike-out))
#+end_src

#+RESULTS:
: ((page . 4) (date . 22) (type . 10) (contents . 73) (label . 24))


#+RESULTS:
: qz/pdf-history-clear

********* pdf-view-use-scaling
:PROPERTIES:
:CREATED:  [2024-02-08 Thu 16:23]
:UPDATED:  [2024-02-12 Mon 09:45]
:ID:       fee3384a-19e8-45c4-b857-5bb08ffb43a8
:ROAM_EXCLUDE: t
:END:


#+begin_src emacs-lisp :noweb-ref pdf-view
;; use best quality always
(setq pdf-view-use-scaling nil)
#+end_src

#+RESULTS:
: nil

***** visual excerpt
:PROPERTIES:
:CREATED:  [2024-02-08 Thu 14:59]
:ID:       ca7ce083-9fb2-46bb-a65f-682e40cb0f20
:ROAM_EXCLUDE: t
:UPDATED:  [2024-02-08 Thu 14:59]
:END:
***** reading/writing outlines
:PROPERTIES:
:CREATED:  [2024-02-08 Thu 14:59]
:UPDATED:  [2024-02-08 Thu 14:59]
:ID:       2482f4f6-836c-43be-ae67-b1d74dde31bc
:ROAM_EXCLUDE: t
:END:
***** exploring pdf-mode
:PROPERTIES:
:CREATED:  [2024-02-08 Thu 15:03]
:UPDATED:  [2024-02-08 Thu 15:42]
:ID:       4ac5b279-c219-4fd0-ad27-e2da5b741c58
:ROAM_EXCLUDE: t
:END:
****** pdf-history
:PROPERTIES:
:CREATED:  [2024-02-08 Thu 15:03]
:UPDATED:  [2024-02-08 Thu 16:26]
:ID:       91178495-b307-480f-b729-0e984d9b7d23
:ROAM_EXCLUDE: t
:END:



#+begin_src emacs-lisp :noweb-ref pdf-view
;;; pdf-history-minor-mode

(define-key pdf-view-mode-map (kbd "x x") 'pdf-history-debug)
(define-key pdf-view-mode-map (kbd "x n") 'pdf-history-forward)
(define-key pdf-view-mode-map (kbd "x p") 'pdf-history-backward)
(define-key pdf-view-mode-map (kbd "x l") 'qz/pdf-history-clear)

(defun qz/pdf-history-clear ()
  (interactive)
  (pdf-history-clear)
  (pdf-history-debug))

;;pdf-history-goto
;;;pdf-history-push

#+end_src




****** pdf-register {m}, {'}
:PROPERTIES:
:CREATED:  [2024-02-08 Thu 15:42]
:ID:       bd037db5-5400-4d72-a7ad-9c108462528b
:ROAM_EXCLUDE: t
:END:
**** project
:PROPERTIES:
:ID:       9ba6a6bd-ef23-4909-bb86-15c5cecf6714
:ROAM_EXCLUDE: t
:END:

***** TODO project-vterm
:PROPERTIES:
:ID:       01fb88ae-fd1b-478e-af85-552a50e5f5e2
:ROAM_EXCLUDE: t
:UPDATED:  [2023-06-13 Tue 14:52]
:END:

#+begin_src emacs-lisp
(with-eval-after-load
    'project
  (defun project-vterm ()
    "Start vterm in the current project's root directory.
If a buffer already exists for running vterm in the project's root,
switch to it.  Otherwise, create a new vterm buffer.
With \\[universal-argument] prefix arg, create a new vterm buffer even
if one already exists."
    (interactive)
    (let* ((default-directory (project-root (project-current t)))
           (vterm-buffer-name (project-prefixed-buffer-name "vterm"))
           (vterm-buffer (get-buffer vterm-buffer-name)))
      (if (and vterm-buffer (not current-prefix-arg))
          (pop-to-buffer-same-window vterm-buffer)
        (vterm t))))
  (define-key project-prefix-map (kbd "t") 'project-vterm)
  (add-to-list 'project-switch-commands
               '(project-vterm
                 "Start vterm in the current project's root directory.")))
#+end_src

#+RESULTS:
| project-vterm        | Start vterm in the current project's root directory. |
| consult-ripgrep      | Search for regexp with rg                            |
| consult-find         | Find file consult                                    |
| project-find-file    | Find file                                            |
| project-find-regexp  | Find regexp                                          |
| project-find-dir     | Find directory                                       |
| project-vc-dir       | VC-Dir                                               |
| project-eshell       | Eshell                                               |
| project-compile      | Compile                                              |
| magit-project-status | Magit                                                |
| consult-ripgrep      | ripgrep                                              |
**** password-store
:PROPERTIES:
:CREATED:  [2024-01-15 Mon 20:11]
:UPDATED:  [2024-01-15 Mon 20:11]
:ID:       a31ecdab-1881-46a4-a097-a13534b16a30
:ROAM_EXCLUDE: t
:END:
***** otp
:PROPERTIES:
:CREATED:  [2024-01-15 Mon 20:11]
:UPDATED:  [2024-01-15 Mon 20:15]
:ID:       73875503-1a5c-4d1d-bb09-22a8bbe9e516
:ROAM_EXCLUDE: t
:END:
******

#+begin_src emacs-lisp
(setq qz/screenshot-tool "grim"
      qz/screenshot-rect "screenshot") ;; grim -g \"$(slurp)\"
;; ~/.local/bin/screenshot

(defun password-store-otp-append-from-image (entry)
  "Check clipboard for an image and scan it to get an OTP URI, append it to ENTRY."
  (interactive (list (read-string "Password entry: ")))
  (let ((qr-image-filename (password-store-otp--get-qr-image-filename entry)))
    (when (not (zerop
                (shell-command (format "%s %s" qz/screenshot-rect qr-image-filename))))
      (error "Couldn't get image from clipboard"))
    (with-temp-buffer
      (condition-case nil
          (call-process "zbarimg" nil t nil "-q" "--raw"
                        qr-image-filename)
        (error
         (error "It seems you don't have `zbar-tools' installed")))
      (password-store-otp-append
       entry
       (buffer-substring (point-min) (point-max))))
    (when (not password-store-otp-screenshots-path)
      (delete-file qr-image-filename))))
#+end_src

#+RESULTS:
: password-store-otp-append-from-image

**** atomic-chrome
:PROPERTIES:
:CREATED:  [2023-09-21 Thu 11:47]
:UPDATED:  [2023-09-21 Thu 11:47]
:ID:       dddef534-214c-4241-8f81-a420aabddd99
:ROAM_EXCLUDE: t
:END:
***** init
:PROPERTIES:
:CREATED:  [2023-09-21 Thu 11:47]
:UPDATED:  [2023-09-23 Sat 18:50]
:ID:       19e35350-310a-4103-b8f8-951b59d0ca4c
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(require 'atomic-chrome)
(atomic-chrome-start-server)
#+end_src
***** between firefox, chrome
:PROPERTIES:
:CREATED:  [2023-09-21 Thu 11:56]
:UPDATED:  [2023-09-21 Thu 12:03]
:ID:       073636e3-bccc-4df3-b019-c56f57dcb95c
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(setq atomic-chrome-port--firefox 4001
      atomic-chrome-port--chrome 4002
      atomic-chrome-port--gcp 4003)

(defun qz/atomic-chrome-choose (browser)
  (interactive
   (list
    (completing-read "browser, port: " '(firefox chrome gcp))))
  (setq atomic-chrome-server-ghost-text-port
        (symbol-value (intern (concat "atomic-chrome-port--" browser))))
  (atomic-chrome-stop-server)
  (atomic-chrome-start-server)
  (message "qz: atomic-chrome: Using %s:%s"
           browser atomic-chrome-server-ghost-text-port))
#+end_src

#+RESULTS:
: qz/atomic-chrome-choose
***** websites . modes
:PROPERTIES:
:CREATED:  [2023-09-21 Thu 12:03]
:UPDATED:  [2023-11-16 Thu 20:46]
:ID:       89a5080a-5345-40e5-bc98-85f53d74bd4a
:END:

#+begin_src emacs-lisp
(setq atomic-chrome-url-major-mode-alist
      '(;;; jupyter
        ("localhost:8890" . python-mode)
        ("localhost:8888" . python-mode)
        ("datacamp.com" . python-mode)
        ("notebooks.googleusercontent.com" . python-mode)
        ;;; etc
        ))
#+end_src

#+RESULTS:
: (("localhost:8890" . python-mode) ("localhost:8888" . python-mode) ("datacamp.com" . python-mode) ("notebooks.googleusercontent.com" . python-mode))

***** default mode = org (obviously)
:PROPERTIES:
:ID:       cdd70720-badb-41e1-b4e1-d902b9a0f4ab
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(setq atomic-chrome-default-major-mode 'org-mode)
#+end_src

#+RESULTS:
: org-mode

*** [[id:6baf4bff-d5fe-4ce0-a130-0464e49de67d][org]]
:PROPERTIES:
:ID:       71e29a1b-5349-4d90-965f-b628210f1fdb
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-28 Wed 16:36]
:END:
**** packages
:PROPERTIES:
:ID:       760039ac-145f-46b1-8e5a-60d3771c0c44
:CREATED:  [2022-09-29 Thu 13:08]
:UPDATED:  [2022-09-29 Thu 13:08]
:ROAM_EXCLUDE: t
:END:
***** agenda
:PROPERTIES:
:ID:       a5e89ace-6b97-4d12-9b79-03b7f0a19bf7
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
****** data
:PROPERTIES:
:ID:       23a8e79a-4999-43ba-b5a7-2d8316a15507
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******* setters
:PROPERTIES:
:ID:       bf117458-29ec-4a39-8fee-07c2482eba6d
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******** [[id:ec8b00b4-3bd3-458c-9777-d2581c0f6fd5][agenda-files-update]]  :func:var:
:PROPERTIES:
:ID:       30c87ac3-057a-46c0-a969-456eee6d2de9
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-09-04 Mon 17:07]
:END:

#+begin_src emacs-lisp :noweb-ref agenda
(defun qz/agenda-files-update (&optional &rest force?)
  "Update the value of `org-agenda-files' with relevant candidates"
  (interactive)
  (unless (and (boundp 'qz/agenda-files-updated)
               (or force? (not qz/agenda-files-updated)))
    (setq org-agenda-files (qz/files-agenda)
          qz/agenda-daily-files (qz/agenda-daily-files-f)
          qz/agenda-files-updated t)))
#+end_src

#+RESULTS:
: qz/agenda-files-update
******** agenda-files-update-clock                                         :func:var:
:PROPERTIES:
:ID:       5eb48172-a3c0-40d0-a8f3-bd2ae916b116
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref agenda
(defun qz/agenda-files-update-clock (&rest _)
  "An optimisation for org-clock, which is SO SLOW.
 Returns a LIST of files that contain CLOCK, which reduces
processing a lot"
  (interactive)
  (setq org-agenda-files (qz/clock-files)))
#+end_src

#+RESULTS:
: qz/agenda-files-update-clock

********* advice: org-clock-resolve
:PROPERTIES:
:ID:       fa191643-0cf4-4fd4-a5c9-0de9108435d4
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

- used in 'org-resolve-clocks

#+begin_src emacs-lisp :noweb-ref agenda
(list
 ;; optimisation setup: setup subset of clock files
 (qz/advice- org-clock-resolve :before qz/agenda-files-update-clock)
 ;; optimisation teardown: restore full set of agenda-files
 (qz/advice- org-clock-resolve :after qz/agenda-files-update))
#+end_src

#+RESULTS:
| qz/advice-enable--org-clock-resolve--qz/agenda-files-update-clock | qz/advice-disable--org-clock-resolve--qz/agenda-files-update-clock |
| qz/advice-enable--org-clock-resolve--qz/agenda-files-update       | qz/advice-disable--org-clock-resolve--qz/agenda-files-update       |

******* [[id:9b0676a9-93d3-4449-ac82-721d4e20d4d6][daily-files]]           :func:var:
:PROPERTIES:
:ID:       f6bedbac-927c-46aa-bd67-e241af09bd76
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-09-04 Mon 19:03]
:END:

- needs =qz/agenda-files-update= to run first

#+begin_src emacs-lisp :noweb-ref agenda :results drawer
(setq qz/daily-title-regexp ".?[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}.?")

(defun qz/agenda-daily-files-f (&optional k)
  (let ((k 60))
    (seq-take (sort (seq-filter (lambda (s) (string-match qz/daily-title-regexp s))
                                org-agenda-files)
                    'string-greaterp)
              k)))
#+end_src

#+RESULTS:
:results:
qz/agenda-daily-files-f
:end:

******** testing
:PROPERTIES:
:ID:       4795f677-1f55-4b63-ac41-062261a9540c
:UPDATED:  [2023-09-04 Mon 19:06]
:END:

#+begin_src emacs-lisp :results table :tangle no :noweb-ref null
(mapcar 'list
        (seq-take
         (sort (seq-filter (lambda (s) (string-match qz/daily-title-regexp s))
                           org-agenda-files)
               'string-greaterp)
         5))
#+end_src

#+RESULTS:
| /home/samuel/life/roam/daily/private-2023-09-04.org |
| /home/samuel/life/roam/daily/private-2023-09-01.org |
| /home/samuel/life/roam/daily/private-2023-08-31.org |
| /home/samuel/life/roam/daily/private-2023-08-30.org |
| /home/samuel/life/roam/daily/private-2023-08-29.org |

******* clock-files
:PROPERTIES:
:ID:       91873c41-446a-4eb1-9c28-c62e922ab5b3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-08-30 Wed 17:48]
:END:

#+begin_src emacs-lisp :noweb-ref agenda
(defun qz/clock-files ()
  (split-string
   (shell-command-to-string
    (format "
rg CLOCK ~/life/roam/ -c -t org \
  | grep -v 'org#' \
  | grep -v '%s' \
  | awk -F '[,:]' '{print $1}'
" (format-time-string "%Y")))))
#+end_src

#+RESULTS:
: qz/clock-files

******* month-updated.created-files
:PROPERTIES:
:ID:       98260a44-eedb-4a3b-9831-3b9b50c7699a
:CREATED:  [2023-04-19 Wed 17:03]
:UPDATED:  [2023-04-19 Wed 17:10]
:ROAM_EXCLUDE: t
:END:

#+begin_src elisp
(defun qz/month-files ()
  (split-string
   (shell-command-to-string
    "rg '2023-04-1' ~/life/roam/ -c -t org | grep -vE 'org#' | awk -F '[,:]' '{print $1}'")))
#+end_src

#+RESULTS:
: qz/month-files

******** inspect
:PROPERTIES:
:ID:       53ef55de-35bd-4f16-af93-967289493f35
:CREATED:  [2023-04-19 Wed 19:11]
:UPDATED:  [2023-04-19 Wed 19:11]
:ROAM_EXCLUDE: t
:END:

********* count
:PROPERTIES:
:ID:       1e865d7c-b919-43ca-b1c7-81bc03bdddaa
:CREATED:  [2023-04-19 Wed 19:11]
:UPDATED:  [2023-04-19 Wed 19:11]
:ROAM_EXCLUDE: t
:END:

#+begin_src shell
rg '2023-04-1' ~/life/roam/ -c -t org | grep -v 'org#' | awk -F '[,:]' '{print $1}' \
    | xargs wc | sort -k1n
#+end_src


********* headings
:PROPERTIES:
:ID:       6cd5dfe0-0402-4387-9f14-a4d061185077
:CREATED:  [2023-04-19 Wed 19:11]
:UPDATED:  [2023-04-19 Wed 19:11]
:ROAM_EXCLUDE: t
:END:

#+begin_src shell
rg '^\*+' $(rg '2023-04-1' ~/life/roam/ -c -t org | grep -v 'org#' | awk -F '[,:]' '{print $1}') | wc -l

#+end_src

#+RESULTS:
:results:
1737
:end:

******* files-agenda                                                           :func:
:PROPERTIES:
:ID:       53b918cd-26d6-4d02-9e6d-b0a4bffc9c3e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref agenda :results drawer
(defun qz/files-agenda ()
  (seq-uniq (append qz/org-agenda-files (qz/project-files))))
#+end_src

******* [[id:cb81cfd7-fb16-4965-af20-69129cf4fd97][project-files]]             :func:
:PROPERTIES:
:ID:       8279b4e0-f23a-44f9-a1af-07a44b5de957
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref agenda
(defun qz/project-files ()
  "Return a list of note files containing Project tag."
  (seq-map
   'car
   (org-roam-db-query
    '(:select :distinct file
              :from tags
              :inner :join nodes
              :on (= tags:node_id nodes:id)
              :where (= tags:tag "project")))))
#+end_src

#+RESULTS:
: qz/project-files
******* private-files                                                          :func:
:PROPERTIES:
:ID:       2c1e97dd-8d37-4ff8-b6cd-9440553adea1
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref agenda
(defun qz/org-roam-private-files ()
  "Return a list of note files containing tag =private="
  (seq-map
   'car
   (org-roam-db-query
    [:select :distinct file
             :from tags
             :inner :join nodes
             :on (= tags:node_id nodes:id)
             :where (= tags:tag "private")])))
#+end_src
******* test
:PROPERTIES:
:ID:       6316d72a-a741-45a4-a239-d743ac860e6d
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******** inspect-agenda-files
:PROPERTIES:
:ID:       d0faae20-6f08-445c-8ce3-ebaf9df2031b
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref roam
(defun qz/inspect-agenda-files ()
  `((org-files-list . ,(length (org-files-list)))
    ((org-agenda-files . ,(length (org-agenda-files)))
     ((qz/project-files . ,(length (qz/project-files)))
      (qz/agenda-daily-files-f . ,(length (qz/agenda-daily-files-f)))))))
#+end_src

#+RESULTS:
: qz/inspect-agenda-files

********* do
:PROPERTIES:
:ID:       b0e05fcc-998f-429e-89be-989241bff5e6
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :tangle no :noweb-ref null
(pp (qz/inspect-agenda-updates))
#+end_src

#+RESULTS:
#+begin_example
((qz/agenda-files-update
  ((org-files-list . 216)
   ((org-agenda-files . 205)
    ((qz/project-files . 203)
     (qz/agenda-daily-files-f . 124)))))
 (qz/agenda-files-update-clock
  ((org-files-list . 220)
   ((qorg-agenda-files . 43)
    ((qz/project-files . 203)
     (qz/agenda-daily-files-f . 30))))))
#+end_example

******** inspect-agenda-updates
:PROPERTIES:
:ID:       7b5c6190-56ab-4aeb-85a8-309261cfd948
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  <2022-02-28 Mon 09:39>
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/inspect-agenda-updates ()
  (mapcar (lambda (s) `(,s . (,(progn (funcall s)
                                      (qz/inspect-agenda-files)))))
          '(qz/agenda-files-update qz/agenda-files-update-clock)))
#+end_src

#+RESULTS:
: qz/inspect-agenda-updates

********* do
:PROPERTIES:
:ID:       7d9a11fd-6239-44c4-a7e1-d8ccabcb64af
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :tangle no :noweb-ref null
(pp (qz/inspect-agenda-updates))
#+end_src

#+RESULTS:
#+begin_example
((qz/agenda-files-update
  ((org-files-list . 216)
   ((org-agenda-files . 205)
    ((qz/project-files . 203)
     (qz/agenda-daily-files-f . 124)))))
 (qz/agenda-files-update-clock
  ((org-files-list . 220)
   ((org-agenda-files . 43)
    ((qz/project-files . 203)
     (qz/agenda-daily-files-f . 30))))))
#+end_example

****** custom commands
:PROPERTIES:
:ID:       d1ac0c13-3aeb-423f-9385-afeafd2025a9
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

******* {C-c n t } daily TODOs
:PROPERTIES:
:ID:       7e41b5a2-8678-4921-aebd-dcffecb0bbe5
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-09-04 Mon 17:19]
:END:
#+begin_src emacs-lisp :noweb-ref agenda
;; current (default) sorting strat
'((agenda habit-down time-up priority-down category-keep)
  (todo priority-down category-keep)
  (tags priority-down category-keep)
  (search category-keep))


(defun qz/agenda-todo-dailies ()
  "the most necessary simple invention in months.
(as of [2022-01-19 Wed])

get a list of `TODO' entries, from daily files, ordered by date (from filename/category) DESCENDING.

- see `qz/agenda-daily-files-f' for the subset view of `org-agenda-files'
- see `org-agenda-sorting-strategy' for sort permutations."
  (interactive)
  (qz/agenda-files-update)
  (let* ((org-agenda-files (qz/agenda-daily-files-f))
         (org-agenda-sorting-strategy '(timestamp-down category-down)))
    (org-todo-list)))

(define-key global-map (kbd "C-c n t") 'qz/agenda-todo-dailies)
#+end_src

#+RESULTS:
: qz/agenda-todo-dailies

******* g ; GTD
:PROPERTIES:
:ID:       ebd9c208-4ac6-49cc-8bdc-3f22f3554b6d
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-08-17 Wed 16:21]
:END:

#+begin_src emacs-lisp :noweb-ref agenda
(defun qz/org-agenda-gtd ()
  (interactive)
  (org-agenda nil "g")
  (goto-char (point-min))
  (org-agenda-goto-today))

;; HACK safe agenda ops on load
(when (not (boundp 'org-agenda-custom-commands))
  (setq org-agenda-custom-commands nil))

(when (not (boundp 'org-agenda-custom-commands))
  (setq org-roam-directory "~/life/roam"))
;; TODO why require this? because of org-roam-directory?
;(require 'org-roam)

;; (message "agenda: setting custom commands\n%s" org-agenda-custom-commands)

(add-to-list
 'org-agenda-custom-commands
 `("g" "GTD"
   ((agenda "" ((org-agenda-span 'day) (org-deadline-warning-days 60)))
    (tags-todo "now"
               ((org-agenda-overriding-header "\nnow\n")))
    (tags-todo "wip"
               ((org-agenda-overriding-header "\nwip\n")))
    (todo "TODO"
          ((org-agenda-overriding-header "\nto process\n")
           (org-agenda-files '(,(format "%s/%s" org-roam-directory "inbox.org")))))
    (todo "TODO"
          ((org-agenda-overriding-header "\ndaily inbox\n")
           (org-agenda-files qz/agenda-daily-files)))
    (todo "TODO"
          ((org-agenda-overriding-header "\nemails\n")
           (org-agenda-files '(,(format "%s/%s" org-roam-directory "emails.org")))))
    (todo "TODO"
          ((org-agenda-overriding-header "\none-off Tasks\n")
           (org-agenda-files '(,(format "%s/%s" org-roam-directory "next.org")))))
    (todo "TODO"
          ((org-agenda-overriding-header "\nto yak shave\n")
           (org-agenda-files '(,(format "%s/%s" org-roam-directory "emacs.org"))))))))
#+end_src

#+RESULTS:
| g | GTD | ((agenda  ((org-agenda-span 'day) (org-deadline-warning-days 60))) (tags-todo now ((org-agenda-overriding-header |

#+begin_src emacs-lisp :noweb-ref agenda
(add-to-list
 'org-agenda-custom-commands
 `("c" "create"
   ((agenda "" ((org-agenda-span 'day) (org-deadline-warning-days 60)))
    (tags-todo "diy+create+do+buy+make+wip"
               ((org-agenda-overriding-header "wip")))
    (tags-todo "diy+create+do"
               ((org-agenda-overriding-header "create")))
    (tags-todo "buy"
               ((org-agenda-overriding-header "buy")))
    (tags-todo "make"
               ((org-agenda-overriding-header "make"))))))
#+end_src

#+RESULTS:
| c  | create             | ((agenda  ((org-agenda-span 'day) (org-deadline-warning-days 60))) (tags-todo diy+create+do+buy+make+wip ((org-agenda-overriding-header wip))) (tags-todo diy+create+do ((org-agenda-overriding-header create))) (tags-todo buy ((org-agenda-overriding-header buy))) (tags-todo make ((org-agenda-overriding-header make))))           |
|  | Agenda for the day | ((agenda  ((org-agenda-span 1) (org-agenda-scheduled-leaders '( Sched.%2dx: )) (org-agenda-block-separator nil) (org-agenda-entry-types '(:scheduled :timestamp :sexp)) (org-scheduled-past-days 0) (org-agenda-day-face-function (lambda (date) 'org-agenda-date)) (org-agenda-format-date %A %-e %B %Y) (org-agenda-overriding-header |

******* w ; work
:PROPERTIES:
:ID:       02a112d7-ef32-44d3-b06b-cde3d0df4038
:CREATED:  [2022-03-31 Thu 09:41]
:UPDATED:  [2022-06-27 Mon 10:55]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref agenda
(add-to-list
 'org-agenda-custom-commands
 `("w" "work"
   ((tags-todo "{work}+wip"
               ((org-agenda-overriding-header "wip")
                (org-tags-match-list-sublevels nil) ;; show subheadings!!!! inherited!!!!
                ;; (org-agenda-hide-tags-regexp
                ;;  (concat org-agenda-hide-tags-regexp "\\|work"))
                ))
    (tags-todo "{work}"
               ((org-agenda-overriding-header "work")))
    )))

;;(pp org-agenda-custom-commands)
#+end_src

#+RESULTS:
| w  | work     | ((tags-todo {work}+wip ((org-agenda-overriding-header wip) (org-tags-match-list-sublevels nil))) (tags-todo {work} ((org-agenda-overriding-header work))))                                                                                                                                                                                                                         |
|  | Overview | ((agenda  ((org-agenda-time-grid nil) (org-agenda-start-on-weekday nil) (org-agenda-start-day +1d) (org-agenda-span 14) (org-agenda-show-all-dates nil) (org-agenda-time-grid nil) (org-deadline-warning-days 0) (org-agenda-block-separator nil) (org-agenda-entry-types '(:deadline)) (org-agenda-skip-function '(org-agenda-skip-entry-if 'done)) (org-agenda-overriding-header |

#+begin_src emacs-lisp  :results code :noweb-ref null
;; remove keyed by KEY
(defun qz/filter-agenda-key (key &optional agenda-commands)
  (let ((agenda-commands (or agenda-commands
                             org-agenda-custom-commands)))
    (seq-filter (lambda (a) (not (equal key (car a))))
                org-agenda-custom-commands)))

(setq org-agenda-custom-commands (qz/filter-agenda-key "w"))
#+end_src

#+RESULTS:l
#+begin_src emacs-lisp :noweb-ref null
(("" "Overview"
  ((agenda ""
           ((org-agenda-time-grid nil)
            (org-agenda-start-on-weekday nil)
            (org-agenda-start-day "+1d")
            (org-agenda-span 14)
            (org-agenda-show-all-dates nil)
            (org-agenda-time-grid nil)
            (org-deadline-warning-days 0)
            (org-agenda-block-separator nil)
            (org-agenda-entry-types
             '(:deadline))
            (org-agenda-skip-function
             '(org-agenda-skip-entry-if 'done))
            (org-agenda-overriding-header "\nUpcoming deadlines (+14d)\n")))
   (agenda "*"
           ((org-agenda-block-separator nil)
            (org-agenda-span 14)
            (org-agenda-overriding-header "\nAgenda\n")))
   (alltodo ""
            ((org-agenda-block-separator nil)
             (org-agenda-skip-function
              '(or
                (org-agenda-skip-if nil
                                    '(scheduled deadline))))
             (org-agenda-overriding-header "\nBacklog\n")))))
 ("" "Agenda for the day"
  ((agenda ""
           ((org-agenda-span 1)
            (org-agenda-scheduled-leaders
             '("" "Sched.%2dx: "))
            (org-agenda-block-separator nil)
            (org-agenda-entry-types
             '(:scheduled :timestamp :sexp))
            (org-scheduled-past-days 0)
            (org-agenda-day-face-function
             (lambda
               (date)
               'org-agenda-date))
            (org-agenda-format-date "%A %-e %B %Y")
            (org-agenda-overriding-header "\nAgenda for the day\n")))
   (todo "NEXT"
         ((org-agenda-block-separator nil)
          (org-agenda-overriding-header "\nCurrent Tasks\n")))))
 ("c" "create"
  ((agenda ""
           ((org-agenda-span 'day)
            (org-deadline-warning-days 60)))
   (tags-todo "diy+create+do+buy+make+wip"
              ((org-agenda-overriding-header "wip")))
   (tags-todo "diy+create+do"
              ((org-agenda-overriding-header "create")))
   (tags-todo "buy"
              ((org-agenda-overriding-header "buy")))
   (tags-todo "make"
              ((org-agenda-overriding-header "make")))))
 ("g" "GTD"
  ((agenda ""
           ((org-agenda-span 'day)
            (org-deadline-warning-days 60)))
   (tags-todo "now"
              ((org-agenda-overriding-header "\nnow\n")))
   (tags-todo "wip"
              ((org-agenda-overriding-header "\nwip\n")))
   (todo "TODO"
         ((org-agenda-overriding-header "\nto process\n")
          (org-agenda-files
           '("~/life//roam/inbox.org"))))
   (todo "TODO"
         ((org-agenda-overriding-header "\ndaily inbox\n")
          (org-agenda-files qz/agenda-daily-files)))
   (todo "TODO"
         ((org-agenda-overriding-header "\nemails\n")
          (org-agenda-files
           '("~/life//roam/emails.org"))))
   (todo "TODO"
         ((org-agenda-overriding-header "\none-off Tasks\n")
          (org-agenda-files
           '("~/life//roam/next.org"))))
   (todo "TODO"
         ((org-agenda-overriding-header "\nto yak shave\n")
          (org-agenda-files
           '("~/life//roam/emacs.org"))))))
 ("n" "Agenda and all TODOs"
  ((agenda "")
   (alltodo ""))))
#+end_src

******* 1 ; events
:PROPERTIES:
:ID:       57a17f21-6c71-4527-8d30-744a8701874c
:CREATED:  [2022-06-27 Mon 10:55]
:UPDATED:  [2022-06-27 Mon 10:57]
:ROAM_EXCLUDE: t
:END:

could do with some love; dates above are a bit redundant maybe

- :: https://emacs.stackexchange.com/questions/22077/org-agenda-how-to-show-only-todos-with-deadline

#+begin_src emacs-lisp :noweb-ref agenda
(add-to-list
 'org-agenda-custom-commands
 '("1" "Events" agenda "display deadlines and exclude scheduled"
   ((org-agenda-span 'year)
    (org-agenda-time-grid nil)
    (org-agenda-show-all-dates nil)
    (org-agenda-entry-types '(:deadline)) ;; this entry excludes :scheduled
    (org-deadline-warning-days 0) )))

#+end_src

#+RESULTS:
|  1 | Events   | agenda                                                                                                                                                                                                                                                                                                                                                                             | display deadlines and exclude scheduled | ((org-agenda-span 'year) (org-agenda-time-grid nil) (org-agenda-show-all-dates nil) (org-agenda-entry-types '(:deadline)) (org-deadline-warning-days 0))  |
|  1 | Events   | agenda                                                                                                                                                                                                                                                                                                                                                                             | display deadlines and exclude scheduled | ((org-agenda-span 'month) (org-agenda-time-grid nil) (org-agenda-show-all-dates nil) (org-agenda-entry-types '(:deadline)) (org-deadline-warning-days 0)) |
|  | Overview | ((agenda  ((org-agenda-time-grid nil) (org-agenda-start-on-weekday nil) (org-agenda-start-day +1d) (org-agenda-span 14) (org-agenda-show-all-dates nil) (org-agenda-time-grid nil) (org-deadline-warning-days 0) (org-agenda-block-separator nil) (org-agenda-entry-types '(:deadline)) (org-agenda-skip-function '(org-agenda-skip-entry-if 'done)) (org-agenda-overriding-header |                                         |                                                                                                                                                           |

******* 0 ; moving
:PROPERTIES:
:ID:       d132d405-315d-4801-914f-b18126f2afa5
:CREATED:  [2022-10-06 Thu 12:00]
:UPDATED:  [2022-10-06 Thu 12:35]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref agenda

(defun zin/org-agenda-skip-tag (tag &optional others)
  "Skip all entries that correspond to TAG.

If OTHERS is true, skip all entries that do not correspond to TAG."
  (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))
        (current-headline (or (and (org-at-heading-p)
                                   (point))
                              (save-excursion (org-back-to-heading)))))
    (if others
        (if (not (member tag (org-get-tags-at current-headline)))
            next-headline
          nil)
      (if (member tag (org-get-tags-at current-headline))
          next-headline
        nil))))


(add-to-list
 'org-agenda-custom-commands
 '("0" "moving"
   ;; TODO: Add A priority to the top.
   ((agenda
     ""
     ((org-agenda-time-grid nil)
      (org-agenda-start-on-weekday nil)
      (org-agenda-start-day "+1d")
      (org-agenda-span 160)
      (org-agenda-show-all-dates nil)
      (org-agenda-time-grid nil)
      (org-agenda-show-future-repeats nil)
      (org-agenda-block-separator nil)
      (org-agenda-entry-types '(:deadline))
      (org-agenda-skip-function
       '(not
         (zin/org-agenda-skip-tag "moving" 't)
         ;; '(org-agenda-skip-entry-if 'notregexp":moving:") ; no love for inherited tags
         ))
      (org-agenda-overriding-header "\nUpcoming deadlines (+160d)\n")))
    (agenda
     "*"
     ((org-agenda-block-separator nil)
      (org-agenda-span 160)
      (org-agenda-show-future-repeats nil)
      (org-agenda-skip-deadline-prewarning-if-scheduled t)
      (org-agenda-skip-function
       '(org-agenda-skip-entry-if 'notregexp":moving:"))
      (org-agenda-overriding-header "\nAgenda\n")))
    (tags-todo "moving"
               ((org-agenda-block-separator nil)
                (org-agenda-skip-function '(or (org-agenda-skip-if nil '(scheduled))))
                (org-agenda-overriding-header "\nMoving Backlog\n"))))))
#+end_src

#+RESULTS:
| 0 | moving | ((agenda  ((org-agenda-time-grid nil) (org-agenda-start-on-weekday nil) (org-agenda-start-day +1d) (org-agenda-span 160) (org-agenda-show-all-dates nil) (org-agenda-time-grid nil) (org-agenda-show-future-repeats nil) (org-agenda-block-separator nil) (org-agenda-entry-types '(:deadline)) (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp :moving:)) (org-agenda-overriding-header |

******* destroy
:PROPERTIES:
:ID:       a1d82c8a-d0ed-4da8-9e9e-9705f76cb824
:CREATED:  [2022-10-06 Thu 12:35]
:UPDATED:  [2022-10-06 Thu 12:35]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref null
(when-let ((cmd (assoc "0" org-agenda-custom-commands)))
  (setq org-agenda-custom-commands
        (remove cmd org-agenda-custom-commands)))
#+end_src

#+RESULTS:
| 0 | moving | ((agenda  ((org-agenda-time-grid nil) (org-agenda-start-on-weekday nil) (org-agenda-start-day +1d) (org-agenda-span 14) (org-agenda-show-all-dates nil) (org-agenda-time-grid nil) (org-agenda-show-future-repeats nil) (org-agenda-block-separator nil) (org-agenda-entry-types '(:deadline)) (org-agenda-skip-function '(org-agenda-skip-entry-if 'done)) (org-agenda-overriding-header |

****** noweb tangler
:PROPERTIES:
:ID:       3719c9a6-45ea-497e-a3ee-bc4c64a566e3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-07-16 Sun 22:10]
:END:

#+begin_src emacs-lisp  :noweb-ref org
;; NOWEB AGENDA START

(with-eval-after-load 'org-agenda
  (message "AGENDA start")
  <<agenda>>
  )

;; NOWEB AGENDA END

#+end_src

#+RESULTS:
: qz/diary-sunset

****** settings                                                                 :var:
:PROPERTIES:
:ID:       359219d7-3d55-44aa-b8f2-c5046125bb29
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-10-06 Thu 12:26]
:END:
******* org-agenda-files
:PROPERTIES:
:ID:       0e532fda-1e96-4bc4-84ad-fb4ecc809c5d
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(setq qz/org-agenda-files
      (mapcar (lambda (f) (expand-file-name (format "%s/%s" org-roam-directory f)))
              '("calendar-home.org" "calendar-work.org" "schedule.org")))
#+end_src

#+RESULTS:
| /home/samuel/life/roam/calendar-home.org | /home/samuel/life/roam/calendar-work.org | /home/samuel/life/roam/schedule.org |
******* org-agenda-daily-files
:PROPERTIES:
:ID:       77414dfd-4a4c-440a-be63-5241d5e5407c
:CREATED:  [2022-03-16 Wed 08:51]
:UPDATED:  [2022-03-16 Wed 08:51]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref agenda
(defvar qz/agenda-daily-files nil)
#+end_src
******* org-agenda-hide-tags-regexp
:PROPERTIES:
:ID:       42309c7b-5946-4c86-b2bc-3f1c92e88d21
:CREATED:  [2022-03-31 Thu 10:49]
:UPDATED:  [2022-09-28 Wed 17:04]
:ROAM_EXCLUDE: t
:END:

because a mechanism for the discovery of =TODO= entries is

#+begin_src emacs-lisp :noweb-ref agenda
(setq org-agenda-hide-tags-regexp "project")
#+end_src

#+RESULTS:
: project

****** visual
:PROPERTIES:
:ID:       a9e4cf66-2163-4b4e-a523-53c4a1ff47fc
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******* category :: agenda format refinement                                    :org:
:PROPERTIES:
:ID:       428c5706-9498-44e8-8960-2e893347d737
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-22 Fri 09:52]
:END:
******** org-category ;; agenda
:PROPERTIES:
:ID:       0dd4254a-f725-4df0-8843-a25e22b4b299
:CREATED:  [2022-04-22 Fri 09:56]
:UPDATED:  [2022-04-22 Fri 09:56]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref agenda
(defun qz/org-category (&optional len)
  (let* ((len (or len 25)))
    (->>
     (if buffer-file-name
         (file-name-sans-extension (file-name-nondirectory buffer-file-name))
       "")
     (replace-regexp-in-string "private-" "")
     (replace-regexp-in-string
      ;; datetime from file, could do "[0-9]\\{6\\}T[0-9]\\{6\\}Z?-"
      (concat "[0-9][0-9][0-9][0-9]" "[0-9][0-9]" "[0-9][0-9]"
              "T" "[0-9][0-9]" "[0-9][0-9]" "[0-9][0-9]" "Z-")
      "")
     (s-pad-right len " ")
     (s-truncate len))))

;;(qz/org-category)
#+end_src

#+RESULTS:
: qz/org-category

******** org-agenda-prefix-format
:PROPERTIES:
:ID:       9ce2b921-9c56-42b8-aa6a-579972a92a60
:CREATED:  [2022-04-22 Fri 09:56]
:UPDATED:  [2022-06-27 Mon 10:49]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref agenda
(let* ((agenda "  %(qz/org-category)%-12t% s")
       (other "%i%(qz/org-category 12)%l"))
  (setq org-agenda-prefix-format (list (cons 'agenda agenda)
                                       (cons 'todo other)
                                       (cons 'todo other)
                                       (cons 'todo other)
                                       (cons 'search other))))

#+end_src

#+RESULTS:
: ((agenda .   %(qz/org-category)%-12t% s) (todo . %i%(qz/org-category 12)%l) (todo . %i%(qz/org-category 12)%l) (todo . %i%(qz/org-category 12)%l) (search . %i%(qz/org-category 12)%l))

******** vulpea's category refinement
:PROPERTIES:
:ID:       6c717faa-ecc5-41b3-a93e-606fa9170d7a
:CREATED:  [2022-04-22 Fri 09:53]
:UPDATED:  [2022-04-22 Fri 09:53]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref agenda
(defun vulpea-agenda-category (&optional len)
  "Get category of item at point for agenda.

Category is defined by one of the following items:
- CATEGORY property
- TITLE keyword
- TITLE property
- filename without directory and extension

When LEN is a number, resulting string is padded right with
spaces and then truncated with ... on the right if result is
longer than LEN.

Usage example:

  (setq org-agenda-prefix-format
        '((agenda . \" Emacs Configuration %?-12t %12s\")))

Refer to `org-agenda-prefix-format' for more information."
  (let* ((file-name (when buffer-file-name
                      (file-name-sans-extension
                       (file-name-nondirectory buffer-file-name))))
         (title (qz/node-title))
         (category (org-get-category))
         (result
          (or (if (and title
                       (string-equal category file-name))
                  title
                category)
              "")))
    (if (numberp len)
        (s-truncate len (s-pad-right len " " result))
      result)))
#+end_src

#+RESULTS:
: vulpea-agenda-category
****** etc
:PROPERTIES:
:ID:       d21041e2-b257-4f84-93bd-c43fd895c33b
:CREATED:  [2022-04-21 Thu 15:26]
:UPDATED:  [2022-04-21 Thu 15:26]
:ROAM_EXCLUDE: t
:END:
******* lunar phases
:PROPERTIES:
:ID:       730db291-2c3d-4995-928f-81685991be07
:CREATED:  [2022-04-14 Thu 15:55]
:UPDATED:  [2022-04-14 Thu 15:55]
:ROAM_EXCLUDE: t
:END:

- :: https://orgmode.org/worg/org-hacks.html#org92f0a44

******** org-lunar-phases                                                      :func:
:PROPERTIES:
:ID:       84219025-9fc0-41c0-b43b-70c5d61aed77
:CREATED:  [2022-04-14 Thu 15:55]
:UPDATED:  [2022-04-14 Thu 15:55]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref agenda
(org-no-warnings (defvar date))
(defun qz/org-lunar-phases ()
  "Show lunar phase in Agenda buffer."
  (require 'lunar)
  (let* ((phase-list (lunar-phase-list (nth 0 date)
                                       (nth 2 date)))
         (phase (cl-find-if (lambda (phase)
                              (equal (car phase) date))
                            phase-list)))
    (when phase
      (setq ret (concat (lunar-phase-name (nth 2 phase)))))))
#+end_src

#+RESULTS:
: qz/org-lunar-phases

******** lunar-phase-names
:PROPERTIES:
:ID:       f8dbfc55-a12f-4481-909c-aa7e15339931
:CREATED:  [2022-04-14 Thu 15:55]
:UPDATED:  [2022-07-09 Sat 17:40]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref agenda
;; 🌑🌒🌓🌔🌕🌖🌗🌘🌙🌚🌛🌜
(setq lunar-phase-names
      '("🌚 new moon" ; unicode symbol : 🌑 use full circle as fallback
        "🌛 first quarter moon"
        "🌝 full moon" ; unicode symbol: 🌕 use empty circle as fallback
        "🌜 last quarter moon"))
#+end_src

#+RESULTS:
| 🌚 new moon | 🌛 first quarter moon | 🌝 full moon | 🌜 last quarter moon |

******* sunrise + set
:PROPERTIES:
:ID:       8bcfd1c5-2002-4e81-90fe-39a98ff678b1
:CREATED:  [2022-04-14 Thu 15:55]
:UPDATED:  [2022-04-21 Thu 15:36]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref agenda
(setq calendar-latitude 52.5)  ; imprecise
(setq calendar-longitude 13.4)
(setq calendar-location-name "berlin")

(autoload 'solar-sunrise-sunset "solar.el")
(autoload 'solar-time-string "solar.el")
(defun qz/diary-sunrise ()
  "Local time of sunrise as a diary entry.
The diary entry can contain `%s' which will be replaced with
`calendar-location-name'."
  (let ((l (solar-sunrise-sunset date)))
    (when (car l)
      (concat
       (if (string= entry "")
           "🌄 sunrise"
         (format entry (eval calendar-location-name))) " "
       (solar-time-string (caar l) nil)))))

(defun qz/diary-sunset ()
  "Local time of sunset as a diary entry.
The diary entry can contain `%s' which will be replaced with
`calendar-location-name'."
  (let ((l (solar-sunrise-sunset date)))
    (when (cadr l)
      (concat
       (if (string= entry "")
           "🌅 sunset"
         (format entry (eval calendar-location-name))) " "
       (solar-time-string (caadr l) nil)))))
#+end_src

#+RESULTS:
: qz/diary-sunset
***** column
:PROPERTIES:
:CREATED:  [2023-09-29 Fri 17:14]
:UPDATED:  [2023-09-29 Fri 17:14]
:ID:       eabd7052-7cb7-48de-af8c-28452e703a01
:ROAM_EXCLUDE: t
:END:
****** org-column-default-format
:PROPERTIES:
:CREATED:  [2023-09-29 Fri 17:14]
:UPDATED:  [2023-09-29 Fri 17:28]
:ID:       d02e3f08-8480-40d2-84b0-665e540ce027
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(setq org-columns-default-format "%22UPDATED %100ITEM %TODO %3PRIORITY %TAGS")
#+end_src

#+RESULTS:
: "%22UPDATED %100ITEM %TODO %3PRIORITY %TAGS"

****** qz/unorg-columns
:PROPERTIES:
:CREATED:  [2023-09-29 Fri 17:14]
:UPDATED:  [2023-09-29 Fri 17:14]
:ID:       080cbe4c-a212-4a4d-a472-45b231475913
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(defun qz/unorg-columns ()
  (interactive)
  (org-columns-remove-overlays))
#+end_src

#+RESULTS:
: qz/unorg-columns

***** ql
:PROPERTIES:
:ID:       604af92f-0215-4639-9eb8-6f1554800f94
:CREATED:  [2023-04-21 Fri 15:28]
:UPDATED:  [2023-04-21 Fri 15:28]
:ROAM_EXCLUDE: t
:END:
****** qz/org-ql                                                         :hello:baby:
:PROPERTIES:
:ID:       f4ac07db-3576-4843-8164-ffb169de5db1
:CREATED:  [2023-04-21 Fri 15:28]
:UPDATED:  [2023-04-21 Fri 15:37]
:ROAM_EXCLUDE: t
:END:


#+begin_src emacs-lisp :noweb-ref org :results silent
;;;;
(defun qz/org-ql (select from where order limit transform)
  (let ((limit (or limit 100)))
    (mapcar
     transform
     (seq-take
      (org-ql-query
        :select select
        ;;:from org-agenda-files
        ;;:from (seq-take (cl-sort (org-roam-dailies--list-files) 'string-greaterp) 1)
        :from from
        ;;:where '(clocked)
        ;;:where '(todo)
        ;; NOTE arbitrary function doesn't work
        ;; :where '((lambda (&rest e)
        ;;            (message "where: %s" e)
        ;;            t))
        :order-by order)
      limit))))

(defun qz/org-ql-:select-default ()
  (lambda ()
    (list :title   (cadar (org-collect-keywords '("TITLE")))
          :outline (org-get-outline-path)
          :heading (org-get-heading)
          :id      (org-id-get)
          :tags    (s-join ":" (org-get-tags))
          :node    (org-roam-node-at-point)
          :updated (or (org-entry-get (point) "UPDATED") "[0000-00-00]")
          :created (or (org-entry-get (point) "CREATED") "[0000-00-00]"))))

(defun qz/org-ql-:transform-default (cols)
  (lambda (e)
    (let ((trunc 75))
      (append
       (mapcar (lambda (col) (plist-get e col)) cols)
       (list
        ;; heading
        (org-make-link-string
         (concat "id:" (plist-get e :id))
         (s-truncate trunc
                     (org-no-properties (org-link-display-format
                                         (plist-get e :heading)))))
        ;; node
        (let ((n (plist-get e :node)))
          (org-make-link-string
           (org-roam-node-id n)
           (s-truncate trunc (org-roam-node-title n)))))))))

(defun qz/org-ql-:order-time (col)
  (let ((col (or col :updated)))
    `(lambda (a b)
       (qz/debug- (message "order pred %s" ,col))
       (when-let* ((aa (plist-get a ,col))
                   (bb (plist-get b ,col)))
         (not (time-less-p (date-to-time aa)
                           (date-to-time bb)))))))

;; (funcall (qz/org-ql-:order-time :created)
;;          '(:updated "2023-01-01")
;;          '(:updated "2023-01-02"))

(defun qz/org-ql--time (time-col &optional limit cols)
  (let ((cols (or cols
                  (list time-col :title ))))
    (qz/org-ql
     ;; select
     (qz/org-ql-:select-default)
     ;;; from
     (qz/month-files)
     ;; (length (org-roam-list-files)) ; 3497... this is just too much
     ;; where
     nil
     ;; order
     (qz/org-ql-:order-time time-col)
     ;; limit
     limit
     ;; transform
     (qz/org-ql-:transform-default cols))))


(defun qz/org-ql--updated ()
  (qz/org-ql--time :updated))

(defun qz/org-ql--created ()
  (qz/org-ql--time :created))

;;(car (qz/org-ql--updated))
;;(qz/org-ql--created)

#+end_src

******* org-now
:PROPERTIES:
:ID:       6f7cb6d8-c938-4b28-81ce-0a35cd891132
:CREATED:  [2023-06-05 Mon 21:29]
:UPDATED:  [2023-09-24 Sun 16:36]
:ROAM_EXCLUDE: t
:END:



#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-now ()
  "
default ::
- feed
  - stored
    - [headline]
  - clocking
    - [headline]

prefix C-u ::
[default]
-

"
  (interactive)
  (let* ((b (get-buffer-create "*org-now*"))
         (n 5))
    (save-excursion
      (with-current-buffer b
        (setq-local default-directory org-directory)
        (read-only-mode -1)
        (org-mode)
        (olivetti-mode -1)

        (mark-whole-buffer)
        (delete-region (region-beginning)
                       (region-end))

        (cl-labels ((line (&rest s)
                      (insert (format "%s\n" (or (and s (s-join " " s)) "")))))
          ;;(line "* org-now")
          (eval-after-load 'svg-clock
            (svg-clock-insert))
          (line)

          (insert "* feed\n")


          ;; (insert "** looking at\n")
          ;; (line)
          ;; (mapcar (lambda (s)
          ;;           (ignore-errors
          ;;             (line "-" (plist-get (car s) :timestamp) "::"
          ;;                   (org-link-make-string
          ;;                    (car (cdr s))
          ;;                    ;; FIXME ugly ass conditions
          ;;                    (or (cadr (cdr s))
          ;;                        (car (cdr s)))))))
          ;;         qz/looking-at)
          ;; (line)


          (insert "** stored")
          (line)
          (mapcar (lambda (s) (line "- " (apply 'org-link-make-string s)))
                  org-stored-links)
          (line)

          (insert "** clocking")
          (line)

          ;; XXX copied from above
          ;; (headline "" (mapcar (line (links (link-fn)))))
          (mapcar (lambda (s)
                    (and s
                       (line "- " (apply 'org-link-make-string s))))
                  ;; FYI to get max value from this
                  ;; (setq org-clock-history-length 1000000) ;; 1 million
                  ;; (setq org-clock-persist t)
                  ;; (find-file org-clock-persist-file)
                  ;; (org-clock-load) ;; to historic clocks
                  (save-excursion
                    (mapcar (lambda (h)
                              (when-let* ((b (and h (marker-buffer h))))
                                (with-current-buffer b
                                  (goto-char h)
                                  (list (concat "id:" (org-id-get-create))
                                        (org-get-heading)))))
                            org-clock-history)))
          (line)

          ;; TODO new section? actions/refile actions/captured
          (message "org-now: prefix %s" current-prefix-arg)
          (setq fmt (lambda (r)
                      (insert (format "| %s |\n"
                                      (s-join " | " r))))
           pref (lambda ()
                       (insert "** heading\n")
                       (insert "*** updated\n")
                       ;; TODO lexical closure issue (because of when?)

                       (funcall fmt '("date" "title" "heading" "node"))
                       (insert "|----------\n")
                       (mapcar fmt (seq-take (qz/org-ql--updated) n))
                       (org-table-align)
                       (insert "\n")

                       (insert "*** created\n")
                       (funcall fmt '("date" "title" "heading" "node"))
                       (insert "|----------\n")
                       (mapcar fmt (seq-take (qz/org-ql--created) n))
                       (org-table-align)
                       (insert "\n")

                       (insert "** node\n")
                       (insert "*** updated\n")
                       (funcall fmt '("date" "node-title"))
                       (insert "|----------\n")
                       (mapcar fmt (org-babel-execute:sqlite
                                    (format "
select
  (
    case when instr(properties, '(\"UPDATED\" .') > 0
      then substr(properties, instr(properties, '(\"UPDATED\" .') + 15, 20)
    else null end
  ) as created,
  title
  from nodes
 where (
   instr(properties, '(\"UPDATED\" .') > 0
 )
 order by created desc
 limit %s" n)
                                    '((:db . "~/.config/emacs/org-roam.db"))))
                       (org-table-align)
                       (insert "\n")


                       (insert "*** created\n")
                       (funcall fmt '("date" "node-title"))
                       (insert "|----------\n")
                       (mapcar fmt (org-babel-execute:sqlite
                                    (format "
select
  (
    case when instr(properties, '(\"CREATED\" .') > 0
      then substr(properties, instr(properties, '(\"CREATED\" .') + 15, 20)
    else null end
  ) as created,
  title
  from nodes
 where (
   instr(properties, '(\"CREATED\" .') > 0
 )
 order by created desc
 limit %s" n)
                                    '((:db . "~/.config/emacs/org-roam.db"))))
                       (org-table-align)
                       (insert "\n")
                       )))
          (when current-prefix-arg
            (funcall pref)
            ;;             (insert "** heading\n")
            ;;             (insert "*** updated\n")
            ;;             ;; TODO lexical closure issue (because of when?)

            ;;             (funcall 'fmt '("date" "title" "heading" "node"))
            ;;             (insert "|----------\n")
            ;;             (mapcar 'fmt (seq-take (qz/org-ql--updated) n))
            ;;             (org-table-align)
            ;;             (insert "\n")

            ;;             (insert "*** created\n")
            ;;             (funcall 'fmt '("date" "title" "heading" "node"))
            ;;             (insert "|----------\n")
            ;;             (mapcar 'fmt (seq-take (qz/org-ql--created) n))
            ;;             (org-table-align)
            ;;             (insert "\n")

            ;;             (insert "** node\n")
            ;;             (insert "*** updated\n")
            ;;             (funcall 'fmt '("date" "node-title"))
            ;;             (insert "|----------\n")
            ;;             (mapcar 'fmt (org-babel-execute:sqlite
            ;;                          (format "
            ;; select
            ;;   (
            ;;     case when instr(properties, '(\"UPDATED\" .') > 0
            ;;       then substr(properties, instr(properties, '(\"UPDATED\" .') + 15, 20)
            ;;     else null end
            ;;   ) as created,
            ;;   title
            ;;   from nodes
            ;;  where (
            ;;    instr(properties, '(\"UPDATED\" .') > 0
            ;;  )
            ;;  order by created desc
            ;;  limit %s" n)
            ;;                          '((:db . "~/.config/emacs/org-roam.db"))))
            ;;             (org-table-align)
            ;;             (insert "\n")


            ;;             (insert "*** created\n")
            ;;             (funcall fmt '("date" "node-title"))
            ;;             (insert "|----------\n")
            ;;             (mapcar fmt (org-babel-execute:sqlite
            ;;                          (format "
            ;; select
            ;;   (
            ;;     case when instr(properties, '(\"CREATED\" .') > 0
            ;;       then substr(properties, instr(properties, '(\"CREATED\" .') + 15, 20)
            ;;     else null end
            ;;   ) as created,
            ;;   title
            ;;   from nodes
            ;;  where (
            ;;    instr(properties, '(\"CREATED\" .') > 0
            ;;  )
            ;;  order by created desc
            ;;  limit %s" n)
            ;;                          '((:db . "~/.config/emacs/org-roam.db"))))
            ;;             (org-table-align)
            ;;             (insert "\n"))

            ;; end tables
            )
          (read-only-mode 1)
          ;; end display
          ))
      (display-buffer b)))

  (define-key global-map (kbd "C-s-n") 'qz/org-now)
#+end_src

#+RESULTS:
: qz/org-now

******* org-anno
:PROPERTIES:
:ID:       dc1545dc-0425-4b80-b01e-c1b1bad6b4bf
:CREATED:  [2023-06-19 Mon 19:04]
:UPDATED:  [2023-07-15 Sat 19:27]
:END:
:LOGBOOK:
CLOCK: [2023-07-15 Sat 18:16]--[2023-07-15 Sat 18:20] =>  0:04
:END:


feels like I'm rewriting org-capture here, as org-noter.

the ability to grab stuff /before capture/ is solid now, given =hoist=.

so, maybe I need to rethink this.

- highlight-region, auto-face-selection, ... are nice.

  this helps me in the source buffer -- but /will I/ (multi)act backwards?  (i.e. occur, ...)

the basic question; in reading '[[id:9038d1de-c374-4c3f-be25-d6a88424ec28][chatgpt weighing in]]' what helps me to pick the text apart?

what is the flow?
- "captures in the same general area go to the same place"
  - /general area/ X /same place/ determine the place.
    - ...


#+begin_src emacs-lisp :noweb-ref org
(defun qz/choose-anno-mode ()
  (completing-read "anno: " '(full light)))

(defun qz/anno-yank-region-to-point ()
  "use with prefix argument to make an index to the buffer"
  (interactive)
  (when-let* ((s (qz/peek-region))
              (s (s-trim s))
              (r (bookmark-make-record))
              (L (or (ignore-errors (let ((org-stored-links '()))
                                      (call-interactively 'org-store-link)))
                     '("" . "")))
              (l (apply 'org-link-make-string l))
              (info (buffer-name (current-buffer)))
              (f   (qz/anno-face nil))
              (buf (qz/anno-buffer info)))
    (with-current-buffer buf
      ;; hl in org-anno
      (highlight-phrase s f)
      ;;; ensure org
      (when (not (eq major-mode 'org-mode))
        (org-mode))
      ;; cl-case choose-anno-mode
      (cond
       ;; new default
       ((eq 1 current-prefix-arg)
        (end-of-buffer)
        (org-insert-heading-respect-content)
        (insert l))
       ;;
       (current-prefix-arg
        (end-of-buffer)
        ;; (ignore-errors
        ;;   (end-of-line)
        ;;   (org-forward-sentence))
        (org-insert-heading-respect-content)
        (insert (format "%s :: %s\n"
                        l
                        (org-link-make-string
                         (format "elisp:(with-current-buffer (get-buffer \"%s\") (occur \"%s\"))" info s)
                         (s-truncate 30 s))))
        (insert (format "#+begin_quote %s\n%s\n#+end_quote"
                        l s)))
       (t
        (end-of-buffer)
        (insert (format "\n- \"%s\"\n" s))
        (display-buffer buf))))
    ;; hl in source buffer
    (highlight-phrase s f)
    s))

(setq org-link-elisp-confirm-function 'y-or-n-p)
(defun qz/anno-face (&optional phrase)
  ;; TODO
  'underline
  'gnus-emphasis-underline-bold-italic)

(defun qz/anno-buffer (&optional source)
  "future; there may be many"
  (get-buffer-create (format "*org-anno :: [%s]*" source)))

(define-key global-map (kbd "s-i") 'qz/anno-yank-region-to-point)



(define-key global-map (kbd "C-<mouse-down-1>")
            'qz/anno-yank-region-to-point)
(define-key global-map (kbd "C-<mouse-1>")
            'qz/anno-yank-region-to-point)
(define-key global-map (kbd "C-s-<down-mouse-1>")
            'qz/anno-yank-region-to-point)
#+end_src

#+RESULTS:
: qz/anno-yank-region-to-point

******** org-link-highlight-last
:PROPERTIES:
:ID:       50e88ae0-8bf2-4acc-b299-0a2a8645a83d
:CREATED:  [2023-06-20 Tue 17:12]
:UPDATED:  [2023-07-04 Tue 16:34]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(defun qz/org-link-highlight-last (&rest args)
  (qz/debug- (message "highlight-last: args :: %s" args))
  ;; XXX search back through stack & determine if org-store-link is
  ;; interactive?
  (when-let ((s (cadar org-stored-links)))
    (highlight-phrase (s-trim s)
                      (qz/anno-face))))

(qz/advice- org-store-link :after qz/org-link-highlight-last)
#+end_src

#+RESULTS:
| qz/advice-enable--org-store-link--qz/org-link-highlight-last | qz/advice-disable--org-store-link--qz/org-link-highlight-last |


is it a regular region?


testing

so, it will insert at the end of the region

******* alternative sources
:PROPERTIES:
:ID:       509ed476-dddc-4552-90b0-4465ac0e32dc
:CREATED:  [2023-06-05 Mon 21:29]
:UPDATED:  [2023-06-05 Mon 21:29]
:ROAM_EXCLUDE: t
:END:
******** ripgrep
:PROPERTIES:
:ID:       1a4ab8d4-5d82-40ae-ad0b-a699f3ed3a32
:CREATED:  [2023-06-05 Mon 21:29]
:UPDATED:  [2023-06-05 Mon 21:29]
:ROAM_EXCLUDE: t
:END:
********* headings per file
:PROPERTIES:
:ID:       d7d8404f-e234-423e-a7ca-0acfe8f494e9
:CREATED:  [2023-06-05 Mon 21:29]
:UPDATED:  [2023-07-23 Sun 10:57]
:ROAM_EXCLUDE: t
:END:
#+begin_src shell :results silent
rg ':(CREATED|UPDATED):' $HOME/life -c -t org  | sort -nk2 -t: | tail -n 10
#+end_src

********* most recent DATE for file
:PROPERTIES:
:ID:       14662bb3-a324-41b0-86d2-0cfe3dba38ce
:CREATED:  [2023-06-05 Mon 21:29]
:UPDATED:  [2023-07-23 Sun 10:57]
:ROAM_EXCLUDE: t
:END:

#+begin_src shell :results silent
rg ':(CREATED|UPDATED):' $HOME/life -t org  \
    | awk -F: '{print $1, $3 $4 ":" $5 }' \
    | sort  | uniq | tail -n25
#+end_src

***** clock
:PROPERTIES:
:ID:       d4dca377-556a-4783-9ad2-7eac26cece41
:CREATED:  [2023-04-03 Mon 12:17]
:UPDATED:  [2023-04-03 Mon 12:17]
:ROAM_EXCLUDE: t
:END:
****** org-clock-idle-time
:PROPERTIES:
:ID:       6cd9b9aa-3834-421c-a4ca-3451613479ce
:CREATED:  [2023-04-03 Mon 12:17]
:UPDATED:  [2023-04-03 Mon 12:17]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref org
(setq org-clock-idle-time 15)

#+end_src

***** timer
:PROPERTIES:
:ID:       99c0e72f-ba27-4b1d-9e5f-92ce387f8f32
:CREATED:  [2023-04-15 Sat 13:41]
:UPDATED:  [2023-04-15 Sat 13:43]
:ROAM_EXCLUDE: t
:END:

- from :: [[id:705daa80-7f16-4b05-8afa-a65530bf57a9][emacs: org-id: roam:fun :: a timer & bell in org]]

****** org-timer-default-timer :: 25 minutes :var
:PROPERTIES:
:ID:       dd01f582-01d2-4157-9fbf-ab5ee06182ed
:CREATED:  [2023-04-15 Sat 13:41]
:UPDATED:  [2023-04-15 Sat 13:42]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(setq org-timer-default-timer  "00:25:00")
#+end_src

****** org-clock-sound
:PROPERTIES:
:ID:       2c680f77-51a3-471c-9306-a93c68a2d489
:CREATED:
:UPDATED:  [2023-04-15 Sat 13:57]
:END:

#+begin_src emacs-lisp
(setq qz/clock-sounds '("~/vids/gong-cut.wav"
                        "~/vids/sing-cut.wav")
      org-clock-sound (cadr qz/clock-sounds))
#+end_src

#+RESULTS:
: ~/vids/sing-cut.wav

****** qz/org-timer-set-timer
:PROPERTIES:
:ID:       9a3b3b83-73a0-4898-b930-5dafde83d429
:CREATED:  [2023-04-15 Sat 13:43]
:UPDATED:  [2023-04-15 Sat 13:43]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/org-timer-set-timer (&optional duration)
  "ergonomics

if no prefix arg, set timer with value org-timer-default-timer.
if prefix arg, prompt for time (no arg call of 'org-timer-set-timer)

how this is achieved, ontop of org semantics:

we use the '(4) prefix arg, to respect a running timer, as follows (from doc of org-timer-set-timer):

> Called with a C-u prefix arguments, use ‘org-timer-default-timer’
> without prompting the user for a duration."
  (interactive)
  (let* ((current-prefix-arg (if (or current-prefix-arg prefix-arg)
                                 nil '(4))))
    (call-interactively 'org-timer-set-timer)))
#+end_src

****** {s-u} :: qz/org-timer-set-timer                                          :kbd:
:PROPERTIES:
:ID:       8271bebc-21d9-4d32-9236-77529f64b43e
:CREATED:  [2023-04-15 Sat 13:43]
:UPDATED:  [2023-04-15 Sat 13:44]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(define-key global-map (kbd "s-u") 'qz/org-timer-set-timer)
#+end_src

***** jira
:PROPERTIES:
:ID:       5fd74f4a-26f8-40d8-9947-01927e0f06ed
:CREATED:  [2022-10-11 Tue 17:40]
:UPDATED:  [2022-10-11 Tue 17:40]
:ROAM_EXCLUDE: t
:END:
****** url
:PROPERTIES:
:ID:       0968480e-2a2e-44bf-9641-e672e440aa3b
:CREATED:  [2022-10-11 Tue 17:40]
:UPDATED:  [2023-04-03 Mon 16:55]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(setq jiralib-url "https://goodscloud.atlassian.net")
#+end_src

#+RESULTS:
: https://goodscloud.atlassian.net
****** get-issues-by-board limit=999
:PROPERTIES:
:ID:       7ff6dd68-9f1e-418e-90f4-d1ac7b9e1774
:CREATED:  [2023-04-04 Tue 16:02]
:UPDATED:  [2023-04-04 Tue 16:02]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-jira-get-issues-by-board (&optional board-id)
  "Get list of ISSUES from agile board."
  (interactive)
  (let ((board-id (or board-id (cdr (org-jira-read-board)))))
    (jiralib-get-board-issues
     board-id
     :callback org-jira-get-issue-list-callback
     :limit 999
     :query-params (org-jira--make-jql-queryparams board-id))))
#+end_src

#+RESULTS:
: qz/org-jira-get-issues-by-board

***** [[id:0213945d-cba5-4dd0-812c-9c01d6f51148][babel]]
:PROPERTIES:
:ID:       5bfb32fe-c5fb-46cb-a5ed-fe819d17949e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

****** async
:PROPERTIES:
:ID:       9ae0cd25-0fd9-4c5e-a5af-d5ac80b3a425
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
- :: [[id:4062856a-e182-4820-bc7b-817a693518a3][emacs-ob-async]]

#+begin_src emacs-lisp :noweb-ref org
                                        ;(require 'ob-async)
#+end_src

#+RESULTS:
: ob-async

****** src options                                                              :var:
:PROPERTIES:
:ID:       1ea03a77-5511-41cd-bd74-6ff19e750f4b
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2024-02-17 Sat 17:29]
:END:
#+begin_src emacs-lisp :noweb-ref org
(setq org-confirm-babel-evaluate nil)
(setq org-structure-template-alist
      '(;; yp
        ("d"  . "definition")
        ("ee" . "example")
        ("es" . "src es")
        ("el" . "src emacs-lisp")
        ("q"  . "quote")
        ("sb" . "src shell")
        ("se" . "src emacs-lisp")
        ("sl" . "src scheme")
        ;; ("sp" . "src sql :engine postgres")
        ("sp" . "src python")
        ("sr" . "src R")
        ("ss" . "src")
        ("jp" . "src jupyter-python")
        ("jr" . "src jupyter-R")
        ("r"  . "src restclient")))
#+end_src

#+RESULTS:
: (("d" . "definition") ("ee" . "example") ("es" . "src es") ("el" . "src emacs-lisp") ("q" . "quote") ("sb" . "src shell") ("se" . "src emacs-lisp") ("sl" . "src scheme") ("sp" . "src python") ("sr" . "src R") ("ss" . "src") ("jp" . "src jupyter-python") ("jr" . "src jupyter-R") ("r" . "src restclient"))

****** do-load-languages
:PROPERTIES:
:ID:       f098ceb7-c98e-4e99-ab07-c8833f5a853b
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
fuck the speed my man; {M-x load-library RET ob-} is so annoying
#+begin_src emacs-lisp :noweb-ref org
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (lisp . t)
   ;;(jupyter . t)
   (python . t)
   (jq . t)
   ;;(ipython . t)
   (scheme . t)
   (sql . t)
   ;;(plant-uml . t)
   (shell . t)
   (sqlite . t)
   ;;(elasticsearch . t)j ;; TODO rde package es/rest
   ;;(restclient . t)
   (R . t)))
#+end_src

#+RESULTS:

****** library of babel
:PROPERTIES:
:ID:       922a7334-bfde-448a-bdf2-809f1b8eeb14
:CREATED:  [2021-11-29 Mon]
:ROAM_EXCLUDE: t
:END:

******* lob-ingest-files                                                   :var:func:
:PROPERTIES:
:ID:       05415208-95bf-4153-b65c-32e10112c582
:CREATED:  [2021-11-29 Mon]
:ROAM_EXCLUDE: t
:UPDATED:  [2024-02-01 Thu 14:53]
:END:


#+begin_src emacs-lisp :noweb-ref roam :colnames '(count file) :results table
;; (makunbound 'qz/org-babel-lob-ingest-files)
(defvar qz/org-babel-lob-ingest-files
  (append (mapcar (lambda (s)
                    (when-let ((n (org-roam-node-from-title-or-alias s)))
                      (org-roam-node-file n)))
                  '("NewStore"
                    "kubernetes"
                    "postgres"
                    "es-mode"
                    "elisp"
                    "plantuml"
                    "GNU Guix"
                    "git"
                    "Apache Kafka"
                    "kafka-connect"
                    "bigquery"
                    "gcloud cli"
                    ))
          ;; .. other files
          nil
          ;; ..
          )
  "files from which named `src' blocks should be loaded")

(defun qz/org-babel-do-lob-ingest-files (&optional files)
  (interactive)
  (let ((r (mapcar (lambda (f) (cons (org-babel-lob-ingest f) f))
                   (append qz/org-babel-lob-ingest-files files))))
    ;;(message "%s" (pp r))
    r))

(cons->table
 (qz/org-babel-do-lob-ingest-files))
#+end_src

#+RESULTS:
| count | file                                                      |
|-------+-----------------------------------------------------------|
|    78 | /home/samuel/life/roam/20210420T114708Z-newstore.org      |
|    12 | /home/samuel/life/roam/20210813T161035Z-kubernetes.org    |
|    34 | /home/samuel/life/roam/20200515T151822Z-postgresql.org    |
|     5 | /home/samuel/life/roam/20210813T161035Z-es_mode.org       |
|     2 | /home/samuel/life/roam/20200415T145703Z-emacs_lisp.org    |
|     2 | /home/samuel/life/roam/20210505T135556Z-plantuml.org      |
|     1 | /home/samuel/life/roam/20200919T152005Z-gnu_guix.org      |
|     1 | /home/samuel/life/roam/20200511T150956Z-git.org           |
|    17 | /home/samuel/life/roam/20230829T100710Z-apache_kafka.org  |
|     9 | /home/samuel/life/roam/20230628T155405Z-kafka-connect.org |
|     6 | /home/samuel/life/roam/20220824T094643Z-bigquery.org      |
|     2 | /home/samuel/life/roam/20240109T092025Z-gcloud_cli.org    |

******* choose babel block                                                     :func:
:PROPERTIES:
:ID:       d8ebb517-f247-48a2-af5f-08a3d6c6c3ae
:CREATED: [2021-11-29 Mon]
:ROAM_EXCLUDE: t
:UPDATED:  [2023-04-12 Wed 18:08]
:END:

#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-babel-choose-block (&optional lob)
  "choose block, insert scaffold for args.

might honestly be better to generate `yas' template when we load
blocks with `qz/org-babel-do-lob-ingest-files', but I've never used
yas so idk

use a prefix arg to shortcut (org-table-get-constant \"bonk\")
"
  (interactive)
  ;; HACK I don't understand prefix / current-prefix
  ;; (message "prefix: %s" (list current-prefix-arg prefix-arg lob))
  (let ((lob (or lob
                 (intern (completing-read
                          "lob: " (mapcar 'car org-babel-library-of-babel))))))
    (with-current-buffer (current-buffer)
      (end-of-line)
      (newline)
      (insert (format "#+name: call-%s\n#+call: %s(%s)"
                      lob lob (or (and current-prefix-arg
                                       "(org-table-get-constant \"bonk\")")
                                  "")))

      (when-let
          ((args (remove
                  nil (cl-loop for a in (assoc lob org-babel-library-of-babel)
                               append
                               (when (listp a)
                                 (cl-loop for b in a
                                          collect
                                          (when (eq :var (car b)) (cdr b))))))))
        (message "%s" args)
        (insert (format "(%s)" (s-join ", " args)))))))

;;(qz/org-babel-choose-block 'newstore-get-order-by-type)
#+end_src

#+RESULTS:
: qz/org-babel-choose-block

******* goto babel block
:PROPERTIES:
:ID:       899ee4ec-7b38-4cc7-9435-9015b7adf618
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-04-25 Tue 13:18]
:END:

#+begin_src emacs-lisp :noweb-ref org
(defun qz/lob-get-named-src-block-body (name)
  (cl-destructuring-bind
      (file . pt) (qz/lob-get-named-src-block name)
    (with-current-buffer (find-file-noselect file)
      (save-excursion
        (goto-char pt)
        (org-babel-expand-src-block)))))

;;(apply 'format "hey %s %s %s" (list 1 2 4))

(defun qz/named (name &rest args)
  "shorthand wrapper of `qz/lob-get-named-src-block-body', for clearer header args"
  (apply 'format (qz/lob-get-named-src-block-body name) args))

(defun qz/lob-get-named-src-block (name)
  (message "checking name: %s" name)
  (cl-block named    ; thank u cltl, thank u 1980s, thank u guy steele
    (save-excursion  ; check current-buffer
      (when (not (org-babel-goto-named-src-block name))
        (cl-return-from named (cons (buffer-file-name) (point)))))
    (mapcar (lambda (f)
              (with-current-buffer (find-file-noselect f)
                (save-excursion
                  ;; it's odd that nil means "i found it"
                  (when (not (org-babel-goto-named-src-block name))
                    (cl-return-from named (cons f (point)))))))
            (remove nil qz/org-babel-lob-ingest-files))))

(defun qz/lob-goto-named-src-block (name)
  (interactive
   (list
    (completing-read "lob: " (mapcar 'car org-babel-library-of-babel))))
  (cl-destructuring-bind
      (file . pt) (qz/lob-get-named-src-block name)
    (find-file file)
    (goto-char pt)))
#+end_src

#+RESULTS:
: qz/lob-goto-named-src-block

******** restclient-copy-as-curl + org-babel
:PROPERTIES:
:ID:       b35f66b8-f8d5-404c-9305-ca6c74d24b73
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
we use LOB blocks as

,#+name: call-my-block-name
,#+call: my-block-name(arg="value")

so with the point on =my-block-name=, of the =call= we can invoke:
- {M-x qz/lob-restclient-copy-curl-command}
... to copy the corresponding block reference's restclient definition

to improve:
- format in the call arguments before copying
  - this might be achieved by using =org-element-babel-call-parser= to
    get the components of the call, if no other /interim state/ of the
    called block exists
  - ideally this can be general enough, so as to use the
    =variable-format= type specified by the babel backend's =:var= header
    arg. idk how or where this is though -- reference the list parsing
    in ob-restclient[fn:2] -- literally just smashing it in at the top



#+begin_src emacs-lisp :noweb-ref org
(defun qz/lob-restclient-copy-curl-command (&optional name)
  "this one was a struggle"
  (interactive)
  (when-let ((name (or name (thing-at-point 'symbol))))
    (cl-destructuring-bind
        (file . pt) (qz/lob-get-named-src-block name)
      (save-excursion
        (with-current-buffer (find-file-noselect file)
          (goto-char pt)
          (next-line)
          (let ((expanded (org-babel-expand-src-block)))
            (message "expanded: %s" expanded)
            (with-temp-buffer ;;(get-buffer-create "*restclient*") ;;TODO replace w temp
              (restclient-mode)
              (insert expanded)
              (goto-char (point-min))
              (restclient-jump-next)
              (restclient-copy-curl-command))))))))
#+end_src

#+RESULTS:
: qz/lob-restclient-copy-curl-command

******* {M-l} bind lob-choose-babel-block to insert convention                  :kbd:
:PROPERTIES:
:ID:       7f29a561-60a0-4c5e-9004-ba32910ab0ef
:CREATED: [2021-11-29 Mon]
:UPDATED:  [2023-04-12 Wed 18:09]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(define-key org-babel-map (kbd "M-l") 'qz/org-babel-choose-block)
#+end_src

#+RESULTS:
: qz/org-babel-choose-block

******* {M-g} bind lob-goto-named-src-block to insert convention                :kbd:
:PROPERTIES:
:ID:       fb0c5f97-b758-43fe-85a0-a2fb2514df84
:CREATED:  [2021-11-29 Mon]
:UPDATED:  [2023-04-12 Wed 18:09]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(define-key org-babel-map (kbd "M-l") 'qz/org-babel-choose-block)
#+end_src

#+RESULTS:
: qz/org-babel-choose-block
#+begin_src emacs-lisp :noweb-ref org
(define-key org-babel-map (kbd "M-g") 'qz/lob-goto-named-src-block)
#+end_src

#+RESULTS:
: qz/lob-goto-named-src-block

****** helpers
:PROPERTIES:
:ID:       22e5c99c-afed-4be2-9cd1-296172ca0e09
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******* make-table-constants                                               :func:kbd:
:PROPERTIES:
:ID:       3c5750a5-620d-4b44-9a38-fd0fb218b584
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-12 Tue 16:35]
:END:
#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-babel-make-table-constants ()
  "exec from the top of a tree"
  (interactive)
  (let* ((hi-lock-auto-select-face t)
         (write-constants (equal '(4) current-prefix-arg))
         ;; above is 100x better when you patch `hi-lock-face-symbol-at-point'
         ;; with `(or (and hi-lock-auto-select-face (hi-lock-read-face-name)) 'hi-yellow)'
         (col '()))
    (save-mark-and-excursion
      (org-map-tree
       (lambda ()
         (when-let* ((s (org-get-heading))
                     (s (org-no-properties s))
                     (i (string-match "::" s))
                     (k (substring s 0 (- i 1)))
                     (v (substring s (+ 3 i))))
           (message "key: %s" k)
           (message "value: %s" v)
           (setq col (cons (format "%s=%s" k v) col))
           (funcall-interactively 'highlight-phrase v)
           (message "applied highlight for '%s'" v)
           )))
      (when write-constants
        (org-back-to-heading)
        (next-line)
        (newline)
        (previous-line)
        (insert (format "#+constants: %s" (s-join " " (reverse col))))))
    (message "col: %s" col)
    col))

(define-key org-babel-map (kbd "M-d") 'qz/org-babel-make-table-constants)
#+end_src

#+RESULTS:
: qz/org-babel-make-table-constants
******* {C-c C-v C-RET} ob-shell->terminal                                 :func:kbd:
:PROPERTIES:
:ID:       3ed48629-8f96-4dfe-9cc8-894cfb2920c0
:CREATED:  [2022-06-21 Tue 23:58]
:UPDATED:  [2023-04-12 Wed 17:18]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(defun qz/to-shell (command)
  (interactive)
  (with-current-buffer (vterm "*to-shell*")
    (mapc
     (lambda (c)
       (message c)
       (vterm-send-string c)
       (vterm-send-return))
     (qz/ensure-list command))))

(defun qz/current-src-block ()
  (interactive)
  (s-split
   "[\n]"
   (let ((src
          (nth 6 (car ;; lspec
                  (cdr (car
                        (save-excursion
                          (when-let ((head (org-babel-where-is-src-block-head)))
                            (goto-char head))
                          (org-babel-tangle-single-block 1 t))))))))
     (kill-new src)
     src)))

(defun qz/shell-current-src-block ()
  (interactive)
  (when-let ((command (qz/current-src-block)))
    (qz/to-shell command)))

(define-key org-babel-map (kbd "C-<return>") 'qz/shell-current-src-block)
#+end_src

******* {C-c C-v M-w} org-kill-expanded-src-block                          :func:kbd:
:PROPERTIES:
:ID:       b156336c-2c1e-4ec6-9944-076c6566933f
:CREATED:  [2022-08-16 Tue 18:21]
:UPDATED:  [2023-04-25 Tue 13:19]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-kill-expanded-src-block ()
  (interactive)
  (kill-new (org-babel-expand-src-block))
  (message "copied: %s" (s-truncate 25 (car kill-ring))))

(define-key org-babel-map (kbd "M-w") 'qz/org-kill-expanded-src-block)
#+end_src

#+RESULTS:

: qz/org-kill-expanded-src-block
******* org-expand-call
:PROPERTIES:
:ID:       824bc327-7c73-46cb-b9fe-34c8416eff80
:CREATED:  [2023-04-26 Wed 15:22]
:UPDATED:  [2023-05-07 Sun 15:54]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-expand-src-or-call-block ()
  (when-let* ((context (org-element-lineage
                        (org-element-context)
                        ;; limit to call, src
                        '(inline-babel-call
                          babel-call
                          inline-src-block
                          src-block)
                        t))
              (finfo
               (cl-case (org-element-type context)
                 ((or babel-call inline-babel-call) 'org-babel-lob-get-info)
                 (t 'org-babel-get-src-block-info)))
              (info (funcall finfo context)))
    (let ((old-info (copy-tree info)))
      (setf (nth 2 info) (org-babel-process-params (nth 2 info)))
      (list (car info) (org-babel-expand-src-block nil info)))))
#+end_src

#+RESULTS:
: qz/preview-org-expand-src-or-call-block

******** {C-c C-v v} :: qz/preview-org-expand-src-or-call-block
:PROPERTIES:
:ID:       9242b212-985b-4af0-97d2-e2b591c59e5c
:CREATED:  [2023-04-26 Wed 15:22]
:UPDATED:  [2023-05-07 Sun 15:55]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(defun qz/preview-org-expand-src-or-call-block ()
  (interactive)
  (let* ((buf (progn (and (get-buffer "*qz/Org Src*")
                          (kill-buffer (get-buffer "*qz/Org Src*")))
                     (get-buffer-create "*qz/Org Src*")))
         (info (qz/org-expand-src-or-call-block)))
    (with-current-buffer buf
      (funcall (intern (concat (car info) "-mode")))
      (insert (cadr info)))
    (select-window (temp-buffer-window-show buf))))

(define-key org-babel-map (kbd "v")
            'qz/preview-org-expand-src-or-call-block)

;; NOTE default is:
;; (define-key org-babel-map (kbd "C-v") 'org-babel-expand-src-block)
#+end_src

#+RESULTS:
: qz/preview-org-expand-src-or-call-block


******* list->rows                                                             :func:
:PROPERTIES:
:ID:       5e08ae52-4e0f-40b7-9595-f3c325390959
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-babel--list->rows (name lst)
  (cons (list name)
        (cons 'hline (mapcar 'list lst))))
#+end_src

#+RESULTS:
: qz/org-babel--list->rows

******* patching
:PROPERTIES:
:ID:       71c9cef1-f758-4691-a223-446dc82705fd
:CREATED:  [2022-02-22 Tue 15:27]
:ROAM_EXCLUDE: t
:UPDATED:  [2023-05-07 Sun 15:40]
:END:

******** hi-lock
:PROPERTIES:
:ID:       b75c1c22-a0ad-46a9-aac6-acc16bf296d5
:CREATED:  [2023-05-09 Tue 10:20]
:UPDATED:  [2023-05-09 Tue 10:20]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :tangle no :noweb-ref null
(defun hi-lock-face-symbol-at-point ()
  "Highlight each instance of the symbol at point.
  Uses the next face from `hi-lock-face-defaults' without prompting,
  unless you use a prefix argument.
  Uses `find-tag-default-as-symbol-regexp' to retrieve the symbol at point.

  If REGEXP contains upper case characters (excluding those preceded by `\\')
  and `search-upper-case' is non-nil, the matching is case-sensitive.

  This uses Font lock mode if it is enabled; otherwise it uses overlays,
  in which case the highlighting will not update as you type.  The Font
  Lock mode is considered \"enabled\" in a buffer if its `major-mode'
  causes `font-lock-specified-p' to return non-nil, which means
  the major mode specifies support for Font Lock."
  (interactive)
  (let* ((regexp (hi-lock-regexp-okay
                  (find-tag-default-as-symbol-regexp)))
         (hi-lock-auto-select-face t)
         (face (hi-lock-read-face-name)))
    (or (facep face)
        (setq face (or (and hi-lock-auto-select-face
                            (hi-lock-read-face-name))
                       'hi-yellow)))
    (unless hi-lock-mode (hi-lock-mode 1))
    (hi-lock-set-pattern
     regexp face nil nil
     (if (and case-fold-search search-upper-case)
         (isearch-no-upper-case-p regexp t)
       case-fold-search))))

(defun hi-lock-face-phrase-buffer (regexp &optional face)
  "Set face of each match of phrase REGEXP to FACE.
  Interactively, prompt for REGEXP using `read-regexp', then FACE.
  Use the global history list for FACE.

  If REGEXP contains upper case characters (excluding those preceded by `\\')
  and `search-upper-case' is non-nil, the matching is case-sensitive.
  Also set `search-spaces-regexp' to the value of `search-whitespace-regexp'.

  Use Font lock mode, if enabled, to highlight REGEXP.  Otherwise,
  use overlays for highlighting.  If overlays are used, the
highlighting will not update as you type.  The Font Lock mode
is considered \"enabled\" in a buffer if its `major-mode'
causes `font-lock-specified-p' to return non-nil, which means
the major mode specifies support for Font Lock."
  (interactive
   (list
    (hi-lock-regexp-okay
     (read-regexp "Phrase to highlight" 'regexp-history-last))
    (hi-lock-read-face-name)))
  (or (facep face)
      (setq face (or (and hi-lock-auto-select-face
                          (hi-lock-read-face-name))
                     'hi-yellow)))
  (unless hi-lock-mode (hi-lock-mode 1))
  (hi-lock-set-pattern
   regexp face nil nil
   (if (and case-fold-search search-upper-case)
       (isearch-no-upper-case-p regexp t)
     case-fold-search)
   search-whitespace-regexp))
#+end_src

#+RESULTS:
: hi-lock-face-phrase-buffer

******** syntax table for =<>=
:PROPERTIES:
:ID:       72c8f746-d84c-4902-904a-e4fdc6b3cbe4
:CREATED:  [2023-05-09 Tue 10:20]
:UPDATED:  [2023-05-10 Wed 12:24]
:ROAM_EXCLUDE: t
:END:

- from :: https://emacs.stackexchange.com/a/52209

thanks [[id:0ea561d0-e0fe-4b97-975c-476d62c058c2][John Kitchin]]!

#+begin_src emacs-lisp :noweb-ref org
(defun org-mode-<>-syntax-fix (start end)
  "Change syntax of characters ?< and ?> to symbol within source code blocks."
  (let ((case-fold-search t))
    (when (eq major-mode 'org-mode)
      (save-excursion
        (goto-char start)
        (while (re-search-forward "<\\|>" end t)
          (when (save-excursion
                  (and
                   (re-search-backward "[[:space:]]*#\\+\\(begin\\|end\\)_src\\_>" nil t)
                   (string-equal (downcase (match-string 1)) "begin")))
            ;; This is a < or > in an org-src block
            (put-text-property (point) (- (point) 1)
                               'syntax-table (string-to-syntax "_"))))))))

(defun org-setup-<>-syntax-fix ()
  "Setup for characters ?< and ?> in source code blocks.
Add this function to `org-mode-hook'."
  (make-local-variable 'syntax-propertize-function)
  (setq syntax-propertize-function 'org-mode-<>-syntax-fix)
  (syntax-propertize (point-max)))

;;; TODO fix this slow fucker
;;(add-hook 'org-mode-hook 'org-setup-<>-syntax-fix)
#+end_src

#+RESULTS:
: org-setup-<>-syntax-fix

***** [[id:b33372ae-f731-4482-8e3a-0c5e986ac70a][roam]]
:PROPERTIES:
:ID:       c2c9a0bc-98e8-4053-82e2-88e91f1531f1
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

****** ensure org-agenda-directory
:PROPERTIES:
:ID:       49b913ee-235d-419e-862a-3e372946e181
:CREATED:  [2022-08-08 Mon 12:11]
:UPDATED:  [2022-08-08 Mon 12:11]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(unless (boundp 'org-agenda-directory)
  (setq org-agenda-directory nil))
#+end_src

****** org-roam-complete-everywhere                                           :redef:
:PROPERTIES:
:ID:       1a52190a-5646-488c-a881-951a45d9c01f
:CREATED:  [2023-05-03 Wed 11:10]
:UPDATED:  [2023-05-03 Wed 11:10]
:ROAM_EXCLUDE: t
:END:

bro, use ='symbol=.

#+begin_src emacs-lisp :noweb-ref roam
(defun org-roam-complete-everywhere ()
  "Complete symbol at point as a link completion to an Org-roam node.
This is a `completion-at-point' function, and is active when
`org-roam-completion-everywhere' is non-nil.

Unlike `org-roam-complete-link-at-point' this will complete even
outside of the bracket syntax for links (i.e. \"[[roam:|]]\"),
hence \"everywhere\"."
  (when (and org-roam-completion-everywhere
             (thing-at-point 'symbol) ;; ✂️
             (not (org-in-src-block-p))
             (not (save-match-data (org-in-regexp org-link-any-re))))
    (let ((bounds (bounds-of-thing-at-point 'symbol))) ;; ✂️
      (list (car bounds) (cdr bounds)
            (org-roam--get-titles)
            :exit-function
            (lambda (str _status)
              (delete-char (- (length str)))
              (insert "[[roam:" str "]]"))
            ;; Proceed with the next completion function if the returned titles
            ;; do not match. This allows the default Org capfs or custom capfs
            ;; of lower priority to run.
            :exclusive 'no))))
#+end_src

#+RESULTS:
: org-roam-complete-everywhere

******* COMMENT
:PROPERTIES:
:ID:       738bcea1-9721-4d18-b7a8-b30e67ebdcc6
:CREATED:  [2023-05-03 Wed 11:12]
:UPDATED:  [2024-02-03 Sat 00:31]
:ROAM_EXCLUDE: t
:END:

taken from =f4h9ipqbysl21g7lqvblkg6wll74andh-emacs-org-roam-2.2.2-0.74422df=

- commit :: 74422df546a515bc984c2f3d3a681c09d6f43916
#+begin_src shell
guix search emacs-org-roam
#+end_src

#+RESULTS:
:results:
name: emacs-org-roam
version: 2.2.2-0.74422df
outputs:
+ out: everything
systems: x86_64-linux i686-linux
dependencies: emacs-dash@2.19.1 emacs-emacsql-sqlite3@1.0.2 emacs-f@0.20.0
+ emacs-magit@3.3.0-4.a760dd1 emacs-org@9.6.4 emacs-s@1.13.0 graphviz@2.49.0
+ texinfo@6.7
location: gnu/packages/emacs-xyz.scm:34285:4
homepage: https://github.com/org-roam/org-roam/
license: GPL 3+
synopsis: Non-hierarchical note-taking with Org mode
description: Emacs Org Roam is a solution for taking non-hierarchical notes
+ with Org mode.  Notes are captured without hierarchy and are connected by
+ tags.  Notes can be found and created quickly.  Org Roam should also work as a
+ plug-and-play solution for anyone already using Org mode for their personal
+ wiki.
relevance: 20
:end:

****** display-template
:PROPERTIES:
:CREATED:  [2024-02-03 Sat 00:31]
:UPDATED:  [2024-04-01 Mon 16:04]
:ID:       c5e5dd44-b2c9-417c-8651-28a94ddc9fc0
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref roam
(setq org-roam-node-display-template "${title}")
#+end_src

#+RESULTS:
: "${title}"

****** create node :: ensure id, and non-exclusion
:PROPERTIES:
:ID:       38d5adfe-f060-4d06-af94-eba7fbe74621
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref roam
(defun qz/create-node ()
  "assumes point is at the desired headline"
  (interactive)
  (org-id-get-create)
  (org-delete-property "ROAM_EXCLUDE"))

(defun qz/exclude-node ()
  "assumes point is at the desired headline -- unlikely to work for files"
  (org-set-property "ROAM_EXCLUDE" "t"))

(define-key org-mode-map (kbd "C-c C-x i") 'qz/create-node)
#+end_src

#+RESULTS:
: qz/create-node

****** TODO extract-as-subtree-with-link :broken:
:PROPERTIES:
:ID:       19efeebd-be59-4f1f-84f9-946d728a38ca
:CREATED:  [2023-06-18 Sun 17:51]
:UPDATED:  [2024-02-02 Fri 13:02]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref roam
(defun org-roam-extract-subtree ()
  "Convert current subtree at point to a node, and extract it into a new file."
  (interactive)
  (save-excursion
    (org-back-to-heading-or-point-min t)
    (when (bobp) (user-error "Already a top-level node"))
    (org-id-get-create)
    (save-buffer)
    (org-roam-db-update-file)
    (let* ((template-info nil)
           (node (org-roam-node-at-point))
           (template (org-roam-format-template
                      (string-trim (org-capture-fill-template org-roam-extract-new-file-path))
                      (lambda (key default-val)
                        (let ((fn (intern key))
                              (node-fn (intern (concat "org-roam-node-" key)))
                              (ksym (intern (concat ":" key))))
                          (cond
                           ((fboundp fn)
                            (funcall fn node))
                           ((fboundp node-fn)
                            (funcall node-fn node))
                           (t (let ((r (read-from-minibuffer (format "%s: " key) default-val)))
                                (plist-put template-info ksym r)
                                r)))))))
           (file-path
            ;; ✂️ removing the "read" interactive bit
            (expand-file-name
             (concat (file-name-as-directory org-roam-directory) template)
             org-roam-directory)))
      (when (file-exists-p file-path)
        (user-error "%s exists. Aborting" file-path))
      (org-cut-subtree)
      (save-buffer)
      (with-current-buffer (find-file-noselect file-path)
        (org-paste-subtree)
        (save-buffer) ;; HACK this save is  just for `org-roam-promote-entire-buffer' to find the file....
        (while (> (org-current-level) 1) (org-promote-subtree))
        (org-roam-promote-entire-buffer)
        (save-buffer)
        (org-roam-node-at-point)))))

(defun qz/org-roam-extract-subtree-as-link (&rest args)
  (interactive)
  (save-excursion
    (qz/create-node)
    (let ((n (org-roam-extract-subtree)))
      (org-previous-visible-heading 1)
      (org-insert-subheading-respect-content nil)
      (insert (org-link-make-string (concat "id:" (org-roam-node-id n))
                                    (org-roam-node-title n))))))
#+end_src

****** qualify recursive nodes
:PROPERTIES:
:ID:       c3a45b33-8c15-480c-82af-bd5742119167
:CREATED:  [2023-07-21 Fri 10:04]
:UPDATED:  [2023-07-21 Fri 10:04]
:ROAM_EXCLUDE: t
:END:

inspired by graphbrain, single-word nodes are a good first-step in

#+begin_src shell
#+end_src



****** capture
:PROPERTIES:
:ID:       cdc7fe5d-e44e-45a2-af7d-c2f5bce5d8fa
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******* helpers                                                                :func:
:PROPERTIES:
:ID:       cbb71c7a-93f0-48b9-b262-781128398302
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

******** capture current, todo
:PROPERTIES:
:ID:       dd40d2ba-097a-49bf-9992-47f4af9b7bd1
:CREATED:  <2022-03-03 Thu 12:31>
:UPDATED:  <2022-03-03 Thu 12:31>
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref roam
(defun qz/org-roam-capture-current ()
  (interactive)
  "Capture a task in agenda mode."
  (org-capture nil "I"))

(defun qz/roam-capture-todo ()
  (interactive)
  "Capture a task in agenda mode."
  (cl-destructuring-bind (thing region)
      (qz/thing-at-point-or-region-and-region)
    (org-roam-capture- :goto t
                       :keys "n"
                       :node (org-roam-node-create :title thing)
                       :props `(:immediate-finish t :jump-to-captured nil
                                                  :region ,region     :insert-at ,(point-marker)
                                                  :finalize 'insert-link))
    (qz/capture-last-captured)))
#+end_src

******** slug
:PROPERTIES:
:ID:       55b3848e-4ed1-4048-a0b5-941c05b10121
:CREATED:  [2023-07-07 Fri 14:17]
:UPDATED: [2023-07-07 Fri 14:17]
:ROAM_EXCLUDE: t
:END:

- source  :: org-hugo-slug

#+begin_src emacs-lisp
(defun qz/slug (str &optional allow-double-hyphens)
  "Convert string STR to a `slug' and return that string.

A `slug' is the part of a URL which identifies a particular page
on a website in an easy to read form.

Example: If STR is \"My First Post\", it will be converted to a
slug \"my-first-post\", which can become part of an easy to read
URL like \"https://example.com/posts/my-first-post/\".

In general, STR is a string.  But it can also be a string with
Markdown markup because STR is often a post's sub-heading (which
can contain bold, italics, link, etc markup).

The `slug' generated from that STR follows these rules:

- Contain only lower case alphabet, number and hyphen characters
  ([[:alnum:]-]).
- Not have *any* HTML tag like \"<code>..</code>\",
  \"<span class=..>..</span>\", etc.
- Not contain any URLs (if STR happens to be a Markdown link).
- Replace \".\" in STR with \"dot\", \"&\" with \"and\",
  \"+\" with \"plus\".
- Replace parentheses with double-hyphens.  So \"foo (bar) baz\"
  becomes \"foo--bar--baz\".
- Replace non [[:alnum:]-] chars with spaces, and then one or
  more consecutive spaces with a single hyphen.
- If ALLOW-DOUBLE-HYPHENS is non-nil, at most two consecutive
  hyphens are allowed in the returned string, otherwise consecutive
  hyphens are not returned.
- No hyphens allowed at the leading or trailing end of the slug."
  (let* (;; All lower-case
         (str (downcase str))
         ;; Remove "<FOO>..</FOO>" HTML tags if present.
         (str (replace-regexp-in-string "<\\(?1:[a-z]+\\)[^>]*>.*</\\1>" "" str))
         ;; Remove URLs if present in the string.  The ")" in the
         ;; below regexp is the closing parenthesis of a Markdown
         ;; link: [Desc](Link).
         (str (replace-regexp-in-string (concat "\\](" ffap-url-regexp "[^)]+)") "]" str))
         ;; Replace "&" with " and ", "." with " dot ", "+" with
         ;; " plus ".
         (str (replace-regexp-in-string
               "&" " and "
               (replace-regexp-in-string
                "\\." " dot "
                (replace-regexp-in-string
                 "\\+" " plus " str))))
         ;; Replace all characters except alphabets, numbers and
         ;; parentheses with spaces.
         (str (replace-regexp-in-string "[^[:alnum:]()]" " " str))
         ;; On emacs 24.5, multibyte punctuation characters like "："
         ;; are considered as alphanumeric characters! Below evals to
         ;; non-nil on emacs 24.5:
         ;;   (string-match-p "[[:alnum:]]+" "：")
         ;; So replace them with space manually..
         (str (if (version< emacs-version "25.0")
                  (let ((multibyte-punctuations-str "：")) ;String of multibyte punctuation chars
                    (replace-regexp-in-string (format "[%s]" multibyte-punctuations-str) " " str))
                str))
         ;; Remove leading and trailing whitespace.
         (str (replace-regexp-in-string "\\(^[[:space:]]*\\|[[:space:]]*$\\)" "" str))
         ;; Replace 2 or more spaces with a single space.
         (str (replace-regexp-in-string "[[:space:]]\\{2,\\}" " " str))
         ;; Replace parentheses with double-hyphens.
         (str (replace-regexp-in-string "\\s-*([[:space:]]*\\([^)]+?\\)[[:space:]]*)\\s-*" " -\\1- " str))
         ;; Remove any remaining parentheses character.
         (str (replace-regexp-in-string "[()]" "" str))
         ;; Replace spaces with hyphens.
         (str (replace-regexp-in-string " " "-" str))
         ;; Remove leading and trailing hyphens.
         (str (replace-regexp-in-string "\\(^[-]*\\|[-]*$\\)" "" str)))
    (unless allow-double-hyphens
      (setq str (replace-regexp-in-string "--" "-" str)))
    str))
#+end_src

#+RESULTS:
: qz/slug

******** utc timestamp
:PROPERTIES:
:ID:       50e60437-87cf-487f-aca3-850a76b02fdc
:CREATED:  <2022-03-03 Thu 12:31>
:UPDATED:  <2022-03-03 Thu 12:31>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/utc-timestamp ()
  (format-time-string "%Y%m%dT%H%M%SZ" (current-time) t))
#+end_src
********* qz/org-roam-extract-subtree
:PROPERTIES:
:ID:       c1034905-2820-41ed-825e-b16af8ed46f4
:CREATED:  [2023-06-13 Tue 09:55]
:UPDATED:  [2023-06-13 Tue 09:55]
:ROAM_EXCLUDE: t
:END:


******* templates                                                               :var:
:PROPERTIES:
:ID:       5a0c855e-f0ed-4dee-bf03-b7dfec2f023b
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-07-07 Fri 14:33]
:END:

#+begin_src emacs-lisp  :noweb-ref roam
(setq qz/org-roam-capture-head "#+title: ${title}\n\n")
(setq qz/capture-title-timestamp-roam "%(qz/utc-timestamp)-${slug}.org"
      org-roam-extract-new-file-path qz/capture-title-timestamp-roam)

(setq org-roam-capture-templates
      `(("d" "default" plain "%?"
         :if-new (file+head ,qz/capture-title-timestamp-roam
                            ,qz/org-roam-capture-head)
         :unnarrowed t)
        ("n" "empty" plain "%?"
         :if-new (file+head ,qz/capture-title-timestamp-roam
                            ,qz/org-roam-capture-head)
         :immediate-finish t)))
#+end_src

#+RESULTS:
: (("d" "default" plain "%?" :if-new (file+head "%(qz/utc-timestamp)-${slug}.org" "#+title: ${title}
:
: ") :unnarrowed t) ("n" "empty" plain "%?" :if-new (file+head "%(qz/utc-timestamp)-${slug}.org" "#+title: ${title}
:
: ") :immediate-finish t))

****** core bindings                                                            :kbd:
:PROPERTIES:
:ID:       9ba6a0a6-fd3e-406f-8ac9-8b63216a469a
:CREATED:  [2022-08-15 Mon 15:37]
:UPDATED:  [2022-09-16 Fri 11:04]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref kbd
(define-key global-map (kbd "C-c n j") 'org-roam-dailies-capture-today)
(define-key global-map (kbd "C-c n J") 'org-roam-dailies-goto-today)

(define-key global-map (kbd "C-c n C-r") 'org-roam-refile)
(define-key global-map (kbd "C-c n r") 'org-roam-node-random)

(define-key global-map (kbd "C-c n a r") 'org-roam-ref-add)
(define-key global-map (kbd "C-c n a t") 'org-roam-tag-add)
(define-key global-map (kbd "C-c n a a") 'org-roam-alias-add)

(defun qz/consult-notes ()
  (interactive)
  (let ((default-directory org-roam-directory))
    (call-interactively 'consult-ripgrep)))

(define-key global-map (kbd "C-c n s") 'qz/consult-notes)
#+end_src


#+RESULTS:
: qz/consult-notes

****** buffer / sidebar
:PROPERTIES:
:ID:       5b82a2ed-464b-4f16-b90c-6e05a9ece021
:CREATED:  [2023-07-05 Wed 18:44]
:UPDATED:  [2023-07-05 Wed 18:44]
:ROAM_EXCLUDE: t
:END:

******* org-roam-mode-sections                                                  :var:
:PROPERTIES:
:ID:       ba3dd508-d97a-440c-ad26-e1213938887c
:CREATED:  [2023-07-05 Wed 19:32]
:UPDATED: [2023-07-10 Mon 14:14]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(setq org-roam-mode-sections
      (list 'org-roam-backlinks-section
            'org-roam-reflinks-section
            ;; fuck it why not
            'qz/org-roam-unlinked-references-section))
#+end_src

#+RESULTS:
: (org-roam-backlinks-section org-roam-reflinks-section org-roam-unlinked-references-section)

******* org-roam-unlinked-references-section                                  :redef:
:PROPERTIES:
:ID:       6dd1621a-cb6b-49d4-b1af-86102f3d5f23
:CREATED:  [2023-07-05 Wed 19:32]
:UPDATED:  [2023-07-10 Mon 14:14]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref roam
(defun qz/org-roam-unlinked-references-section (node)
  "The unlinked references section for NODE.
References from FILE are excluded."
  (when (and (executable-find "rg")
             (org-roam-node-title node)
             (not (string-match "PCRE2 is not available"
                                (shell-command-to-string "rg --pcre2-version"))))
    (let* ((titles (cons (org-roam-node-title node)
                         (org-roam-node-aliases node)))
           (rg-command (concat "rg -L -o --vimgrep -P -i "
                               (mapconcat (lambda (glob) (concat "-g " glob))
                                          (org-roam--list-files-search-globs org-roam-file-extensions)
                                          " ")
                               (format " '\\[([^[]]++|(?R))*\\]%s' "
                                       (mapconcat (lambda (title)
                                                    (format "|(\\b%s\\b)" (shell-quote-argument title)))
                                                  titles ""))
                               org-roam-directory))
           (results (split-string (shell-command-to-string rg-command) "\n"))
           f row col match)
      (magit-insert-section (unlinked-references)
        (magit-insert-heading "Unlinked References:")
        (dolist (line results)
          (save-match-data
            (when (string-match org-roam-unlinked-references-result-re line)
              (setq f (match-string 1 line)
                    row (string-to-number (match-string 2 line))
                    col (string-to-number (match-string 3 line))
                    match (match-string 4 line))
              (when (and match
                         (not (file-equal-p (org-roam-node-file node) f))
                         (member (downcase match) (mapcar 'downcase titles)))
                (magit-insert-section section (org-roam-grep-section)
                  (oset section file f)
                  (oset section row row)
                  (oset section col col)
                  (insert
                   (propertize
                    (format "%s:%s:%s"
                                              ;;; ✂️
                            ;; removing my utc data
                            ;; i.e.
                            ;;   (replace-regexp-in-string "^.+Z-" "" "20210607T1536e21Z-mm.org")
                            (s-pad-right
                             25 " " (truncate-string-to-width
                                     (replace-regexp-in-string
                                      "^.+Z-" ""
                                      (file-name-base f))
                                     25 nil nil t))
                                              ;;; ✂️
                            row col)
                    'font-lock-face 'org-roam-dim)
                   " "
                   (org-roam-fontify-like-in-org-mode
                    (org-roam-unlinked-references-preview-line f row))
                   "\n"))))))
        (insert ?\n)))))
        #+end_src

        #+RESULTS:
        : qz/org-roam-unlinked-references-section

        #+begin_src emacs-lisp :noweb-ref null
        (s-pad-right
         25 " " (truncate-string-to-width
                 (replace-regexp-in-string
                  "^.+Z-" ""
                  "20210607T1536e21Z-mm.org")
                 25 nil nil t))
#+end_src

#+RESULTS:
: "mm.org                   "

******* screenshot
:PROPERTIES:
:ID:       fda5aa87-a02f-48ba-9b3b-c23f5012e5a8
:CREATED:  [2023-07-05 Wed 18:47]
:UPDATED:  [2023-07-05 Wed 18:47]
:ROAM_EXCLUDE: t
:END:

#+DOWNLOADED: screenshot @ 2023-07-05 18:46:05
[[file:screenshots/2023-07-05_18-46-05_screenshot.png]]


****** dailies
:PROPERTIES:
:ID:       a82c9727-9f53-48f2-b7b8-7c981feeebc2
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******* capture                                                                 :var:
:PROPERTIES:
:ID:       6a756610-847e-410f-a79b-baa70b74e029
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******** experiments
:PROPERTIES:
:ID:       ba6750c3-a246-4878-a3b9-c875fc9e645f
:CREATED:  [2023-06-15 Thu 14:20]
:UPDATED:  [2023-06-18 Sun 16:12]
:ROAM_EXCLUDE: t
:END:
********* capture fulcrum
:PROPERTIES:
:ID:       ed1a403b-f7b4-47c4-9c8b-01ea3ca5977c
:CREATED:  [2023-06-15 Thu 14:20]
:UPDATED:  [2023-07-16 Sun 22:31]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/solar-moment (&optional time)
  (symbol-name
   (let ((i (string-to-number
             (format-time-string "%H" (or time (current-time))))))
     (cond
      ((and (>= i 4)  (< i 7))  'dawn)
      ((and (>= i 7)  (< i 12)) 'morning)
      ((and (>= i 12) (< i 17)) 'afternoon)
      ((and (>= i 17) (< i 20)) 'evening)
      ((and (>= i 20)) 'night)
      (t 'void-time)))))
;; (qz/solar-moment)

;; (list
;;  (solar-sunrise-sunset-string
;;   (org-date-to-gregorian (format-time-string "%Y-%m-%d"))
;;   'no-location)
;;  (solar-exact-local-noon
;;   (org-date-to-gregorian
;;    (format-time-string "%Y-%m-%d"))))


(defun qz/org-roam-dailies-capture-fulcrum (&optional time)
  ;; '(((> 4) . 'dawn)
  ;;   ((> 7) . 'morning)
  ;;   ((> 12) . 'afternoon)
  ;;   ((> 5) . 'evening)
  ;;   ((> 8) . 'night))
  (list "journal" (qz/solar-moment time)))

;; (qz/org-roam-dailies-capture-fulcrum)
#+end_src

#+RESULTS:
: qz/org-roam-dailies-capture-fulcrum

********* quotada-o-nada :: conditional inclusion of data
:PROPERTIES:
:ID:       29bc0a54-9a16-4f91-9e47-bec28e618f81
:CREATED:  [2023-06-15 Thu 14:20]
:UPDATED:  [2023-06-19 Mon 18:27]
:END:

intent is to only push the region into the template if it's active.

hmm.  I suppose the template itself could be changed on the fly, seeing as
we're just joining strings anyway.

#+begin_src emacs-lisp :noweb-ref roam :results silent
;; TODO this is bonk and doesn't work
(defun qz/region-quotada-o-nada (&rest args)
  "returns a (formatted) region if hacky-captured before dailies-capture

intended for use in an `org-capture-template', which may safely
drop this in; optionally including itself if it has any content.

this is my workaround for the `%i' template being total nonsense
to an expression in a regular template, such as `%(my-fun %i)' or
`%(my-fun \"%i\")'.

`%i' is true to form, but I can't grasp it as a list of
args.
"
  (if qz/hoist--org-capture
      (format "- region      ::\n  #+begin_quote\n%s\n  #+end_quote\n"
              qz/hoist--org-capture)
    ""))
#+end_src

********* qz/peek-region
:PROPERTIES:
:ID:       2baf4769-cb59-4058-9f56-726082962546
:CREATED:  [2023-06-19 Mon 17:38]
:UPDATED:  [2023-06-19 Mon 18:22]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref roam
(defun qz/peek-region ()
  "get the region.

how many times have I written this"
  (interactive)
  (when-let ((s (and (region-active-p)
                     (filter-buffer-substring (region-beginning)
                                              (region-end)))))
    (kill-new s)
    (qz/debug- (message "QZ peek-region :: %s" s))
    s))
#+end_src

#+RESULTS:
: qz/peek-region

#+begin_src emacs-lisp :noweb-ref roam
;; TODO think about this; before/after with hoisted var as
;; hoist--hookfn-actfn
;;
;; (defmacro qz/hoist- (fn &optional unset?)
;;   `(setq ,(intern (format "qz/hoist--%s" name))
;;          ,(when (not unset?) (funcall fn))))

(qz/advice- org-capture :before qz/hoist-peek-region)
(qz/advice- org-capture :after  qz/unhoist-peek-region)

(defun qz/hoist-peek-region (&rest args)
  (qz/debug- (message "QZ hoist"))
  (setq qz/hoist--org-capture (qz/peek-region)))

(defun qz/unhoist-peek-region (&rest args)
  (qz/debug- (message "QZ unhoist"))
  (setq qz/hoist--org-capture nil))
#+end_src

#+RESULTS:
: qz/unhoist-peek-region

#+begin_src emacs-lisp :noweb-ref roam :results silent
(defun qz/peek-thing ()
  (interactive)
  (let ((s ())
        (kill-new s)
        (qz/debug- (message "QZ peek-region :: %s" s))
        s)))

#+end_src

#+begin_src emacs-lisp :noweb-ref roam :results silent
(defun qz/peek-look-mouse ()
  (interactive)
  (let ((s (posn-col-row
            (let* ((m (mouse-pixel-position))
                   (xy (cdr m)))
              (posn-at-x-y (car xy) (cdr xy) (car m))))))
    (kill-new s)
    (qz/debug- (message "QZ peek-region :: %s" s))
    s))
#+end_src

********* tab-o-nada
:PROPERTIES:
:ID:       64391ca0-3099-4e73-963e-7ba089e2a70f
:CREATED:  [2023-06-18 Sun 16:12]
:UPDATED:  [2023-06-18 Sun 16:21]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref roam
(defun qz/capture-tab-or-nada (&rest args)
  (if-let ((d (qz/tab nil 'as-link)))
      (format "- from: tab   :: %s" d)
    ""))

#+end_src

#+RESULTS:
: qz/capture-tab-or-nada

******** templates
:PROPERTIES:
:ID:       46fed150-b670-4899-aaa2-b029262db572
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-07-17 Mon 09:42]
:END:

- see also :: about capture templates

#+begin_src emacs-lisp :noweb-ref roam :results silent
(defun qz/dailies-capture-template (&optional time)
  `(("d" "default" entry
     "* [%<%H:%M:%S>]
- from: point :: %a
- clocking    :: %K
%(qz/capture-tab-or-nada)
%(qz/region-quotada-o-nada)

%?"
     :if-new (file+head+olp
              ,qz/org-roam-dailies-filespec
              ,(s-join "\n" '("#+title: <%<%Y-%m-%d>>"
                              "#+filetags: daily private project" "" ""
                              "%(qz/today-dateref)" "" ""
                              "* today, I will"
                              "** daily review"
                              "** life"
                              "** work"))
              ,(qz/org-roam-dailies-capture-fulcrum time)))))

(defun qz/dailies-capture-template--set (&rest args)
  (setq org-roam-dailies-capture-templates
        (qz/dailies-capture-template (current-time))))

(qz/advice-
 org-roam-dailies-capture-today
 :before qz/dailies-capture-template--set)
#+end_src

********* TODO ... tangent (reconsider)
:PROPERTIES:
:ID:       b0998f7a-7088-47ad-a82f-ca79eb8041c0
:CREATED:  [2023-07-16 Sun 22:38]
:UPDATED:  [2023-07-16 Sun 22:38]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref null :results silent
;; (setq qz/org-roam-dailies-capture-templates--tangent
;;       '("d" "default" entry
;;         ,(s-join "\n" '("* TANGENT [%<%H:%M>] %?"
;;                         ;;"CREATED: <%<%Y-%m-%d %H:%M>>"
;;                         "- from :: %a"))
;;         :if-new (file+head+olp
;;                  ,qz/org-roam-dailies-filespec
;;                  ,(s-join "\n" '("#+title: <%<%Y-%m-%d>>"
;;                                  "#+filetags: daily private project" ""
;;                                  "%(qz/today-dateref)" ""
;;                                  "* today, I will"
;;                                  "* journal"
;;                                  "* tangent"))
;;                  ("tangent"))))
#+end_src

#+RESULTS:
| d | default | entry | (, (s-join |
******** helpers
:PROPERTIES:
:ID:       3c0c901e-65d7-4269-af39-da71d60997fe
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
********* today's date reference as roam links                         :project:func:
:PROPERTIES:
:ID:       24cca9c1-2a89-4de2-b840-5d2adb9180931
:UPDATED:  [2023-06-19 Mon 18:23]
:CREATED:  [2023-06-19 Mon 18:23]
:END:

this is just a nice reference spec to include in the daily notes.

I've used explicit lookups for day/month here, because it's quicker to =assoc= a
small list than to hit the cache (=>2k=) or hit the database a bunch.

=year= is left as a call to =(org-roam-node-from-title-or-alias "2021")= as years
are less discrete; I haven't made all possible years, and it's infrequent to
make a new year in this case.

********** day-lookup                                                           :var:
:PROPERTIES:
:ID:       cc4d4945-4083-40d4-9b62-8c337112be2e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref roam
;;; day lookup
(defvar qz/day-lookup
  '((Mon . "[[id:d5ad0bac-e82b-43d0-960f-26eeb1daf91b][Monday]]")
    (Tue . "[[id:cb662cc6-bde2-4f9c-b3fa-62346c6df27a][Tuesday]]")
    (Wed . "[[id:411a8e5a-8d89-4886-b2ea-047a3970710a][Wednesday]]")
    (Thu . "[[id:659b9931-ae09-422b-8e91-1bf4cc58e94c][Thursday]]")
    (Fri . "[[id:b3255cd1-db37-4e07-99cf-5e60d52a2579][Friday]]")
    (Sat . "[[id:b63897c3-30cc-42eb-83b5-c8e372e5af9a][Saturday]]")
    (Sun . "[[id:2e28574b-4793-4c05-b83d-e36e9a77515b][Sunday]]"))
  "an index; get days from abbrev (assoc 'Mon qz/day-lookup)")
#+end_src

#+RESULTS:
: qz/day-lookup

********** month-lookup                                                         :var:
:PROPERTIES:
:ID:       c9f144b9-f170-4193-898f-a7d73c514ee3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-06-13 Tue 09:57]
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defvar qz/month-lookup
  '("[[id:b92355d7-110e-467c-b7a7-d02b2043af3f][January]]"
    "[[id:7e0af966-8d3e-4e88-b53f-d074902e175a][February]]"
    "[[id:f41751f8-a2a9-4b38-ba03-2ceec2fae4cc][March]]"
    "[[id:ae0ae458-2216-4178-8073-4a26f23747d9][April]]"
    "[[id:6a680100-e842-4257-819f-8cf6cbedddbc][May]]"
    "[[id:f811621c-1b37-43f7-9d01-52bdf9f27637][June]]"
    "[[id:a4d5c8fe-3910-4483-b59e-ce50cd6699a7][July]]"
    "[[id:94e9b0a7-6cd0-4104-821e-613876fe76e3][August]]"
    "[[id:f9ad8160-cae5-4195-a85f-0160710ce8dd][September]]"
    "[[id:da9f0d53-e3f7-4f72-bc1a-d060bc2d1745][October]]"
    "[[id:a4e3a97a-dac9-4bc6-a5e9-5949f707a6de][November]]"
    "[[id:f874ca1a-0d3f-4840-8340-511ed0ac286f][December]]")
  "an index; get days from abbrev (nth 0 qz/month-lookup)")
#+end_src

#+RESULTS:
: qz/month-lookup

********** today-dateref                                                       :func:
:PROPERTIES:
:ID:       6b0faf7e-37a2-4112-b02f-1c5f74ae48de
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/today-dateref (&optional time)
  (cl-destructuring-bind (day nday month year)
      (split-string
       (format-time-string "%a:%d:%m:%Y" (or nil (current-time))) ":")
    (format "%s %s %s, %s"
            (cdr (assoc (intern day) qz/day-lookup))
            nday
            (nth (- (string-to-number month) 1) qz/month-lookup)
            (or (if-let ((node (org-roam-node-from-title-or-alias year)))
                    (org-link-make-string
                     (concat "id:" (org-roam-node-id node))
                     (org-roam-node-title node)))
                year))))
#+end_src

********* daily-tangent-capture[fn:1]                                          :func:
:PROPERTIES:
:ID:       8d1c9152-3401-4414-a446-b8389523e5d4
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-06-13 Tue 09:57]
:END:

so we can use it as a COMMAND. better traceability than a lambda

#+begin_src emacs-lisp :noweb-ref roam
(defun qz/org-daily-tangent-capture ()
  (interactive)
  "Capture the inevitable tangent"
  (org-capture nil "t"))
#+end_src

#+RESULTS:
: qz/org-daily-tangent-capture

********* today-as-dailies-file
:PROPERTIES:
:ID:       82ad41ee-9e11-46c9-893e-7b196ea4ce5c
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/today-as-daily-file ()
  (format-time-string "private-%Y-%m-%d.org"))
#+end_src

******* dailies-filespec                                                        :var:
:PROPERTIES:
:ID:       b1f6f66c-c613-4c68-8c0d-4bc95da8d1cd
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam-hoist
(setq qz/org-roam-dailies-filespec "private-%<%Y-%m-%d>.org")
#+end_src

#+RESULTS:
: private-%<%Y-%m-%d>.org

***l* helpers
:PROPERTIES:
:ID:       dc267fb6-e7bd-43e8-8259-a01fabefc5b9
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******* current-roam-link
:PROPERTIES:
:ID:       506b53c2-b95d-42dd-8876-92d03ad8714d
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-08-02 Tue 13:56]
:END:
#+begin_src emacs-lisp :noweb-ref roam
;; [[file:~/.doom.d/config.org::*capture convenience functions][capture convenience functions]]
(defun qz/current-roam-link ()
  "Get link to org-roam file with title"
  (interactive)

  (concat "* TODO "
          (let ((n (qz/org-roam-node-at-point)))
            (org-link-make-string
             (concat "id:" (org-roam-node-id n))
             (org-roam-node-title n)))))
#+end_src

******** TODO rename this to ~qz/roam-current-node-as-link~
:PROPERTIES:
:ID:       0d8d4cc4-e9fb-47f7-890d-a245424b37c1
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******* node-tags                                                              :func:
:PROPERTIES:
:ID:       9c5dcf12-9eec-4900-af35-f9302cd86975
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/node-tags (&optional node)
  (or (and node (org-roam-node-tags node))
      (save-excursion
        (goto-char (org-roam-node-point (org-roam-node-at-point 'assert)))
        (if (= (org-outline-level) 0)
            (split-string-and-unquote (or (cadr (car (org-collect-keywords '("filetags")))) ""))
          (org-get-tags)))))

#+end_src

#+RESULTS:
: qz/node-tags

******* node-title
:PROPERTIES:
:ID:       32772be5-0c73-4fff-ba5d-2f33e351b974
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/node-title (&optional node limit)
  (or (and node (org-roam-node-title node))
      (save-excursion
        (goto-char (org-roam-node-point (org-roam-node-at-point 'assert)))
        (if (= (org-outline-level) 0)
            (cadr (car (org-collect-keywords '("title"))))
          (substring-no-properties (org-get-heading t t t))))))
#+end_src

#+RESULTS:
: qz/node-title

******* title->roam-id
:PROPERTIES:
:ID:       a38a5df2-81dd-43ea-ac8a-f5f4b0036d37
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/title->roam-id (title)
  (org-roam-node-id (org-roam-node-from-title-or-alias title)))
#+end_src

#+RESULTS:
: qz/title->roam-id

******* ensure-tag
:PROPERTIES:
:ID:       f5a8bd2b-121a-4ee3-a99f-5d0454377e23
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/ensure-tag (tagstring tag)
  "Apply `org-roam-tag-add' for `tag' to `(OR node@pt NODE)'"
  (let ((ltag (-flatten (or (and (listp tag) tag)
                            (list tag)))))
    (message "ensuring tag for %s" ltag)
    (org-roam-tag-add ltag)))
#+end_src

#+RESULTS:
: qz/ensure-tag

******* ensure-alias
:PROPERTIES:
:ID:       43ded7a8-abd0-4835-9aa7-aaf4b235762a
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/ensure-alias (alias &optional node)
  (let ((node (or node  (org-roam-node-at-point 'assert))))
    (save-excursion
      (with-current-buffer (find-file-noselect (org-roam-node-file node))
        (goto-char (org-roam-node-point node))
        (org-roam-alias-add alias)))))
#+end_src

#+RESULTS:
: qz/ensure-alias

****** TODO noweb tangler                                                      :meta:
:PROPERTIES:
:ID:       2bb19766-f330-4c47-9a61-93445e72ef38
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-04-24 Mon 10:29]
:END:

#+begin_src emacs-lisp  :noweb-ref org
(with-eval-after-load 'org-roam
  ;; NOWEB ROAM START
  (message "roam start")
  (require 'org-roam-protocol)
  <<roam-hoist>>

  <<roam>>
  ;; NOWEB ROAM END
  )
#+end_src

****** hooks
:PROPERTIES:
:ID:       6b268794-f120-4f0e-b0d6-c6badb3c6f55
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  <2022-02-27 Sun 14:52>
:END:

******* make metadata on node created/updated
:PROPERTIES:
:ID:       5aa025eb-cc43-4866-9401-bd043ecf971b
:CREATED:  [2021-12-12 Sun 22:34]
:UPDATED:  [2023-09-24 Sun 16:54]
:END:

- :: [[id:6ae36e2f-ab6d-45bc-9448-8dce233c8528][data-driven automatic actions in org roam]]

lifted from [[id:c6c1e44f-bb16-459b-9ba3-2d4657649816][Proposal for timestamping notes at time of capture (V2) ·
Issue #1485 · org-roam/org-roam]].

it is beneficial to attach to 'org-id-get-create as =:after= advice too,
as this is my current mechanism for making a [[id:5d31286f-eef2-490a-8d44-0cded26c6475][node]] from a headline.

#+begin_src emacs-lisp :noweb-ref roam

(defun qz/timestamp ()
  (format-time-string "[%Y-%m-%d %a %H:%M]"))

(defun qz/org-roam--insert-timestamp (&rest args)
  (when (not (org-entry-get nil "CREATED"))
    (org-entry-put nil "CREATED" (qz/timestamp)))
  (qz/org-roam--updated-timestamp))

(defun qz/org-roam--updated-timestamp (&rest args)
  "on the current-heading, and current-node"
  (interactive)
  (mapcar (lambda (pt)
            (when pt
              (org-entry-put
               pt "UPDATED"
               (qz/timestamp))))
          (list (and (org-roam-node-at-point)
                     (org-roam-node-point (org-roam-node-at-point)))
                (save-excursion
                  (org-back-to-heading-or-point-min)
                  (point)))))

;; FIXME
(add-hook 'org-roam-capture-new-node-hook 'qz/org-roam--insert-timestamp)

(add-hook 'org-mode-hook (lambda ()
                           (add-hook 'before-save-hook
                                     'qz/org-roam--updated-timestamp nil t)))
(qz/advice- org-id-get-create :before qz/org-roam--insert-timestamp)
#+end_src

#+RESULTS:
: (qz/advice-enable--org-id-get-create--qz/org-roam--insert-timestamp qz/advice-disable--org-id-get-create--qz/org-roam--insert-timestamp)

******** TODO interaction bug :: needlessly updating timestamps on daily files
:PROPERTIES:
:CREATED:  [2023-09-24 Sun 16:53]
:UPDATED:  [2023-09-24 Sun 16:54]
:ID:       1bf59c36-4f6b-41a6-9096-702c1d97efc3
:ROAM_EXCLUDE: t
:END:

i.e. when jumping about with {C-s-j}

********* org-roam-capture-new-node-hook X org-roam-dailies-goto-today(org-roam-dailies-capture-today)
:PROPERTIES:
:CREATED:  [2023-09-24 Sun 16:52]
:UPDATED:  [2023-09-24 Sun 16:52]
:ID:       e2314986-aac7-48da-8196-211534983b19
:ROAM_EXCLUDE: t
:END:
******* auto-tagging
:PROPERTIES:
:ID:       bac18b83-9a07-4c4b-ac68-82a4ba1b480c
:CREATED:  [2022-02-22 Tue 15:27]
:UPDATED:  [2022-04-22 Fri 12:06]
:ROAM_EXCLUDE: t
:END:

******** test
:PROPERTIES:
:ID:       6301a181-545d-4d78-838b-b8b6849481a9
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-22 Fri 12:07]
:END:
********* predicate
:PROPERTIES:
:ID:       030fee83-cc3b-4bea-8e90-1183553ecdff
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
********** should-be-private-p; interactive sanity check the current file for privacy
:PROPERTIES:
:ID:       5b753b66-4804-41b8-9ebd-068445b66e4f
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/should-be-private-p (file)
  (with-current-buffer (or (find-buffer-visiting file)
                           (find-file-noselect file))
    (qz/is-private-p)))

(defun qz/is-file-private ()
  (interactive)
  (message (concat "should " (f-this-file) " be private..? "
                   (or (and (qz/should-be-private-p (f-this-file)) "yes") "no"))))
#+end_src

#+RESULTS:
: qz/is-file-private

******* helpers
:PROPERTIES:
:ID:       7658fa6d-a033-4e97-8fb1-19c6ccb09fbd
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******** plumbing
:PROPERTIES:
:ID:       80941280-8587-4a9b-84c4-d9af3892e7a8
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
********* refresh filetags cache
:PROPERTIES:
:ID:       755ba202-4a54-4d18-a196-56fd80e9ce83
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
addressing caching & consistency problems with :PROPERTIES: drawer and #+properties

#+begin_src emacs-lisp :noweb-ref roam
(defun qz/hard-refresh-org-tags-in-buffer ()
  (interactive)
  (setq org-file-tags nil)      ; blast the cache
  (org-set-regexps-and-options) ; regen property detection regexp
  (org-get-tags))               ; write to cache
#+end_src
******** transformations
:PROPERTIES:
:ID:       6b3ffc25-dc8f-4bcb-9571-1169bbb57f20
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
********* title-to-tag
:PROPERTIES:
:ID:       b1a87e36-cb29-410c-a8af-9ef422a702de
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/title-to-tag (title &optional capitalize?)
  "Convert TITLE to tag."
  (if (equal "@" (cl-subseq title 0 1))
      title
    (concat "@" (s-replace " " ""
                           (or (and capitalize?
                                    (capitalize title))
                               title)))))
#+end_src

#+RESULTS:
: qz/title-to-tag
******** data
:PROPERTIES:
:ID:       66045845-0060-470d-9d0e-77c6afac1461
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
********* get-file-by-tag; add multi AND/OR
:PROPERTIES:
:ID:       ddbd6abb-43d8-4178-87ad-e1a43cfebaa7
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref roam
(defun qz/org-roam-node-from-tag (tag)
  (seq-map
   'car
   (org-roam-db-query
    [:select :distinct file
             :from tags
             :inner :join nodes
             :on (= tags:node_id nodes:id)
             :where (= tags:tag tag)])))
#+end_src

#+RESULTS:
: qz/org-roam-node-from-tag

********** test
:PROPERTIES:
:ID:       6a2330ff-8636-4eb8-8af9-7fe43c2ae1c9
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-03-31 Thu 11:44]
:END:

#+begin_src emacs-lisp :tangle no :noweb-ref null
(let ((s (qz/org-roam-node-from-tag "project")))
  (list (length s)
        (car s)))
#+end_src

#+RESULTS:
| 563 | /home/samuel/life/roam/20200706T122138Z-meeting_epic_cleanup.org |
******** predicates
:PROPERTIES:
:ID:       c168d9bc-6095-46e3-94c9-a4b9e1bc6ebb
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
********* content-based
:PROPERTIES:
:ID:       015dff9b-6d3b-4086-b187-c2da15c23c57
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
from filepath, or structural properties of the file

********** note-buffer-p
:PROPERTIES:
:ID:       9f3f1779-400b-48df-9af0-4af4777ebfdb
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/note-buffer-p (&optional node &rest _)
  "Return non-nil if the currently visited buffer is a note."
  (interactive)
  (or (org-roam-node-p node)
      (and buffer-file-name (org-roam-file-p buffer-file-name))))
#+end_src

#+RESULTS:
: qz/note-buffer-p

********** is-private-p
:PROPERTIES:
:ID:       59ebb422-7c9a-4a33-aa8d-d52b8d718f9e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/is-private-p (&optional node &rest _)
  (interactive)
  (let ((title (qz/node-title node)))
    (if (not title)
        (and (message "unable to evaluate privateness; no title") nil) ; return false (not private)
      (or (string-match-p qz/daily-title-regexp title) ; daily
          (string-match-p "meeting" title)             ; concerns a meeting
          (qz/has-link-to-p                            ; concerns work
           (mapcar 'qz/title->roam-id
                   (list "thinkproject" "NewStore")))))))
#+end_src

#+RESULTS:
: qz/is-private-p

********** is-daily-p
:PROPERTIES:
:ID:       d3e4a57e-bf2b-4ef5-b99f-bbb407809a48
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/is-daily-p (&optional node &rest _)
  (if-let ((title (qz/node-title node)))
      (string-match-p qz/daily-title-regexp title)))
#+end_src

#+RESULTS:
: qz/is-daily-p

********** is-project-p
:PROPERTIES:
:ID:       a08ff855-c475-4718-a2e4-f11ce12f1b4c
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(defun qz/is-project-p (&optional node &rest _)
  (or (qz/file-has-todo-p node _)
      (qz/is-daily-p node _)))
#+end_src

#+RESULTS:
: qz/is-project-p
********** is-person-p
:PROPERTIES:
:ID:       883f7cfa-f698-4b1f-92ba-32b41b8db3da
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/is-person-p (&optional node &rest _)
  (qz/has-link-to-p (qz/title->roam-id "person")
                    (and node (org-roam-node-p node)
                         (org-roam-node-id node))))
#+end_src

#+RESULTS:
: qz/is-person-p

********** file-has-todo-p
:PROPERTIES:
:ID:       53530907-3b29-401c-a25d-f647d10fa98f
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/file-has-todo-p (&optional node &rest _)
  "Return non-nil if current buffer has any todo entry.

TODO entries marked as done are ignored, meaning the this
function returns nil if current buffer contains only completed
tasks.

(1) parse the buffer using org-element-parse-buffer. It
  returns an abstract syntax tree of the current Org buffer. But
  since we care only about headings, we ask it to return only them
  by passing a GRANULARITY parameter - 'headline. This makes
  things faster.

(2) Then we extract information about TODO keyword from
  headline AST, which contains a property we are interested in -
  :todo-type, which returns the type of TODO keyword according to
  org-todo-keywords - 'done, 'todo or nil (when keyword is not
  present).

(3) Now all we have to do is to check if the buffer list contains
  at least one keyword with 'todo type. We could use seq=find on
  the result of org-element-map, but it turns out that it provides
  an optional first-match argument that can be used for our needs."
  (save-excursion
    (with-current-buffer (or (and node (org-roam-node-p node)
                                  (find-file-noselect (org-roam-node-file node)))
                             (current-buffer))
      (org-with-wide-buffer
       (org-element-map                          ; (2)
           (org-element-parse-buffer 'headline) ; (1)
           'headline
         (lambda (h)
           (eq (org-element-property :todo-type h)
               'todo))
         nil 'first-match)))))                     ; (3)

#+end_src

#+RESULTS:
: qz/file-has-todo-p

********* link-based
:PROPERTIES:
:ID:       41b87a22-731f-49c1-bd2d-6c41db00d779
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
********** has-links
:PROPERTIES:
:ID:       25c75e9d-08a4-4dba-8c0d-a187f9802c3e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/has-links (node)
  "connections exist, for id of `node'"
  (org-roam-db-query
   [:select [source dest]
            :from links
            :where (or  (= dest $s1)
                        (= source $s1))]
   node))

(defun qz/node-has-links (node)
  "connections exist, for `node'"
  (qz/has-links (org-roam-node-id node)))
#+end_src

#+RESULTS:
: qz/node-has-links

********** has-link-p
:PROPERTIES:
:ID:       3e6964b3-2f21-435f-8d75-bd2b728cdd6a
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/has-link-p (src dst)
  "undirected connection exists, from `src' to `dst'"
  (org-roam-db-query
   [:select [source dest]
            :from links
            :where (or (and (= dest $s1) (= source $s2))
                       (and (= dest $s2) (= source $s1)))]
   src dst))

(defun qz/node-has-link-p (src dst)
  (qz/has-link-p (org-roam-node-id src)
                 (org-roam-node-id dst)))
#+end_src

#+RESULTS:
: qz/node-has-link-p

********** has-link-to-p
:PROPERTIES:
:ID:       0b994d06-666a-4085-baa6-b532599cf063
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/has-link-to-p (dst &optional src)
  "directed connection exists, from `src' to `dst'"
  (if-let* ((nap (or src (org-roam-node-at-point)))
            (src (or src (org-roam-node-id nap))))
      (org-roam-db-query
       [:select dest
                :from links
                :where (and (= source $s1)
                            (IN dest $v2))]
       src (apply 'vector (qz/ensure-list dst)))))

(defun qz/node-has-link-to-p (dst &optional src)
  (qz/has-link-to-p (org-roam-node-id dst)
                    (and dst (org-roam-node-id dst))))
#+end_src

#+RESULTS:
: qz/node-has-link-to-p

********** has-transitive-link-p
:PROPERTIES:
:ID:       5fcfabfe-ee6a-4151-98f4-7bd9efddf325
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(setq qz/transitive-query "
with recursive cte (id, degree) as (

  select n.id, 0 as degree
  from nodes n
  where n.id = $s1

  union all

  select distinct
    source as id, c.degree + 1 as degree
  from links l
  join cte c on l.dest = c.id
  where degree <= 1 -- therefore, yield 1st degree transitivity

)
select distinct id, degree
from cte
--where cte.id = $s2
--where degree = 2
order by degree desc
")

(defun qz/transitive-links (dst)
  (org-roam-db-query qz/transitive-query dst))



(defun qz/has-transitive-link-p (dst &optional src)
  (if-let* ((nap (or src (org-roam-node-at-point)))
            (src (or src (org-roam-node-id nap))))
      (seq-contains
       (seq-map 'car
                (org-roam-db-query qz/transitive-query dst src))
       src)
    ))

;;(seq-contains '(1 2 4) 1)

(defun qz/node-has-transitive-link-p (dst &optional src)
  (qz/has-transitive-link (org-roam-node-id dst) src))

;;x(qz/has-transitive-link-p (qz/title->roam-id "emacs"))
#+end_src

*********** exploring links
:PROPERTIES:
:ID:       d5f4e927-59e1-4c43-8dad-87333028a5ff
:CREATED:  [2023-05-03 Wed 19:47]
:UPDATED:  [2023-05-03 Wed 19:48]
:END:

what I really want is the transitive links, and the connections between such
transitive members.

#+begin_src emacs-lisp :noweb-ref null
(qz/transitive-links (qz/title->roam-id "emacs-lisp"))
#+end_src

#+RESULTS:

********** TODO has-mutual-connection
:PROPERTIES:
:ID:       b08963dd-6cba-44c3-9ee8-29fa5f4904d2
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

****** migrations
:PROPERTIES:
:ID:       36692fa1-a7e7-4847-b2d9-eba4b661979b
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******* helpers
:PROPERTIES:
:ID:       7fc45873-be1d-485c-b103-c60c148b74a3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******** migrate-jobs
:PROPERTIES:
:ID:       b7536d01-720c-4d41-b05b-cfa194a66dbc
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/org-roam-migrate-jobs ()
  (interactive )
  (dolist (file (org-roam--list-all-files))
    (with-current-buffer (or (find-buffer-visiting file)
                             (find-file-noselect file))
      (message "%s visiting" file)
      (qz/dispatch-hook)
      (save-buffer))))

                                        ;(qz/org-roam-migrate-jobs)
#+end_src
******* TODO #roam_key -> =:ROAM_REFS:=
:PROPERTIES:
:ID:       1c775b12-32d0-4531-82e3-8813d3138d9b
:CREATED:  <2021-12-14 Tue 18:14>
:END:
#+roam_key: https://bonk.com

a function of a node
#+begin_src emacs-lisp

#+end_src

******* created && updated
:PROPERTIES:
:ID:       5367ec4f-24d6-4416-a8d9-18df8cb1c0c2
:CREATED:  <2022-02-22 Tue 15:27>
:UPDATED:  [2023-04-17 Mon 10:30]
:END:

******** ... description
:PROPERTIES:
:ID:       24bc2095-a971-44ab-964a-ee5a613d6d5b
:CREATED:  [2023-04-16 Sun 16:27]
:UPDATED:  [2023-04-16 Sun 16:27]
:ROAM_EXCLUDE: t
:END:
e.g https://commonplace.doubleloop.net/recentchanges
(or updated created)

entry log -> created
activity log -> (node, ?commit=HEAD) ?updated, created

created -> property:created, file-name:created
updated -> property:updated, file-name:updated

******** src
:PROPERTIES:
:ID:       e37666c2-4abc-40d1-93f8-315a31842708
:CREATED:  [2023-04-16 Sun 16:27]
:UPDATED:  [2023-04-17 Mon 10:30]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/file-created-as-timestamp (&optional file)
  (when-let* ((file (or file (buffer-file-name (current-buffer))))
              (ffile (f-base file))
              (p (string-match "-" ffile))
              (s (substring ffile 0 p)))
    (cond
     ((= p 16) (let* ((td (timezone-parse-date s))
                      (tt (timezone-parse-time (elt td 3))))
                 (format "[%s %s]"
                         (s-join "-" (cl-subseq td nil 3))
                         (s-join ":" tt))))
     ((= p 14) (let* ((yy (substring s 0 4))
                      (mm (substring s 4 6))
                      (dd (substring s 6 8))
                      (hh (substring s 8 10))
                      (MM (substring s 10 12))
                      (ss (substring s 12 14)))
                 (format "[%s-%s-%s %s:%s:%s]"
                         yy mm dd
                         hh MM ss))))))

(defun qz/org-roam-node-updated-precedence (pt file)
  (list (org-roam-get-keyword "UPDATED")
        (let ((v (s-join " " (org-entry-get-multivalued-property pt "UPDATED"))))
          (when (not (string-empty-p v)) v))
        (format-time-string
         "[%Y-%m-%d %H:%M:%S]"
         (file-attribute-modification-time (file-attributes file)))))

(defun qz/org-roam-node-created-precedence (pt file)
  (list (org-roam-get-keyword "CREATED")
        (let ((v (s-join " " (org-entry-get-multivalued-property pt "CREATED"))))
          (when (not (string-empty-p v)) v))
        (qz/file-created-as-timestamp file)))

(defun qz/org-roam-node-date-precedence (node date-fn)
  (save-excursion
    (let* ((pt (org-roam-node-point node))
           (file (org-roam-node-file node)))
      (with-current-buffer (or (find-buffer-visiting file)
                               (find-file-noselect file))
        (goto-char pt)
        ;;(message "qz: getting node updated: %s" (org-roam-node-title node))
        (org-with-wide-buffer
         (car (remove nil (funcall date-fn pt file))))))))

(defun qz/org-roam-node-updated-date (node)
  (qz/org-roam-node-date-precedence
   node
   (lambda (pt file)
     (append (qz/org-roam-node-updated-precedence pt file)
             (qz/org-roam-node-created-precedence pt file)))))

(defun qz/org-roam-node-created-date (node)
  (qz/org-roam-node-date-precedence
   node
   '(lambda (pt file)
      (append (qz/org-roam-node-created-precedence pt file)
              (reverse (qz/org-roam-node-updated-precedence pt file))))))

;;(cl-subseq [1 2 3] 1 2)
;;(car [1 2 3])
;;(or (s-join "a" nil) "b")

;; (let ((node (org-roam-node-from-title-or-alias "wine")))
;;   (list (qz/org-roam-node-updated-date node)
;;         (qz/org-roam-node-created-date node)))

;;(funcall (lambda (a b c) (message "%s %s %s" a b c)) 1 2 3)

(defun qz/do-migration--created-updated ()
  (let ((org-mode-hook nil))
    (cl-loop for node in (seq-map 'car (org-roam-db-query [:select id :from nodes]))
             ;;(org-roam-node-list) groups erroneously
             collect
             (let ((node (org-roam-populate (org-roam-node-create :id node))))
               (format "%s,%s,%s,%s,%s"
                       ;;"%s:%s,%s,%s,%s" to show with point
                       (org-roam-node-id node)
                       ;;(org-roam-node-point node)
                       (qz/org-roam-node-updated-date node)
                       (qz/org-roam-node-created-date node)
                       (org-roam-node-title node))
               (kill-buffer (get-file-buffer (org-roam-node-file node)))))))
#+end_src

#+RESULTS:
: /tmp/oo

******** TODO add override in ordering if DATE is 20210803
:PROPERTIES:
:ID:       87bd401c-7c9b-4cb4-b299-513bce1792b3
:CREATED:  [2022-03-10 Thu 19:24]
:UPDATED:  <2022-03-11 Fri 14:32>
:ROAM_EXCLUDE: t
:END:
******** sanity
:PROPERTIES:
:ID:       80cb794e-d401-4569-adb2-b68dbc285db0
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src shell :results drawer
cat /tmp/oo | wc -l
cat /tmp/oo | uniq -c | sort -r | wc -l
cat /tmp/oo | uniq -c | sort -r | head
#+end_src

#+RESULTS:
:results:
3394
3395
1 fffec49f-29e6-4eeb-bf72-8a332f758222,<2021-09-30 01:00:38>,<2020-07-13 09:03:06>,Why, and how much, extra disk space is required when upgrading with Slony-1?
1 ffd716b0-02c7-4594-aec9-bb6cf729d86a,<2021-09-30 01:00:38>,<2021-09-30 01:00:38>,pollo de limon
1 ffcd9f0f-7eca-4d4e-bf94-a7a41266994f,<2021-09-30 01:00:38>,<2021-09-30 01:00:38>,<2021-06-15>
1 ffa31214-f0c3-415a-be09-16971e46c56e,<2022-01-07 Fri 13:06>,<2022-01-07 Fri 13:06>,tig welding
1 ff7134e1-beed-4110-a1d1-299a77dcec12,<2021-10-05 11:01:34>,<2021-08-16 18:32:45>,how did you get into <<job>>
1 ff5c3587-1d6f-40a9-8ced-c0a07b5fcd76,<2021-10-19 08:47:34>,<2020-05-18 09:40:13>,meeting
1 ff4838ef-41ae-43d4-844e-c4d8a1451411,<2021-09-30 01:00:38>,<2021-08-13 16:10:35>,Arthur Holmes
1 ff318634-08d2-4987-8a82-3a436303c753,<2021-09-30 01:00:38>,<2021-09-30 01:00:38>,<2020-08-23>
1 ff1873f7-5ad7-4d4e-8de1-eb0046675047,<2021-09-30 01:00:38>,<2021-09-30 01:00:38>,wine
1 ff06c7dc-3266-4ba1-82a6-c5f430bb1963,<2021-12-15 Wed 11:36>,<2021-04-20 11:47:08>,NewStore
:end:

******** duplicate ids?
:PROPERTIES:
:ID:       bac1789e-70fa-4ab0-a762-befa8aee61a8
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
only if we use org-roam-node-list smh
#+begin_src shell :results drawer
cat /tmp/oo | cut -d, -f1 | uniq -c | sort -rgk1 | head
#+end_src

#+RESULTS:
:results:
1 fffec49f-29e6-4eeb-bf72-8a332f758222
1 ffd716b0-02c7-4594-aec9-bb6cf729d86a
1 ffcd9f0f-7eca-4d4e-bf94-a7a41266994f
1 ffa31214-f0c3-415a-be09-16971e46c56e
1 ff7134e1-beed-4110-a1d1-299a77dcec12
1 ff5c3587-1d6f-40a9-8ced-c0a07b5fcd76
1 ff4838ef-41ae-43d4-844e-c4d8a1451411
1 ff318634-08d2-4987-8a82-3a436303c753
1 ff1873f7-5ad7-4d4e-8de1-eb0046675047
1 ff06c7dc-3266-4ba1-82a6-c5f430bb1963
:end:

******** date distribution
:PROPERTIES:
:ID:       a51780f5-f313-43fd-9e4a-4ea9f1d5d03c
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
********* updated
:PROPERTIES:
:ID:       19fe8ad7-4a01-426c-805f-60dcb3b0c76e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src shell :results drawer
cat /tmp/oo | awk -F, '{print $2}' | sort | uniq -c | sort -rgk1 | wc -l
cat /tmp/oo | awk -F, '{print $2}' | sort | uniq -c | sort -rgk1 | head
#+end_src

#+RESULTS:
:results:
534
2246 <2021-09-30 01:00:38>
96 <2022-01-06 12:46:02>
77 <2021-10-19 08:47:34>
35 <2022-01-12 20:09:37>
34 <2021-10-05 11:42:04>
14 <2022-01-12 16:47:20>
14 <2021-12-13 11:13:32>
11 <2021-10-05 16:34:48>
11 <2021-10-01 16:24:07>
10 <2022-01-12 13:40:32>
:end:

********* created
:PROPERTIES:
:ID:       8a0ef7a7-d1ee-43be-86bc-3de2974c3df2
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src shell :results drawer
cat /tmp/oo | awk -F, '{print $3}' | sort | uniq -c | sort -rgk1 | wc -l
cat /tmp/oo | awk -F, '{print $3}' | sort | uniq -c | sort -rgk1 | head
#+end_src

#+RESULTS:
:results:
1893
500 <2021-08-13 16:10:35>
459 <2021-09-30 01:00:38>
102 <2021-04-20 11:47:08>
37 <2021-05-18 12:49:41>
28 <2021-10-19 08:47:34>
20 <2020-05-15 16:39:41>
15 <2021-12-13 11:13:32>
13 <2022-01-12 Wed 16:58>
12 <2020-05-11 15:09:56>
11 <2021-06-08 08:19:23>
:end:

********* created,updated
:PROPERTIES:
:ID:       d902fa0b-bedc-4df0-b5a6-05247c4716a2
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src shell :results drawer
cat /tmp/oo | awk -F, '{print $2,$3}' | sort | uniq -c | sort -rgk1 | head
#+end_src

#+RESULTS:
:results:
459 <2021-09-30 01:00:38> <2021-09-30 01:00:38>
241 <2021-09-30 01:00:38> <2021-08-13 16:10:35>
96 <2022-01-06 12:46:02> <2021-04-20 11:47:08>
35 <2022-01-12 20:09:37> <2021-05-18 12:49:41>
28 <2021-10-19 08:47:34> <2021-10-19 08:47:34>
26 <2021-10-19 08:47:34> <2021-08-13 16:10:35>
19 <2021-10-05 11:42:04> <2021-08-13 16:10:35>
14 <2022-01-12 16:47:20> <2020-05-15 16:39:41>
14 <2021-12-13 11:13:32> <2021-12-13 11:13:32>
11 <2021-10-05 16:34:48> <2021-06-08 08:19:23>
:end:

******** deciding on timeline formats
:PROPERTIES:
:ID:       f12933d5-0769-46bc-a6e5-d7d57fc4efe1
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
********* node feed: timeline of created-only
:PROPERTIES:
:ID:       361cf6bc-5261-4c49-aef9-15ef7ce18640
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
********* activity feed: timeline of updated + created
:PROPERTIES:
:ID:       56804c59-f6a9-4e6b-b52d-c032939369f0
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
********** updated instance = commit + updated value
:PROPERTIES:
:ID:       5df850d0-ef27-4ae4-b064-e388b6c13f10
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
********** created instance = created value
:PROPERTIES:
:ID:       6b862e88-77f4-4718-8448-9184524fb714
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******** TODO node timelone
:PROPERTIES:
:ID:       e5468ed2-9946-4e39-bfab-5a257f1b11cc
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

******* project-files (has todo)
:PROPERTIES:
:ID:       ff40dc98-d9dd-4ec5-85e6-48a33d459a79
:CREATED:  [2022-03-31 Thu 11:03]
:UPDATED:  [2022-03-31 Thu 11:03]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref null
(dolist (file (split-string (shell-command-to-string
                             "rg TODO ~/life/roam -t org --files-with-matches")
                            "\n"))
  (unless (string-empty-p file)
    (with-current-buffer (find-file-noselect f)
      (org-mode)
      (unless
          (qz/file-has-todo-p

#+end_src

******* stop journals from being nodes
:PROPERTIES:
:ID:       6d720847-87ae-44c3-ae1b-5b82244e3335
:UPDATED:  [2023-05-07 Sun 23:53]
:END:

how to iterate over nodes, given some predicate

#+begin_src emacs-lisp :noweb-ref null
(mapc (lambda (n)
        (when (equal "journal" (org-roam-node-title n))
          (with-current-buffer (find-file-noselect (org-roam-node-file n))
            (goto-char (org-roam-node-point n))
            ;;; ✂️
            ;;(message "%s" (org-get-heading))
            (qz/exclude-node)
            (save-buffer)
            ;;; ✂️
            )))
      (org-roam-node-list))
#+end_src

****** protocol (ref)
:PROPERTIES:
:ID:       366af88d-6c6d-4638-970f-c00f33152ef6
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******* capture                                                                 :var:
:PROPERTIES:
:ID:       8c40e382-4b74-461c-a1fb-e64d108a89c5
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

******** TODO templates
:PROPERTIES:
:ID:       06622958-6125-42a8-be50-7c9c698f367e
:CREATED:  [2023-04-24 Mon 18:48]
:UPDATED:  [2023-04-24 Mon 18:57]
:ROAM_EXCLUDE: t
:END:
:PROPERTIES:
:ID:       a7f7f97d-d3c7-4941-a522-f3530bc8379c
:CREATED:  [2022-02-22 Tue 15:27]
:ROAM_EXCLUDE: t
:
:END:

#+begin_src emacs-lisp  :noweb-ref roam :results pp
;;; ref capture
(setq org-roam-capture-ref-templates
      `(("r" "ref" plain
         "\n#+begin_quote\n${body}\n#+end_quote\n%?"
         :if-new (file+head ,qz/capture-title-timestamp-roam
                            "#+title: ${title}\n")
         :unnarrowed t)
        ("y" "ref" plain
         ,(s-join "\n" '("* %U"
                         "${body}" ""
                         ;; TODO why a buffer "*Capture*" is popped when the mpv function is run?
                         "(rde-mpv-play-url \"${ref}\" \"best\" :select nil)"
                         ;; "%(sleep-for 1)" ;; slee
                         "%?"))
         :if-new (file+head ,qz/capture-title-timestamp-roam
                            "#+title: ${title}\n")
         :unnarrowed t)
        ))
#+end_src

#+RESULTS:
: (("r" "ref" plain "\n#+begin_quote\n${body}\n#+end_quote\n%?" :if-new
:   (file+head "%(qz/utc-timestamp)-${slug}.org" "#+title: ${title}\n")
:   :unnarrowed t)
:  ("y" "ref" plain "\n* %U\n${body}\n\n(rde-mpv-play-url \"${ref}\" \"best\" :select nil)\n%(sleep-for 1)\n%?" :if-new
:   (file+head "%(qz/utc-timestamp)-${slug}.org" "#+title: ${title}\n")
:   :unnarrowed t))



****** visual
:PROPERTIES:
:ID:       ebccab15-1c63-43fe-be76-8b43d08ecf79
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******* =*org-roam*= (backlinks) buffer                                      :var:func:
:PROPERTIES:
:ID:       fca1f0cb-46ad-4064-ad9d-925dc56b4ebb
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-06-02 Fri 16:04]
:END:
******** ... images should be small
:PROPERTIES:
:ID:       1a5a2369-eef1-4e73-b701-e5a91a11e22a
:CREATED:  <2021-12-12 Sun 22:38>
:END:

so set a buffer-local value to constrain the size of images across
their width with 'org-image-actual-width, and attach to the hook
'org-roam-mode-hook.

easy peasy, only took me 20 minutes

#+begin_src emacs-lisp :noweb-ref roam
(defun qz/roam-buffer-image-width ()
  (setq-local org-image-actual-width 150)
  (org-redisplay-inline-images))

(add-hook 'org-roam-mode-hook 'qz/roam-buffer-image-width)
#+end_src
******** ... start buffer folded/collapsed
:PROPERTIES:
:ID:       87056aa9-d49b-42df-8f66-4a7f266785d0
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
https://github.com/org-roam/org-roam/issues/991#issuecomment-882010053

#+begin_src emacs-lisp :noweb-ref roam
(cons->table
 (add-to-list 'magit-section-initial-visibility-alist (cons 'org-roam-node-section 'hide)))
#+end_src

#+RESULTS:
| org-roam-node-section | hide |
| stashes               | hide |

****** settings
:PROPERTIES:
:ID:       37443493-d356-4b1d-9e19-f2b52ac6a004
:CREATED:  [2023-05-03 Wed 19:26]
:UPDATED:  [2023-05-03 Wed 19:26]
:ROAM_EXCLUDE: t
:END:

******* org-roam-graph-executable "neato"
:PROPERTIES:
:ID:       0731c07d-2aa4-41ba-a0de-5f3be1e69f5f
:CREATED:  [2023-05-03 Wed 19:26]
:UPDATED:  [2023-05-03 Wed 19:27]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref roam
(setq org-roam-graph-executable "neato")
#+end_src

#+RESULTS:
: neato

******* org-roam-graph-extra-config
:PROPERTIES:
:ID:       bd54943e-a232-42ed-9488-5cbea8f08b4f
:CREATED:  [2023-05-03 Wed 19:26]
:UPDATED:  [2023-05-07 Sun 15:41]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref roam
(setq org-roam-graph-extra-config '(("overlap" . "false")))
#+end_src

#+RESULTS:
: ((overlap . false))

***** download                                                                  :var:
:PROPERTIES:
:ID:       b32477c3-9346-4c88-8710-043b6eb9824f
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-06-02 Fri 15:57]
:END:

****** init
:PROPERTIES:
:ID:       ec6dc61c-94ed-4d00-9d3e-43e224fa57f6
:CREATED:  [2023-06-02 Fri 15:56]
:UPDATED:  [2023-06-02 Fri 15:56]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref org
(require 'org-download)
#+end_src

#+RESULTS:
: org-download

****** fix those fucking insane paths -- seriously wtf
:PROPERTIES:
:ID:       97d1b8cb-1044-4945-a462-011e1b178761
:CREATED:  [2023-06-02 Fri 15:56]
:UPDATED:  [2023-07-23 Sun 10:59]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(defun org-download--dir-2 () "screenshots")
#+end_src

#+RESULTS:
: org-download--dir-2


#+begin_src shell :results silent
find $HOME/life -name '*.png' | grep screenshot.png
#+end_src

***** modern
:PROPERTIES:
:CREATED:  [2023-09-23 Sat 23:21]
:UPDATED:  [2023-09-23 Sat 23:21]
:ID:       0bde11cb-fe19-4be4-858b-9af55cd2fbcd
:ROAM_EXCLUDE: t
:END:

****** org-modern-star
:PROPERTIES:
:CREATED:  [2023-09-23 Sat 23:21]
:UPDATED:  [2023-09-24 Sun 15:41]
:ID:       d2c3248a-4854-43b8-9c04-0dabb628177f
:ROAM_EXCLUDE: t
:END:

******* qz/bullets--                                                            :var:
:PROPERTIES:
:CREATED:  [2023-09-24 Sun 20:26]
:UPDATED:  [2023-11-07 Tue 12:50]
:ID:       950aacbc-a1e6-4c53-9ca6-38951ba30bce
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref org
(setq qz/bullets--newline? nil
      qz/bullets--spacing 2
      qz/bullets--list
      '((◉ ○ ◈ ◇ ✳)
        (🐕 🦮 🌭 🐶) ;; #{🐕\x200d;🦺}# 🐕‍🦺
        (🍀 🍮 🫰 🫶)
        (🙈 🙉 🙊)

        (🌑 🌒 🌓 🌔 🌕 🌖 🌗 🌘)
        (🌑 🌒 🌓 🌔 🌕 🌖 🌗 🌘 🌙 🌚 🌛 🌜)

        ("ฅ՞•ﻌ•՞ฅ" "ʕっ￫ᴥ￩ʔっ" "ʕ ꈍᴥꈍʔ" "ᵒ̴̶̷̥ ᆽᵒ̴̶̷̥") ;; best with no spacing per-level
        (ہ ﻩ)
        ("") ; minimalist


        ;;(¹ ) char 185
        ))


#+end_src

#+RESULTS:
: ((◉ ○ ◈ ◇ ✳) (🐕 🦮 🌭 🐶) (🍀 🍮 🫰 🫶) (🙈 🙉 🙊) (🌑 🌒 🌓 🌔 🌕 🌖 🌗 🌘) (🌑 🌒 🌓 🌔 🌕 🌖 🌗 🌘 🌙 🌚 🌛 🌜) ("ฅ՞•ﻌ•՞ฅ" "ʕっ￫ᴥ￩ʔっ" "ʕ ꈍᴥꈍʔ" "ᵒ̴̶̷̥ ᆽᵒ̴̶̷̥") (ہ ﻩ) (""))

******* org-modern--choose-bullets                                             :func:
:PROPERTIES:
:CREATED:  [2023-09-24 Sun 20:26]
:UPDATED:  [2023-09-24 Sun 21:47]
:ID:       39edd1c6-85e6-4ca5-ba24-c5091edf8001
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-modern--choose-bullets (&optional n)
  (interactive)
  (setq qz/bullets
        (or (and n (nth n qz/bullets--list))
            (let ((v (mapcar (lambda (b) (cons (format "%s" b) b))
                             qz/bullets--list)))
              (cdr (assoc (completing-read "bullets? " (mapcar 'car v))
                          v))))
        org-modern-star
        (cl-loop for star in
                 (seq-take
                  (-cycle qz/bullets
                          ;; ╱|、
                          ;;(˚ˎ。7
                          ;; |、˜〵
                          ;; じしˍ,)ノ
                          ) 60)
                 and i from 0
                 collect (format "%s%s%s"
                                 (if qz/bullets--newline? "\n" "")
                                 (make-string (* i qz/bullets--spacing) 32) ;; spc
                                 star))))

(qz/org-modern--choose-bullets 8)
#+end_src

#+RESULTS:


******* TODO name / space offset per list & default
:PROPERTIES:
:CREATED:  [2023-09-24 Sun 00:30]
:UPDATED:  [2023-09-24 Sun 00:30]
:ID:       adf25efe-ccd9-47b6-b431-ab061f153d1f
:ROAM_EXCLUDE: t
:END:

****** org-modern-list
:PROPERTIES:
:CREATED:  [2023-09-23 Sat 23:26]
:UPDATED:  [2023-09-23 Sat 23:39]
:ID:       d7fb3b55-d49a-4fae-aac0-3c0f5a7ecae8
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(setq org-modern-list
      '((43 . "◦")
        (45 . "–")
        (42 . "•")))

(mapcar (lambda (e) (char-to-string (car e))) org-modern-list)
#+end_src

#+RESULTS:
: ("+" "-" "*")

****** org-modern-tag
:PROPERTIES:
:CREATED:  [2023-09-23 Sat 23:39]
:UPDATED:  [2023-09-23 Sat 23:39]
:ID:       f83541d6-4740-4f92-84b3-44c8d4972b2c
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(setq org-modern-tag t)
#+end_src

***** web-tools
:PROPERTIES:
:ID:       48282827-1d68-4b3d-b528-1dd3f2f62c42
:CREATED:  [2023-07-07 Fri 14:21]
:UPDATED:  [2023-07-07 Fri 14:21]
:ROAM_EXCLUDE: t
:END:

'org-web-tools provides us great tools for chopping up web pages.  'eww-readable is used under the hood, which is mostly useable.




****** TODO download pages to =org-directory/data/timestamp-urlslug=
:PROPERTIES:
:ID:       7c82dd4d-8de1-43f3-ac99-cf9a046948f0
:CREATED:  [2023-07-07 Fri 14:21]
:UPDATED:  [2023-07-07 Fri 15:19]
:ROAM_EXCLUDE: t
:END:

- workflow

have some link.  (from eww, firefox)
begin capture with title=link.
in body,
call 'org-web-tools-insert-web-page-as-entry
set title link-title.  (aka HTML.HEAD.TITLE)

<<<title>>>
<<<link>>

- referencing concept

webpage-node shows up in 'org-roam-node-find.  [fn:6]

it is wise to keep notes-dir/roam as org-roam-directory.  symlinking to notes-dir/data seems good for the structured-data-store

#+begin_src emacs-lisp :noweb-ref org

#+end_src

******* ensure the page has an org-roam-node
:PROPERTIES:
:ID:       20421b1b-d2f0-4367-a5d8-dfac0eff6d5b
:CREATED:  [2023-07-07 Fri 14:22]
:UPDATED:  [2023-07-07 Fri 14:27]
:ROAM_EXCLUDE: t
:END:

****** url at poinit
:PROPERTIES:
:ID:       0d8e2fcf-2321-49b1-afbc-495b7c08a1ec
:CREATED:  [2023-07-18 Tue 19:01]
:UPDATED:  [2023-07-19 Wed 21:07]
:ROAM_EXCLUDE: t
:END:


#+begin_src emacs-lisp
(cl-defun qz/org-web-tools-read-url-as-org (url &key (show-buffer-fn 'switch-to-buffer))
  "Read URL's readable content in an Org buffer.
Buffer is displayed using SHOW-BUFFER-FN."
  (interactive (list (org-web-tools--get-first-url)))
  (let ((entry (org-web-tools--url-as-readable-org url)))
    (when entry
      (funcall show-buffer-fn url)
      (org-mode)
      (insert entry)
      ;; Set buffer title
      (goto-char (point-min))
      (org-next-link)
      (rename-buffer (format "*org-web [%s]*"
                             (cdr (qz/org-web-tools--read-org-bracket-link)))))))

(defun qz/read-org-bracket-link (&optional link)
  "Return (TARGET . DESCRIPTION) for Org bracket LINK or next link on current line."
  ;; Searching to the end of the line seems the simplest way
  (save-excursion
    (when (org-in-regexp org-link-any-re)
      (let* ((full (match-string-no-properties 0))
             (target (or (match-string-no-properties 2)
                         (match-string-no-properties 0)))
             (description (match-string-no-properties 3)))
        (cons target description)))))

;;(ignore-errors (call-interactively 'qz/org-web-tools-read-url-as-org))
;;(concat org-directory "data/web/")
         #+end_src

         #+RESULTS:
         : qz/read-org-bracket-link

****** post process prose with pj-justify
:PROPERTIES:
:ID:       d2d618b2-03e4-4dab-8edc-ba4f9771b834
:CREATED:  [2023-07-18 Tue 19:01]
:UPDATED:  [2023-07-18 Tue 19:01]
:ROAM_EXCLUDE: t
:END:


#+begin_src emacs-lisp :noweb-ref null
(org-next-paragraph)
#+end_src


#+DOWNLOADED: screenshot @ 2023-07-18 18:02:24
[[file:screenshots/2023-07-18_18-02-24_screenshot.png]]

******* tangent
:PROPERTIES:
:ID:       f0702969-b3dc-457e-a9e6-d09376701af9
:CREATED:  [2023-07-18 Tue 19:01]
:UPDATED:  [2023-07-18 Tue 19:01]
:ROAM_EXCLUDE: t
:END:

memoizing these kinds of things would be a lot quicker
-  (org-in-regexp org-link-any-re)

i'm doing it here, and later --in time, and down in the lexical parse tree -- inside 'qz/read-org-bracket-link.

scope? "in-regexp" commands, any string matching,


****** org-download from image at point
:PROPERTIES:
:ID:       5816f17e-0f27-49e5-b376-29a35b076938
:CREATED:  [2023-07-18 Tue 19:01]
:UPDATED:  [2023-07-18 Tue 19:01]
:ROAM_EXCLUDE: t
:END:

handy to pop this an image link from org-web-tools

#+begin_src emacs-lisp
(defun qz/org-download-image-at-point ()
  (interactive)
  (when-let ((l (qz/read-org-bracket-link)))
    (org-download-image l)))
#+end_src



****** ? could this be done with org-roam-capture?
:PROPERTIES:
:ID:       cd9f37e7-fc82-4d67-8a42-afc1b15b5fbf
:CREATED:  [2023-07-07 Fri 14:26]
:UPDATED:  [2023-07-07 Fri 15:20]
:ROAM_EXCLUDE: t
:END:
:LOGBOOK:
CLOCK: [2023-07-07 Fri 14:24]--[2023-07-07 Fri 15:20] =>  0:56
:END:

maybe, if the org-roam-directory is locally overridden, or a capture-target is used for the directory

checking on capture templates, the structure is '(KEY NAME TYPE LOCATION PATTERN).
- see :: [[info:org#Capture templates][org#Capture templates]]



***** table
:PROPERTIES:
:ID:       6e74718a-f794-443f-aca1-676f4456fd19
:CREATED:  [2023-04-27 Thu 14:18]
:UPDATED:  [2023-04-27 Thu 14:18]
:ROAM_EXCLUDE: t
:END:

****** NEXT org-plot
:PROPERTIES:
:ID:       97b228d1-c48d-420e-acca-170b77053e97
:CREATED:  [2023-04-27 Thu 14:18]
:UPDATED:  [2023-04-27 Thu 21:06]
:ROAM_EXCLUDE: t
:END:
:LOGBOOK:
CLOCK: [2023-04-27 Thu 14:16]--[2023-04-27 Thu 17:29] =>  3:13
:END:

#+begin_src emacs-lisp :noweb-ref org
(defvar qz/orgtbl-plot-function
  ;;'orgtbl-uc-draw-cont
  'orgtbl-uc-draw-grid
  ;;'orgtbl-ascii-draw
  )

(defun qz/orgtbl-plot (&optional ask)
  "Draw an ASCII bar plot in a column.

With cursor in a column containing numerical values, this function
will draw a plot in a new column.

ASK, if given, is a numeric prefix to override the default 12
characters width of the plot.  ASK may also be the `\\[universal-argument]' \
prefix,
which will prompt for the width."
  (interactive "P")
  (let ((col (org-table-current-column))
        (min most-positive-fixnum)		 ; will be converted to infinity
        (max most-negative-fixnum)		 ; which is the desired result
        (table (org-table-to-lisp))
        (length
         (cond ((consp ask)
                (read-number "Length of column " 12))
               ((numberp ask) ask)
               (t 12))))
    ;; Skip any hline a the top of table.
    (while (eq (car table) 'hline) (pop table))
    ;; Skip table header if any.
    (dolist (x (or (cdr (memq 'hline table)) table))
      (when (consp x)
        (setq x (nth (- col 1) x))
        (when (string-match
               "^[-+]?\\([0-9]*[.]\\)?[0-9]*\\([eE][+-]?[0-9]+\\)?$"
               x)
          (setq x (string-to-number x))
          (when (> min x) (setq min x))
          (when (< max x) (setq max x)))))
    (org-table-insert-column)
    (org-table-move-column-right)
    (org-table-store-formulas
     (cons
      (cons
       (concat "$" (number-to-string (+ 1 col)))
       (format "'(%s $%s %s %s %s)"
               qz/orgtbl-plot-function col min max length))
      (org-table-get-stored-formulas)))
    (org-table-recalculate t)))

(define-key org-mode-map (kbd "C-c \" a") 'qz/orgtbl-plot)
#+end_src

#+RESULTS:
: qz/orgtbl-plot

**** capture
:PROPERTIES:
:ID:       609ab395-5ce2-4878-8bda-70dfe0182c78
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** helpers                                                                  :func:
:PROPERTIES:
:ID:       d5f2db01-4894-4e0b-90d2-e9123b87f5de
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-inbox-capture ()
  (interactive)
  "Capture a task in agenda mode."
  (org-capture nil "i"))
#+end_src

***** templates
:PROPERTIES:
:ID:       26499611-33f9-46a4-b46d-f6fe004a6620
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-03-02 Thu 15:53]
:END:

these are regular [[id:6baf4bff-d5fe-4ce0-a130-0464e49de67d][org-mode]] capture templates, but we will defer to
org-roam loading, as we use it's variables.
- :: 'org-roam-directory
- :: 'org-roam-dailies-directory

#+begin_src emacs-lisp  :noweb-ref roam
;; [[file:~/.doom.d/config.org::*templates][templates]]
(setq org-capture-templates
      `(;; basic fire&forget
        ("i" "inbox" entry
         (file ,(concat org-roam-directory "/inbox.org"))
         "* TODO %? \n\n - from :: %a")

        ;; spanish language capturing
        ("v" "vocab; spanish" entry
         (file+headline ,(concat org-roam-directory "/spanish_language.org") "vocab, phrases")
         ,(s-join "\n" '("** \"%?\" :es:"
                         "- from :: %a" ""
                         "*** :en:" "")))

        ;; capture link to live `org-roam' thing
        ("n" "now, as in NOW" entry (file ,(concat org-roam-directory "/wip.org"))
         ,(s-join "\n" '("* TODO [#A1] %? "
                         "DEADLINE: %T"
                         "CREATED: %u")))

        ;; fire directly into inbox from outside of emacs
        ("c" "org-protocol-capture" entry (file ,(concat
                                                  org-roam-directory "/inbox.org"))
         ,(s-join "\n" '("* TODO [[%:link][%:description]]" ""
                         "#+begin_quote" ""
                         "%i"
                         "#+end_quote"))
         :immediate-finish t)

        ;; push last captured item into inbox
        ("l" "last-capture" entry (file ,(concat org-roam-directory "/inbox.org"))
         (function qz/inbox-last-captured)
         :immediate-finish t)

        ("I" "current-roam" entry (file ,(concat org-roam-directory "/inbox.org"))
         (function qz/current-roam-link)
         :immediate-finish t)

        ("W" "weekly review" entry
         (file+datetree ,(concat org-roam-directory "/reviews.org"))
         ;; ... from template
         (file ,(concat org-roam-directory "/templates/weekly_review.org")))

        ("D" "daily review" entry
         (file+datetree ,(concat org-roam-directory "/reviews.org"))
         ;; ... from template
         (file ,(concat org-roam-directory "/templates/daily_review.org")))

        ("S" "screenshot" entry
         (file ,(concat org-roam-directory "/screenshots.org"))
         ,(s-join "\n" '("* screenshot: %?" ""
                         "%(qz/screenshot-clip)"
                         )))
        ))


(defun qz/screenshot-clip ()
  (interactive)
  (let ((default-directory (concat org-roam-directory "/images")))
    (s-replace "file:" (format "file:%s/" default-directory)
               (with-temp-buffer
                 (let ((default-directory default-directory))
                   (org-mode)
                   (org-download-clipboard)
                   (buffer-string))))))




;; (setq org-screenshot-method ;;"/gnu/store/n4arghf8l3f6svv2xlxwnvw4jcwa48qk-sway-shot-output %s"
;;       "/gnu/store/am017g4gdhf45kvg5xkp3s2lhkbfdwzh-sway-shot-window-or-selection %s")


;; [[file:~/.doom.d/config.org::*capture templates][roam capture templates]]

#+end_src

#+RESULTS:
: qz/screenshot-clip

****** about capture templates
:PROPERTIES:
:ID:       7701c5b0-462f-46af-b7ba-5a8f8e65b2cc
:CREATED:  [2022-09-28 Wed 17:22]
:UPDATED:  [2022-09-28 Wed 17:22]
:ROAM_EXCLUDE: t
:END:

- info :: [[info:org#Template expansion][org#Template expansion]]

******* ~%a~ :: annotation (probably link from =org-store-link=
:PROPERTIES:
:ID:       f9a3eb73-b74a-457d-be03-4ec36eeb0990
:CREATED:  [2022-09-28 Wed 17:24]
:UPDATED:  [2022-09-28 Wed 17:24]
:ROAM_EXCLUDE: t
:END:

******* ~%f~ :: the file visited when capture was called
:PROPERTIES:
:ID:       b391a18b-7e41-4263-96c0-62ff13690d0b
:CREATED:  [2022-09-28 Wed 17:24]
:UPDATED:  [2022-09-28 Wed 17:24]
:ROAM_EXCLUDE: t
:END:

******* ~%K~ :: link to currently clocked task
:PROPERTIES:
:ID:       160e965f-6df4-4db7-8f59-83347f56f499
:CREATED:  [2022-09-28 Wed 17:24]
:UPDATED:  [2022-10-27 Thu 10:44]
:ROAM_EXCLUDE: t
:END:

**** core bindings
:PROPERTIES:
:ID:       e4977820-dc45-4bfe-bab2-7a568b573b24
:CREATED:  [2022-08-15 Mon 12:24]
:UPDATED:  [2022-09-28 Wed 16:29]
:ROAM_EXCLUDE: t
:END:

***** exposition
:PROPERTIES:
:ID:       cd3890a7-7211-4042-9331-b5b5d230ab62
:CREATED:  [2022-09-28 Wed 16:36]
:UPDATED:  [2022-09-28 Wed 16:36]
:ROAM_EXCLUDE: t
:END:

I find myself working structurally with the tree, for outlining
quickly and giving structure; it is super nice to be able to insert
siblings / children without


| bind    | action       | respect? |
|---------+--------------+----------|
| C-RET   | heading      | t        |
| C-S-RET | todo heading | t        |
| M-S-RET | todo heading | f        |
| C-M-RET | subheading   | f        |



C-
C-S

C-M
C-M-S

***** src
:PROPERTIES:
:ID:       ed581dc6-ce42-430a-921c-c07ac5c12698
:CREATED:  [2022-09-28 Wed 16:36]
:UPDATED:  [2023-10-31 Tue 13:08]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(define-key org-mode-map (kbd "C-<return>")
            'org-insert-heading-respect-content)
(define-key org-mode-map (kbd "C-S-<return>")
            'org-insert-heading)

(defun org-insert-subheading-respect-content (&rest arg)
  (interactive "P")
  (let ((org-insert-heading-respect-content t))
    (org-insert-subheading arg)
    ;; [[id:28622111-aa1e-4d9a-ac23-0140a67e3d7f]]
    (end-of-line)))


(define-key org-mode-map (kbd "C-M-<return>")
            'org-insert-subheading-respect-content)
(define-key org-mode-map (kbd "C-M-S-<return>")
            'org-insert-subheading)

(define-key org-mode-map (kbd "C-c C-M-<") 'org-do-promote)
(define-key org-mode-map (kbd "C-c C-M->") 'org-do-demote)

(define-key org-mode-map (kbd "C-c C-M-p")
            (lambda ()
              (interactive)
              (make-marker)
              (org-up-heading-or-point-min)))
#+end_src

#+RESULTS:
: (closure (t) nil (interactive) (make-marker) (org-up-heading-or-point-min))

(org-insert-subheading nil)

**** effort estimates
:PROPERTIES:
:ID:       4139f89e-a615-43b6-a951-79880772cd4e
:CREATED:  [2022-09-28 Wed 17:36]
:UPDATED:  [2022-09-29 Thu 13:08]
:ROAM_EXCLUDE: t
:END:

***** how do estimates work?
:PROPERTIES:
:ID:       c196b300-6381-454c-9f9f-215c99ef5cb8
:CREATED:  [2022-09-28 Wed 17:34]
:UPDATED:  [2022-09-28 Wed 17:36]
:END:

****** :: [[info:org#Effort Estimates][org#Effort Estimates]]
:PROPERTIES:
:ID:       07604b9f-75e7-4bcc-84b4-63738e562080
:CREATED:  [2022-09-28 Wed 16:50]
:UPDATED:  [2022-09-28 Wed 17:36]
:ROAM_EXCLUDE: t
:END:
****** {C-c C-x e} :: org-set-effort || agenda: ~{e}~
:PROPERTIES:
:ID:       c8791cb2-989c-41c0-95a3-976eba8670fa
:CREATED:  [2022-09-28 Wed 16:51]
:UPDATED:  [2022-09-28 Wed 17:36]
:ROAM_EXCLUDE: t
:END:

#+begin_quote
Set the effort estimate for the current entry.  With a prefix
argument, set it to the next allowed value—see below.  This command is
also accessible from the agenda with the ‘e’ key.
#+end_quote

***** org-agenda-columns-add-appointments-to-effort-sum :: t = include
:PROPERTIES:
:ID:       c9c390d6-52ee-4604-ac6e-846c0f82d59d
:CREATED:  [2022-09-28 Wed 16:53]
:UPDATED:  [2022-09-28 Wed 17:41]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(setq org-agenda-columns-add-appointments-to-effort-sum t)
#+end_src

#+RESULTS:
: t

***** org-effort-property (default) :: ="Effort"=
:PROPERTIES:
:ID:       91b8820b-90e7-4cd0-b676-9276fe2c1f96
:CREATED:  [2022-09-28 Wed 17:42]
:UPDATED:  [2022-09-28 Wed 17:42]
:ROAM_EXCLUDE: t
:END:

***** org-agenda-default-appointment-duration (unit = minutes) :: 30 mins       :var:
:PROPERTIES:
:ID:       cfa2a1c8-b746-4612-88ae-42014e8dd15e
:CREATED:  [2022-09-28 Wed 16:53]
:UPDATED:  [2022-09-28 Wed 17:43]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(setq org-agenda-default-appointment-duration 30)
#+end_src

#+RESULTS:
: 30

***** preset efforts; file-level, or org-global-properties
:PROPERTIES:
:ID:       b776cc47-5dab-40aa-a0e8-5dd113b6d926
:CREATED:  [2022-09-28 Wed 16:56]
:UPDATED:  [2022-09-28 Wed 16:56]
:ROAM_EXCLUDE: t
:END:

****** org-global-properties
:PROPERTIES:
:ID:       a5e61661-7e7a-4f93-9505-0844df4badf8
:CREATED:  [2022-09-28 Wed 17:04]
:UPDATED:  [2022-09-28 Wed 17:43]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(add-to-list 'org-global-properties
             '("Effort_ALL" . "0 0:15 0:30 1:00 2:00 4:00 8:00"))
#+end_src

#+RESULTS:
: ((Effort_ALL . 0 0:15 0:30 1:00 2:00 4:00 8:00))

****** file-level
:PROPERTIES:
:ID:       d1efc59c-cc92-4049-a9ff-653ff0c8944c
:CREATED:  [2022-09-28 Wed 17:04]
:UPDATED:  [2022-09-28 Wed 17:33]
:ROAM_EXCLUDE: t
:END:

#+begin_example
#+properties: Effort_ALL
#+end_example

===

**** noweb tangler                                                             :meta:
:PROPERTIES:
:ID:       ded3219a-de09-4bee-a919-bf79debb9022
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-09-29 Fri 14:31]
:END:

#+begin_src emacs-lisp
;; NOWEB ORG START
(message "pre org: %s" (shell-command-to-string "date"))
(with-eval-after-load 'org
  (require 's)
  ;;; FIXME :: org-roam init kills id stuff ?
  ;;; BEGIN ORGID HACKS
  ;;(org-id-update-id-locations)
  ;; (setq org-id-locations "/home/samuel/.config/org-id-locations")
  ;;   after setting in-session, (org-roam-update-org-id-locations)
  ;;; END ORGID HACKS
  (message "loading org: %s" (shell-command-to-string "date"))
  <<org>>
  )
(message "post org: %s" (shell-command-to-string "date"))
;; NOWEB ORG END
#+end_src

**** settings
:PROPERTIES:
:ID:       3f138707-783b-474b-9d18-dca32c60b4fe
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** org-confirm-babel-evaluate  ; don't ask                                   :var:
:PROPERTIES:
:ID:       57ced9da-b883-47ea-9a88-00579d24dbf9
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-10-09 Mon 11:58]
:END:
#+begin_src emacs-lisp  :noweb-ref org
(setq org-confirm-babel-evaluate nil)
#+end_src

***** org-refile-targets                                                        :var:
:PROPERTIES:
:ID:       e52c338d-9289-4027-9b79-5013a0ef02f1
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp  :noweb-ref org
;; [[file:~/.doom.d/config.org::*refile][refile]]
(setq org-refile-targets '(("reading.org" :level . 0)
                           ("emacs.org" :level . 0)
                           ("watching.org" :level . 0)
                           ("learning.org" :level . 0)
                           ("inbox.org" :level . 0)
                           ("sample.org" :level . 0)
                           ("wip.org" :level . 0)))
#+end_src

***** TODO org-log                                                              :var:
CLOSED: [2022-03-10 Thu 19:24]
:PROPERTIES:
:ID:       23e1b5e7-acac-4670-b421-4f84904c8b57
:CREATED:  [2022-03-10 Thu 19:24]
:UPDATED:  [2022-03-11 Fri 10:09]
:ROAM_EXCLUDE: t
:END:
:LOGBOOK:
- CLOSING NOTE [2022-03-10 Thu 19:24] \\
  testing done notes
:END:

****** TODO org-log-repeat
:PROPERTIES:
:ID:       ece698ff-9204-4a2f-96ea-57b11c0649b8
:CREATED:  [2022-03-10 Thu 19:25]
:UPDATED:  [2022-03-10 Thu 19:26]
:ROAM_EXCLUDE: t
:END:
once we find out about sequences and repeats

****** org-log-refile
:PROPERTIES:
:ID:       882be009-a2e8-4ba1-95dd-6252b6108b2f
:CREATED:  [2022-03-10 Thu 19:24]
:UPDATED:  [2022-03-10 Thu 19:24]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref org
(setq org-log-refile 'note)
#+end_src

#+RESULTS:
: note

****** org-log-redeadline
:PROPERTIES:
:ID:       b791e4a5-9eaa-475a-9ca7-c3b2ac4325ff
:CREATED:  [2022-03-10 Thu 19:24]
:UPDATED:  [2022-03-10 Thu 19:24]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref org
(setq org-log-redeadline 'note)
#+end_src

#+RESULTS:
: note

****** org-log-reschedule
:PROPERTIES:
:ID:       c3564248-02b8-4912-8ab4-5d33c1fce5ba
:CREATED:  [2022-03-10 Thu 19:24]
:UPDATED:  [2022-03-10 Thu 19:24]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref org
(setq org-log-reschedule 'note)
#+end_src

#+RESULTS:
: note

****** org-log-done                                                             :var:
:PROPERTIES:
:ID:       1728a0dc-4e3f-4317-8d3d-4ebb3dbc0375
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-13 Wed 14:29]
:END:
#+begin_src emacs-lisp :noweb-ref org
(setq org-log-done 'note)
#+end_src

***** org-todo-keywords
:PROPERTIES:
:ID:       4c420d26-b3bb-41e7-a992-ee843a4987a2
:CREATED:  [2023-04-13 Thu 19:34]
:UPDATED:  [2023-04-13 Thu 19:34]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref org
(setq org-todo-keywords '((sequence "TODO" "NEXT" "DONE")))
#+end_src

#+RESULTS:
| sequence | TODO | NEXT | DONE |


***** org-startup-folded                                                        :var:
:PROPERTIES:
:ID:       948baebf-3fae-499d-8036-6e454de83417
:CREATED:  <2022-02-27 Sun 15:04>
:UPDATED:  [2022-09-30 Fri 13:54]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
;;(setq org-startup-folded 'content)
#+end_src

***** org-enforce
:PROPERTIES:
:ID:       ee742dd8-192d-4901-a5f8-342a403b6094
:CREATED:  [2022-04-06 Wed 11:39]
:UPDATED:  [2022-10-04 Tue 18:00]
:ROAM_EXCLUDE: t
:END:

- :: (info-apropos "org-enforce")

***** org-tags-column
:PROPERTIES:
:ID:       2809e6c5-ab8c-475a-ab96-6236563e5ce8
:CREATED:  [2022-04-25 Mon 10:09]
:UPDATED:  [2022-04-25 Mon 11:29]
:ROAM_EXCLUDE: t
:END:

any value <0 is a most controversial decision

- see also :: [[id:3db09afc-ea16-4ec4-883c-27ad7589f7f1][align tags]]
- see also :: [[id:0b88f9d2-f33f-4fbf-88f0-8cde8ccd0e67][org-tags-alist]]

#+begin_src emacs-lisp :noweb-ref org
(setq org-tags-column -85)    ;; auto works better for olivetti
;; (setq org-tags-column 120) ;; for wide screens & no 80char limiting
#+end_src

#+RESULTS:
: 120

***** org-tags-alist
:PROPERTIES:
:ID:       0b88f9d2-f33f-4fbf-88f0-8cde8ccd0e67
:CREATED:  [2022-04-25 Mon 10:13]
:UPDATED:  [2022-04-25 Mon 10:14]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(setq org-tag-alist
      '(("@errand" . ?e)
        ("@work" . ?w)
        ("@home" . ?h)
        ("@blog" . ?B)
        (:newline)
        ("emacs" . ?E)
        ("wip" . ?W)
        ("CANCELLED" . ?c)
        (:newline)
        ("learning" . ?l)
        ("research" . ?r)
        (:newline)
        ("book" . ?b)
        ("article" . ?a)
        ("paper" . ?p)
        (:newline)
        ("talk" . ?t)
        ("film" . ?f)))

;;(cons->table org-tag-alist)
#+end_src

#+RESULTS:
| @errand   | 101 |
| @work     | 119 |
| @home     | 104 |
| @blog     |  66 |
| :newline  | nil |
| emacs     |  69 |
| wip       |  87 |
| CANCELLED |  99 |
| :newline  | nil |
| learning  | 108 |
| research  | 114 |
| :newline  | nil |
| book      |  98 |
| article   |  97 |
| paper     | 112 |
| :newline  | nil |
| talk      | 116 |
| film      | 102 |

***** org-enforce-todo-dependencies                                             :var:
:PROPERTIES:
:ID:       51ff922b-e6d5-4437-9fdc-d6208de9b959
:CREATED:  [2022-04-06 Wed 11:29]
:UPDATED:  [2022-04-06 Wed 11:39]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(setq org-enforce-todo-dependencies t)
#+end_src

#+RESULTS:
: t

***** org-enforce-todo-checkbox-dependencies                                    :var:
:PROPERTIES:
:ID:       496407f8-71cf-4745-a5de-d0f1817ce600
:CREATED:  [2022-04-06 Wed 11:29]
:UPDATED:  [2022-04-06 Wed 11:39]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(setq org-enforce-todo-checkbox-dependencies t)
#+end_src

#+RESULTS:
: t

***** org-tags-exclude-from-inheritance
:PROPERTIES:
:CREATED:  [2023-10-09 Mon 11:58]
:UPDATED:  [2023-10-09 Mon 11:58]
:ID:       e5488368-a733-4c1e-82fb-9c236eeb7d1f
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(setq org-tags-exclude-from-inheritance '("daily" "project"))
#+end_src

#+RESULTS:
: ("daily" "project")

***** org-hierarchical-todo-statistics  ; count tasks recursively
:PROPERTIES:
:CREATED:  [2023-10-09 Mon 11:58]
:UPDATED:  [2023-10-09 Mon 11:58]
:ID:       7478b485-ccdb-4d72-be5d-604782d81a95
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(setq org-hierarchical-todo-statistics nil)
#+end_src

**** slack
:PROPERTIES:
:ID:       4454a5e4-98c8-482c-95da-c70f0a77bb29
:ROAM_EXCLUDE: t
:END:

***** redef slack-conversations-list
:PROPERTIES:
:ID:       26eafa99-2e8c-4965-996c-42039faa5342
:ROAM_EXCLUDE: t
:UPDATED:  [2023-05-24 Wed 07:50]
:END:

#+begin_src emacs-lisp
(with-eval-after-load 'slack
  (defun slack-conversations-list (team success-callback &optional types)
    (let ((lexical t)
          (cursor nil)
          (channels nil)
          (groups nil)
          (ims nil)
          (types (or types (list ;;"public_channel"
                            "private_channel"
                            "mpim"
                            "im"))))
      (cl-labels
          ((on-success
             (&key data &allow-other-keys)
             (slack-request-handle-error
              (data "slack-conversations-list")
              (cl-loop for c in (plist-get data :channels)
                       do (cond
                           ((eq t (plist-get c :is_channel))
                            (push (slack-room-create c 'slack-channel)
                                  channels))
                           ((eq t (plist-get c :is_im))
                            (push (slack-room-create c 'slack-im)
                                  ims))
                           ((eq t (plist-get c :is_group))
                            (push (slack-room-create c 'slack-group)
                                  groups))))
              (slack-if-let*
                  ((meta (plist-get data :response_metadata))
                   (next-cursor (plist-get meta :next_cursor))
                   (has-cursor (< 0 (length next-cursor))))
                  (progn
                    (setq cursor next-cursor)
                    (request))
                (funcall success-callback
                         channels groups ims))))
           (request ()
             (slack-request
              (slack-request-create
               slack-conversations-list-url
               team
               :params (list (cons "types" (mapconcat 'identity types ","))
                             (and slack-exclude-archived-channels (cons "exclude_archived" "true"))
                             (and cursor (cons "cursor" cursor)))
               :success 'on-success))))
        (request)))))
#+end_src

#+RESULTS:
: slack-conversations-list

**** links
:PROPERTIES:
:ID:       9f04fd1e-2ce6-440a-8c29-e23c72b0af23
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** insert link to attachment
:PROPERTIES:
:ID:       b34da154-8668-44fc-89da-de39359759e0
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-28 Wed 17:33]
:END:
#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-choose-current-attachment ()
  (let ((attach-dir (org-attach-dir)))
    (if attach-dir
        (let* ((file (pcase (org-attach-file-list attach-dir)
                       (`(,file) file)
                       (files (completing-read "Open attachment: "
                                               (mapcar 'list files) nil t))))
               (path (expand-file-name file attach-dir)))
          path))))

(defun qz/org-insert-current-attachment ()
  (interactive)
  (insert
   (format "[[file:./%s]]"
           (dired-make-relative
            (qz/org-choose-current-attachment)))))

(define-key org-mode-map (kbd "C-c M-a") 'qz/org-insert-current-attachment)

#+end_src
***** refine org-link for generic files ; replaces {C-c M-l}
:PROPERTIES:
:ID:       220874c8-4330-4440-a616-31b2e0a47ef2
:CREATED:  [2022-05-23 Mon 10:46]
:UPDATED:  [2023-04-14 Fri 12:12]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-insert-last-stored-link (arg)
  "Insert the last link stored in `org-stored-links'."
  (interactive "p")
  (qz/org-insert-all-links arg "" "\n"))

(defun qz/org-insert-all-links (arg &optional pre post)
  "Insert all links in `org-stored-links'.
When a universal prefix, do not delete the links from `org-stored-links'.
When `ARG' is a number, insert the last N link(s).
`PRE' and `POST' are optional arguments to define a string to
prepend or to append."
  (interactive "P")
  (let ((org-link-keep-stored-after-insertion (equal arg '(4)))
        (links (copy-sequence org-stored-links))
        (pr (or pre "- "))
        (po (or post "\n"))
        (cnt 1) l)
    (if (null org-stored-links)
        (message "No link to insert")
      (while (and (or (listp arg) (>= arg cnt))
                  (setq l (if (listp arg)
                              (pop links)
                            (pop org-stored-links))))
        (setq cnt (+ 1 cnt))
        (insert pr)
        (message "%s" `((:l ,l)
                        (:car-l ,(car l))
                        (:cadr-l ,(cadr l))
                        (:mod-l ,(car (last (s-split "/" (car l)))))))
        (org-insert-link
         nil (car l)
         (or (cadr l)
             (qz/ol-file l)))
        (insert po)))))

(define-key org-mode-map (kbd "C-c M-l") 'qz/org-insert-last-stored-link)
#+end_src

#+name: def-ol-file
#+begin_src emacs-lisp :noweb-ref org
(require 'f)

(defun qz/ol-file (link)
  "transform file path into pretty ol-output
            - respect projects; truncate prior path, keeping only basename
"
  ;; (car (last (s-split "/" "file:~/sys/rde/goop.boop::pattern")))
  ;; == "goop.boop::pattern"
  ;; (message  "HELLO :: %s/%s" p (car (last (s-split "/" p))))
  (let* ((p (car link))
         (inner (mapcar
                 (lambda (s) (let ((ss (car s)))
                               (and (s-contains? (f-base ss) p)
                                    (cons (f-base ss) ss))))
                 project--list))
         (suffix (s-join
                  " . "
                  ;; sort by length of path desc, taking the innermost subproj
                  ;; take first value of first result
                  (--tb (cl-sort (remove nil inner)
                                 (lambda (a b) (gt (length a) (length b)))
                                 :key 'cdr)
                        (mapcar 'car)
                        (reverse)))))
    (format "%s%s"
            (or (and suffix (format "(%s)" suffix)) "")
            (car (last (s-split "/" p))))))

;;(car org-stored-links)
;;(qz/ol-file (car org-stored-links))
#+end_src

[[file:~/git/ghorg/all-groups/newstore/engineering/libraries/python/events/newstore/shared/events/test.py::def assert_expected_events_were_emitted(self, service_name, test_case):][(ghorg . python . events) test.py::def assert_expected_events_were_emitted(self, service_name, test_case):]]
#+RESULTS: def-ol-file
: qz/ol-file

#+name: org-alias-angle-brackets
#+begin_src emacs-lisp :noweb-ref org
(defalias '--tb '->>)
(defalias '--tf '->)
(defalias 'gt '>)
(defalias 'lt '<)
#+end_src

#+RESULTS: org-alias-angle-brackets
: lt


[[file:~/git/ghorg/all-groups/newstore/engineering/libraries/python/events/newstore/shared/events/test.py::def assert_expected_events_were_emitted(self, service_name, test_case):][(ghorg . python . events) test.py::def assert_expected_events_were_emitted(self, service_name, test_case):]]

[[file:~/git/ghorg/all-groups/newstore/engineering/libraries/python/events/newstore/shared/events/test.py::def assert_expected_events_were_emitted(self, service_name, test_case):][(nil) test.py::def assert_expected_events_were_emitted(self, service_name, test_case):]]


[[file:~/git/ghorg/all-groups/newstore/engineering/libraries/python/events/newstore/shared/events/test.py::def assert_expected_events_were_emitted(self, service_name, test_case):][(nil) test.py::def assert_expected_events_were_emitted(self, service_name, test_case):]]

[[file:~/git/ns/routing/logistic_order/services/logistic_order/test/component_tests/sales_order_open/__init__.py::class SalesOrderOpenComponentTestBase(EventPumpingTestBase):][(rde . ~/git/sys/rde/)/__init__.py::class SalesOrderOpenComponentTestBase(EventPumpingTestBase):]]
**** hooks
:PROPERTIES:
:ID:       5ff7526d-f62c-49fd-8752-07d829fce0d8
:CREATED:  <2022-02-23 Wed 09:17>
:ROAM_EXCLUDE: t
:END:
***** org-mode-hook -> before-save-hook: create ids for headines in buffer
:PROPERTIES:
:ID:       b07ff6f9-2e00-467c-98e8-c4c8697ce08f
:CREATED:  <2022-02-23 Wed 09:17>
:UPDATED:  [2023-09-04 Mon 18:49]
:END:

adapted for [[id:b33372ae-f731-4482-8e3a-0c5e986ac70a][org-roam]], the =ROAM_EXCLUDE= property is set, to reduce
noise in the database, but retain id-wise properties of linking.

see q

#+begin_src emacs-lisp :noweb-ref org
(defun qz/create-excluded-ids-for-headlines-in-buffer ()
  "Add ID properties to all headlines in the current file which
do not already have one."
  (interactive)
  (when (file-exists-p (buffer-file-name (current-buffer)))
    (org-map-entries (lambda (&rest r)
                       (unless (ignore-errors (org-id-get))
                         (ignore-errors (org-id-get-create))
                         (org-set-property "ROAM_EXCLUDE" "t"))))))


(add-hook 'org-mode-hook
          (lambda ()
            (add-hook 'before-save-hook
                      'qz/create-excluded-ids-for-headlines-in-buffer nil 'local)))

(setq org-id-link-to-org-use-id t)
#+end_src

#+RESULTS:
: t
****** finding & fixing duplicate IDs
:PROPERTIES:
:CREATED:  [2023-09-04 Mon 18:46]
:UPDATED:  [2023-09-04 Mon 18:49]
:ID:       1082df7c-e1f2-42f8-9b34-e8c1285afe3e
:ROAM_EXCLUDE: t
:END:


#+begin_src shell  :var _=(setq-local org-link-elisp-confirm-function nil)
rg 'ID:' $HOME/life/roam -t org \
    | grep  -vE '2023-09-04|archive' \
    | awk -F'ID:' '{print $2}' \
    | sort | uniq -c | sort -k1 | awk '{ if ($1 > 1) print $2 }' \
    | xargs -I {} echo '[[elisp:(consult-ripgrep org-roam-directory ":ID: {}")][rg :: {}]]'
#+end_src

#+RESULTS:
:results:
:end:

***** org-mode-hook -> adaptive-wrap-prefix-mode
:PROPERTIES:
:ID:       13fb181a-3f55-4b63-b2ff-c23af6b29f8f
:CREATED:  [2022-10-31 Mon 12:20]
:UPDATED:  [2022-10-31 Mon 12:20]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb ref org
(when (fboundp 'adaptive-wrap-prefix-mode)
  (add-hook 'org-mode-hook 'adaptive-wrap-prefix-mode))
#+end_src

**** tag
:PROPERTIES:
:ID:       58ddf980-3404-4a72-bb1f-47a5a18a5d66
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

***** [[id:26b5040b-0883-444f-af7a-abd4e1d67c0e][my thoughts]]
:PROPERTIES:
:ID:       89daceb2-7818-450f-9638-1415a377b3bd
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

I'm using tags and auto-tags rather sporadically
- person
- private
- daily

****** TODO tag analysis (file | -> headline) ; [[id:3ec0367f-9ff5-419d-9a44-a3424656c1eb][org-roam database machinations]]
:PROPERTIES:
:ID:       cefcceaa-3708-48b4-bb14-ac5462c00474
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

***** org-tag-alist                                                             :var:
:PROPERTIES:
:ID:       21abbf73-43fb-4bc4-a5fb-53e7dc0e6345
:CREATED:  [2021-12-07 Tue 14:13]
:ROAM_EXCLUDE: t
:UPDATED:  [2023-04-12 Wed 18:13]
:END:

#+begin_src emacs-lisp
(setq org-tag-alist
      '(("@errand" . ?e)
        ("@work" . ?w)
        ("@home" . ?h)
        ("@blog" . ?B)
        (:newline)
        ("emacs" . ?E)
        ("task" . ?t)
        ("CANCELLED" . ?C)
        (:newline)
        ("learning" . ?l)
        ("research" . ?r)
        (:newline)
        ("book" . ?b)
        ("article" . ?a)
        ("paper" . ?p)
        ("talk" . ?t)
        ("film" . ?f)))
#+end_src

#+RESULTS:
: ((@errand . 101) (@work . 119) (@home . 104) (@blog . 66) (:newline) (emacs . 69) (task . 116) (CANCELLED . 67) (:newline) (learning . 108) (research . 114) (:newline) (book . 98) (article . 97) (paper . 112) (talk . 116) (film . 102))

**** visual
:PROPERTIES:
:ID:       fc2aaff6-cb57-49ac-b507-a6c7b2720c70
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

***** use fixed size of images
:PROPERTIES:
:ID:       bebc4bc6-3ed0-49a1-b76a-ffe7ee11dd33
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:
:END:
640px is a good size, at approximately 64 columns

----------------------------------------------------------------
#+DOWNLOADED: screenshot @ 2021-12-12 22:14:04
[[file:configs/2021-12-12_22-14-04_screenshot.png]]

check with (org-redisplay-inline-images)
-----------------------------------------------------------------

#+begin_src emacs-lisp :noweb-ref org
(setq qz/org-image-actual-width 640)
(defun qz/org-image-width (&optional n)
  (setq org-image-actual-width (or n qz/org-image-actual-width)))
(qz/org-image-width)
#+end_src

#+RESULTS:
: 640

****** TODO re-adjust on text-scale-adjust (mouse, local, global)
:PROPERTIES:
:CREATED:  [2023-09-28 Thu 16:48]
:UPDATED:  [2023-09-28 Thu 16:55]
:ID:       4dbb3303-307d-4aee-92dd-5c4a2126581e
:ROAM_EXCLUDE: t
:END:

- needs to be derived from text-scale, or DEFAULT

  #+begin_src emacs-lisp :noweb-ref null
  (defun qz/org-image-width--derive--text-scale ()
    (and-let* ((b (boundp 'text-scale-mode-amount))
               (v (symbol-value 'text-scale-mode-amount)))))

  (defun qz/org-image-width--derive (&rest _)
    (let ((w (qz/org-image-width--derive--text-scale)))
      (message "qz image-width :: %s" w)
      (qz/org-image-width (qz/org-image-width--derive--text-scale)))
    (qz/org-refresh-inline-images))

  (qz/advice- qz/org-image-width--derive :after text-scale-increase)
  #+end_src

  #+RESULTS:
  : (qz/advice-enable--qz/org-image-width--derive--text-scale-increase qz/advice-disable--qz/org-image-width--derive--text-scale-increase)

******* test it
:PROPERTIES:
:CREATED:  [2023-09-28 Thu 16:55]
:UPDATED:  [2023-09-28 Thu 16:55]
:ID:       64f6124e-719c-44c8-a305-636d345878d4
:ROAM_EXCLUDE: t
:END:

  #+DOWNLOADED: screenshot @ 2023-09-28 16:49:24
  [[file:screenshots/2023-09-28_16-49-24_screenshot.png]]

***** hide property drawers
:PROPERTIES:
:ID:       b531b1b9-17ef-406c-9650-a04f7c669e5e
:CREATED:  [2022-09-29 Thu 13:14]
:UPDATED:  [2023-04-12 Wed 17:38]
:ROAM_EXCLUDE: t
:END:

- :: https://stackoverflow.com/questions/17478260/completely-hide-the-properties-drawer-in-org-mode

#+begin_src emacs-lisp :noweb-ref org
;;(require 'org)

(defun org-cycle-hide-drawers (state)
  "Re-hide all drawers after a visibility state change."
  (when (and (derived-mode-p 'org-mode)
             (not (memq state '(overview folded contents))))
    (save-excursion
      (let* ((globalp (memq state '(contents all)))
             (beg (if globalp
                      (point-min)
                    (point)))
             (end (if globalp
                      (point-max)
                    (if (eq state 'children)
                        (save-excursion
                          (outline-next-heading)
                          (point))
                      (org-end-of-subtree t)))))
        (goto-char beg)
        (while (re-search-forward org-drawer-regexp end t)
          (save-excursion
            (beginning-of-line 1)
            (when (looking-at org-drawer-regexp)
              (let* ((start (- (match-beginning 0) 1))
                     (limit
                      (save-excursion
                        (outline-next-heading)
                        (point)))
                     (msg (format
                           (concat
                            "org-cycle-hide-drawers:  "
                            "`:END:`"
                            " line missing at position %s")
                           (+ 1 start))))
                (if (re-search-forward "^[ \t]*:END:" limit t)
                    (outline-flag-region start (point-at-eol) t)
                  (user-error msg))))))))))

  #+end_src

  #+RESULTS:
  : org-cycle-hide-drawers

***** {M-x align tags}
:PROPERTIES:
:ID:       3db09afc-ea16-4ec4-883c-27ad7589f7f1
:CREATED:  [2022-04-25 Mon 10:10]
:UPDATED:  [2023-04-12 Wed 17:39]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-align-tags ()
  (interactive)
  (org-align-tags 'yes-all-the-bloody-tags))
#+end_src

#+RESULTS:
: qz/org-align-tags

**** etc
:PROPERTIES:
:ID:       b4ae17d0-d19b-4a48-9d76-ca96c4b1a776
:CREATED:  [2022-08-15 Mon 12:35]
:UPDATED:  [2022-08-15 Mon 12:35]
:ROAM_EXCLUDE: t
:END:

***** sort this subtree (from parent)
:PROPERTIES:
:ID:       68fef422-f845-4c3f-829d-ede1e3de0236
:CREATED:  [2022-08-15 Mon 12:35]
:UPDATED:  [2022-08-15 Mon 12:35]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-sort-subtree ()
  (interactive)
  (save-mark-and-excursion
    (org-up-heading-or-point-min)
    (call-interactively 'org-sort)))

(define-key org-mode-map (kbd "C-c C-M-6") 'qz/org-sort-subtree)
#+end_src

#+RESULTS:
: qz/org-sort-subtree

**** export
:PROPERTIES:
:ID:       80904e8f-9c5c-4fc0-8f70-14be4044c7cc
:CREATED:  [2022-11-29 Tue 11:07]
:UPDATED:  [2022-11-29 Tue 11:07]
:ROAM_EXCLUDE: t
:END:

***** (md) without links
:PROPERTIES:
:ID:       70498e60-ec27-4ead-904f-c3a8402d7dca
:CREATED:  [2022-11-29 Tue 11:07]
:UPDATED:  [2022-11-29 Tue 11:07]
:ROAM_EXCLUDE: t
:END:

- ::  [[https://emacs.stackexchange.com/questions/22396/export-without-links][org mode - Export without links - Emacs Stack Exchange]]

#+name: elisp-derived-md-export-without-links
#+begin_src emacs-lisp :noweb-ref org
(require 'ox)
(require 'ox-md)

(defun qz/org-md-nolink (link contents info)
  (format "%s" contents))

(org-export-define-derived-backend 'my-md 'md
  :menu-entry
  '(?M "Export to Markdown without links" (lambda (a s v b) (org-md-export-to-markdown a s v)))
  :translate-alist '((link . qz/org-md-nolink)))
#+end_src

#+RESULTS: elisp-derived-md-export-without-links
: #s(org-export-backend my-md md ((link . qz/org-md-nolink)) nil nil nil (77 "Export to Markdown without links" (lambda (a s v b) (org-md-export-to-markdown a s v))))

***** from subtree, including max-level heading from point
:PROPERTIES:
:ID:       a066c6c9-a733-4d56-baef-662353c21a82
:CREATED:  [2022-11-29 Tue 11:08]
:UPDATED:  [2023-09-24 Sun 16:39]
:ROAM_EXCLUDE: t
:END:

- ::  [[https://emacs.stackexchange.com/questions/66851/include-subtree-header-in-filename-when-exporting-subtree-from-org-mode][org export - Include subtree header in filename when exporting subtree from org-mode - Emacs Stack Exchange]]

#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-export-headline (&optional backend async subtreep visible-only body-only ext-plist)
  "Export the current Org headline using BACKEND.

The available backends are the ones of `org-export-backends' and
'pdf.

When optional argument SUBTREEP is non-nil, transcode the
sub-tree at point, extracting information from the headline
properties first.

When optional argument VISIBLE-ONLY is non-nil, don't export
contents of hidden elements.

When optional argument BODY-ONLY is non-nil, only return body
code, without surrounding template.

Optional argument EXT-PLIST, when provided, is a property list
with external parameters overriding Org default settings, but
still inferior to file-local settings."
  (interactive)
  (let* ((backend (unless backend
                    (intern
                     (completing-read "Available backends: "
                                      (append org-export-backends '(pdf slack))))))
         (headline (car (last (org-get-outline-path t))))
         (headline-alnum (replace-regexp-in-string "[^[:alnum:]-_]" "-" headline))
         (file-prefix (file-name-sans-extension (buffer-file-name)))
         (filename (format "%s-%s.%s" file-prefix headline-alnum
                           (cl-case backend
                             (pdf   "tex")
                             (slack "md")
                             (t backend)))))
    (save-restriction
      (org-narrow-to-subtree)
      (kill-new (s-join " -> " (org-get-outline-path t nil)))
      (org-export-to-file
          (if (eq backend 'pdf) 'latex backend)
          filename async subtreep visible-only body-only ext-plist
          (when (eq backend 'pdf)
            (lambda (file) (org-latex-compile file))))
      (widen))
    (with-temp-buffer
      (insert-file-contents filename)
      (kill-new (buffer-string)))))
#+end_src


#+RESULTS:
: qz/org-export-headline

****** {C-c C-M-e} :: qz/org-export-headline
:PROPERTIES:
:ID:       d62c1049-2bce-4b3e-8e4b-7619ebb9e262
:CREATED:  [2022-11-29 Tue 11:09]
:UPDATED:  [2022-11-29 Tue 11:09]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(define-key org-mode-map (kbd "C-c C-M-e") 'qz/org-export-headline)
#+end_src

#+RESULTS:
: qz/org-export-headline

***** slack
:PROPERTIES:
:ID:       5d0aec80-160f-46b8-b2ba-a94e11fe417c
:CREATED:  [2022-11-29 Tue 11:47]
:UPDATED:  [2022-11-29 Tue 11:48]
:ROAM_EXCLUDE: t
:END:

****** redefine :: org-slack-headline ;; use headline + level as bullet
:PROPERTIES:
:ID:       321011a5-e5e1-4747-92ce-4b83f5400551
:CREATED:  [2022-11-29 Tue 11:47]
:UPDATED:  [2023-03-02 Thu 16:15]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(defun org-slack-headline (headline contents info)
  "Transcode HEADLINE element into Markdown format.
CONTENTS is the headline contents.  INFO is a plist used as
a communication channel."
  (unless (org-element-property :footnote-section-p headline)
    (let* ((level (org-export-get-relative-level headline info))
           (title (org-export-data (org-element-property :title headline) info))
           (todo (and (plist-get info :with-todo-keywords)
                      (let ((todo (org-element-property :todo-keyword
                                                        headline)))
                        (and todo (concat (org-export-data todo info) " ")))))
           (tags (and (plist-get info :with-tags)
                      (let ((tag-list (org-export-get-tags headline info)))
                        (and tag-list
                             (concat "     " (org-make-tag-string tag-list))))))
           (priority
            (and (plist-get info :with-priority)
                 (let ((char (org-element-property :priority headline)))
                   (and char (format "[#%c] " char)))))
           ;; Headline text without tags.
           (heading (concat todo priority title)))
      (format "%s*%s*\n\n%s"
              (if (gt level 1)
                  (concat (s-repeat (- level 3) ;; starting flush
                                    "  ")
                          "- ")
                "")
              title contents))))
#+end_src

#+RESULTS:
: org-slack-headline

*** writing
:PROPERTIES:
:ID:       98482d46-ba6c-4555-99aa-bc589e0a1c13
:CREATED:  [2023-04-21 Fri 16:18]
:UPDATED:  [2023-04-21 Fri 16:18]
:ROAM_EXCLUDE: t
:END:

**** sentence-end-double-space
:PROPERTIES:
:ID:       285dc2b9-8c0f-42ca-b1e6-dd215efd396d
:CREATED:  [2023-04-21 Fri 16:18]
:UPDATED:  [2023-04-21 Fri 16:18]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(setq sentence-end-double-space t)
#+end_src

*** system commands
:PROPERTIES:
:ID:       c519b791-1810-4150-89ec-3408998f71a3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-28 Wed 16:36]
:END:
**** get mail
:PROPERTIES:
:ID:       7756268f-c9b3-468d-a9ce-c6068279c7eb
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(defun qz/get-mail ()
  (interactive)
  (async-shell-command "mbsync -Va && notmuch new"))
#+end_src

**** rde-sanity
:PROPERTIES:
:ID:       3fb0efe4-8d3f-4840-bd92-74cc3249d975
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-04-26 Wed 21:03]
:END:

#+begin_src emacs-lisp
(defun qz/rde-sanity ()
  (interactive)
  (async-shell-command
   (concat "cd $HOME/git/sys/rde"
           "&& guix repl -L src -L examples/src dev/sanity.scm")))
#+end_src

#+RESULTS:
: qz/rde-sanity

**** reload-config
:PROPERTIES:
:ID:       21946f30-986f-49fe-a51d-38c78f315543
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2024-03-31 Sun 20:28]
:END:

#+begin_src emacs-lisp
(setq qz/emacs/config "~/git/sys/rde/rde/examples/abcdw/configs.org"
      qz/sh/tangle "make -C $HOME/git/sys/rde/rde/examples/abcdw tangle ")

(defun qz/tangle ()
  (interactive)
  (async-shell-command
   (concat
    "make -C $HOME/git/sys/rde/examples tangle"
    " && echo 'tangle--ehg--di' | espeak --stdin")))

(defun qz/suspend ()
  (interactive)
  (async-shell-command "loginctl suspend"))


(defun qz/redshift-fulldark ()
  (interactive)
  (async-shell-command "guix shell redshift-wayland -- redshift -O 1000K -r -b .4 "
                       "*process:redshift*"))

(defun qz/redshift-full ()
  (interactive)
  (async-shell-command "guix shell redshift-wayland -- redshift -O 1000K -r -b .7 "
                       "*process:redshift*"))

(defun qz/redshift-fullbright ()
  (interactive)
  (async-shell-command "guix shell redshift-wayland -- redshift -O 1000K -r -b 1 "
                       "*process:redshift*"))

(defun qz/redshift-mellow ()
  (interactive)
  (async-shell-command "guix shell redshift-wayland -- redshift -O 2000K -r -b .7 "
                       "*process:redshift*"))
(defun qz/redshift-mellowbright ()
  (interactive)
  (async-shell-command "guix shell redshift-wayland -- redshift -O 2000K -r -b 1 "
                       "*process:redshift*"))

(defun qz/dmesg ()
  (interactive)
  (async-shell-command
   "sudo dmesg -w"
   "*process:dmesg*"))

(defun qz/reload-config-home ()
  (interactive)
  (save-some-buffers)
  (async-shell-command
   (concat
    "make -C $HOME/git/qz/dotfiles home"
    "&& echo 'home--bal-ehg--di' | espeak --stdin ")
   "*process:dotfiles-reload*"))

(defun qz/build-config-home ()
  (interactive)
  (save-some-buffers)
  (async-shell-command
   (concat
    "make -C $HOME/git/qz/dotfiles hbuild"
    "&& echo 'home--bal-ehg--di' | espeak --stdin ")
   "*process:dotfiles-reload*"))

(defun qz/reload-config-system ()
  (interactive)
  (async-shell-command
   (concat
    "make -C $HOME/git/qz/dotfiles tangle && sudo -E make -C $HOME/git/qz/dotfiles system"
    "&& echo 'system--bal-ehg--di' | espeak --stdin")
   "*process:dotfiles-reload*"))

(defun qz/reload-config-all ()
  (interactive)
  (async-shell-command
   (concat
    "   make -C $HOME/git/qz/dotfiles -B guix"
    "&& make -C $HOME/git/qz/dotfiles home"
    "&& sudo -E make -C $HOME/git/qz/dotfiles system"
    "&& echo 'do the do, like ooo; pull & home & system bal-ehg--di'"
    "   | espeak --stdin")
   "*process:dotfiles-reload*"))

(defun qz/reload-config-emacs ()
  (interactive)
  (load-file "~/.config/emacs/init.el"))

(defun qz/guix-pull ()
  (interactive)
  (async-shell-command
   "make -C $HOME/git/qz/dotfiles -B guix"
   "*process:dotfiles-reload*"))
#+end_src

#+RESULTS:
: qz/guix-pull

***** describe-lab
:PROPERTIES:
:ID:       4f4a342c-4eab-47dd-87d9-cc6f9b91bdd7
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/guix-describe-lag ()
  "

"


  (interactive))

(defun qz/guix-upgrade ()
  (interactive)
  (async-shell-command
   (s-join " "
           '("make -C $HOME/git/sys/rde/examples -B guix"
             "&& make rde/channels/update-locked"
             "&& make rde/channels/pull-locked"
             "&& guix package -u"
             "&& guix upgrade"
             "&& make"))))
#+end_src

#+RESULTS:
: qz/guix-upgrade

**** swaywm: choose output resolution
:PROPERTIES:
:ID:       8fbfdfd8-edfb-4f7d-a6ed-a1927aa1885a
:CREATED:  [2022-04-22 Fri 11:56]
:UPDATED:  [2023-04-04 Tue 18:37]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(defun qz/sway-choose-output-res (&optional display res)
  (interactive)
  (let* ((cur (s-trim (shell-command-to-string
                       "swaymsg -t get_outputs | jq -r 'map( . | select(.focused == true) | .name) | first'")))
         (cmd (format "swaymsg 'output %s enable res %s'"
                      (or display
                          (completing-read "display: "
                                           '("DP-1" "DP-2"
                                             "eDP-1"
                                             "HDMI-1" "HDMI-2")
                                           nil t cur))
                      (or res
                          (completing-read "resolution: "
                                           '("1920x1080"
                                             "3840x1080"
                                             "5120x1440")
                                           nil t)))))
    (when (y-or-n-p (format "exec ~%s~?" cmd))
      (shell-command cmd))))
#+end_src

#+RESULTS:
: qz/sway-choose-output-res

**** bluetooth
:PROPERTIES:
:ID:       49d011dd-3d26-4b50-abf5-292cdf118d46
:CREATED:  [2022-04-22 Fri 15:31]
:UPDATED:  [2022-04-22 Fri 15:31]
:ROAM_EXCLUDE: t
:END:

***** outputs
:PROPERTIES:
:ID:       24700345-74aa-4f26-8fe6-64321c8ea328
:CREATED:  [2022-04-22 Fri 15:31]
:UPDATED:  [2022-04-22 Fri 15:31]
:ROAM_EXCLUDE: t
:END:
#+begin_src shell
pactl list sources | grep -E 'Name|Desc' -n
#+end_src

#+RESULTS:
|   3: | Name: alsa_output.pci-0000_01_00.1.hdmi-stereo.monitor                                             |
|   4: | Description: Monitor of HDA NVidia Digital Stereo (HDMI)                                           |
|  37: | Name: alsa_input.usb-Generic_USB_Audio_201405280001-00.analog-stereo                               |
|  38: | Description: USB Audio Analog Stereo                                                               |
|  91: | Name: alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp_5__sink.monitor |
|  92: | Description: Monitor of Comet Lake PCH cAVS HDMI3 Output                                           |
| 126: | Name: alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp_4__sink.monitor |
| 127: | Description: Monitor of Comet Lake PCH cAVS HDMI2 Output                                           |
| 161: | Name: alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp_3__sink.monitor |
| 162: | Description: Monitor of Comet Lake PCH cAVS HDMI1 Output                                           |
| 196: | Name: alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp__sink.monitor   |
| 197: | Description: Monitor of Comet Lake PCH cAVS Speaker + Headphones                                   |
| 231: | Name: alsa_input.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp__source          |
| 232: | Description: Comet Lake PCH cAVS Headphones Stereo Microphone                                      |
| 284: | Name: alsa_input.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp_6__source        |
| 285: | Description: Comet Lake PCH cAVS Digital Microphone                                                |
| 337: | Name: alsa_output.usb-TEAC_Corporation_TASCAM_DR_Series-00.analog-stereo.monitor                   |
| 338: | Description: Monitor of TASCAM DR Series Analog Stereo                                             |
| 374: | Name: alsa_input.usb-TEAC_Corporation_TASCAM_DR_Series-00.analog-stereo                            |
| 375: | Description: TASCAM DR Series Analog Stereo                                                        |
| 428: | Name: bluez_sink.44_F0_9E_51_52_7B.a2dp_sink.monitor                                               |
| 429: | Description: Monitor of Samuel’s AirPods Pro                                                       |

****** tascam:  input:  alsa_input.usb-TEAC_Corporation_TASCAM_DR_Series-00.analog-stereo
:PROPERTIES:
:ID:       2bfd38e2-cf1c-4074-8349-b4d9a3736b9f
:CREATED:  [2022-04-22 Fri 15:31]
:UPDATED:  [2022-04-22 Fri 15:31]
:ROAM_EXCLUDE: t
:END:
****** tascam:  output: alsa_output.usb-TEAC_Corporation_TASCAM_DR_Series-00.analog-stereo.monitor
:PROPERTIES:
:ID:       4a4a7516-1e18-4d0e-9646-5cc87a361341
:CREATED:  [2022-04-22 Fri 15:31]
:UPDATED:  [2022-04-22 Fri 15:31]
:ROAM_EXCLUDE: t
:END:
****** airpods: output: bluez_sink.44_F0_9E_51_52_7B.a2dp_sink.monitor
:PROPERTIES:
:ID:       0710390c-4cc2-49e8-8150-490ca155eda9
:CREATED:  [2022-04-22 Fri 15:31]
:UPDATED:  [2022-04-22 Fri 15:31]
:ROAM_EXCLUDE: t
:END:
***** connect to headphones
:PROPERTIES:
:ID:       13b782de-a874-43ff-8f8f-e75960674e48
:CREATED:  [2022-04-22 Fri 15:31]
:UPDATED:  [2023-05-03 Wed 16:17]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp

(defun qz/bt-connect (mac)
  (interactive "saddress: ")
  (async-shell-command
   (format "bluetoothctl connect %s" mac)
   "*bluetoothctl*"))


;;  [AnnePro2 P4]# block 44:F0:9E:51:52:7B
;; [CHG] Device 44:F0:9E:51:52:7B Blocked: yes
;; Changing 44:F0:9E:51:52:7B block succeeded
;; [CHG] Device 44:F0:9E:51:52:7B Connected: no
;; [DEL] Transport /org/bluez/hci0/dev_44_F0_9E_51_52_7B/sep1/fd5
;; [DEL] Endpoint /org/bluez/hci0/dev_44_F0_9E_51_52_7B/sep1
;; [DEL] Endpoint /org/bluez/hci0/dev_44_F0_9E_51_52_7B/sep2
;; [DEL] Endpoint /org/bluez/hci0/dev_44_F0_9E_51_52_7B/sep3
;; [AnnePro2 P4]# disconnect 44:F0:9E:51:52:7B


(defun qz/bt-do (commands mac)
  (interactive "saddress: ")
  (mapcar (lambda (c) (async-shell-command
                       (format "bluetoothctl %s %s" c mac)
                       "*bluetoothctl*"))

          (qz/ensure-list command)))

(defun qz/bt-ignore (mac)
  (interactive "saddress: ")
  (qz/bt-do '(block disconnect) mac))

(defmacro qz/bt-ui (command-devices)
  "A macro as a UI to manage bluetooth actions.

Creates mapped commands against each named device."
  (let ((f-name (lambda (e)
                  (intern (format "qz/bt-%s--%s"
                                  command device))))

    (mapcar (lambda ()

              (defun ,TODO ()
                (qz/bt-, ,actions mac))

       (defun ,enable ()
         (interactive)
         (advice-add ',target-fn ,state ',advice-fn))

       (defun ,(funcall s-advice 'disable) ()
         (interactive)
         (advice-remove ',target-fn ',advice-fn))

       (,enable)
       (list ',enable ',disable))))))

(defvar qz/bluetooth-devices
  '((airpods . "44:F0:9E:51:52:7B")
    (boomzo . nil)
    (aiaia . nil)
    (ap2 . nil)))


(defun qz/bt-airpods ()
  (interactive)
  (qz/bt-connect "44:F0:9E:51:52:7B"))

(defun qz/bt-aiaiai ()
  (interactive)
  (qz/bt-connect "44:F0:9E:51:52:7B"))

(defun qz/bt-boomzo ()
  (interactive)
  (qz/bt-connect "44:F0:9E:51:52:7B"))
#+end_src

#+RESULTS:
: qz/bt-boomzo

*** visual
:PROPERTIES:
:ID:       cac4fbde-325a-4f6a-a2f0-237f1e2752cb
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
**** [[id:8b0b7251-2404-404b-9b64-53e4d3ce2fe6][olivetti]]                                                                :visual:
:PROPERTIES:
:ID:       a10b32b7-6a50-47e8-9fed-0bd985f8b0f2
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-28 Wed 14:32]
:END:
***** apply [[id:8b0b7251-2404-404b-9b64-53e4d3ce2fe6][olivetti]] to [[id:0b89e24d-72c0-46ae-8f61-94cee95d7732][minibuffer]]
:PROPERTIES:
:ID:       85fc83bc-5603-493f-973a-e3aa994654cd
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-07-16 Sun 16:19]
:END:
#+begin_src emacs-lisp

;; (setq minibuffer-mode-hook nil)
;; (add-hook 'minibuffer-mode-hook 'olivetti-mode)

(add-hook 'minibuffer-mode-hook
          (lambda ()
            (setq-local olivetti-body-width 200)
            (olivetti-mode)))


(defun qz/big-mode ()
  (interactive)
  (call-interactively 'global-text-scale-adjust)
  (setq olivetti-body-width 150)

  )

#+end_src

#+RESULTS:
: qz/big-mode

**** [[id:c6490b3a-4dc3-4f9a-bb21-81bb6abc6beb][emacs-perfect-margin]]
:PROPERTIES:
:ID:       7b89ab8f-816a-4930-bedd-0653b028a0c4
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-29 Thu 11:21]
:END:
#+begin_src emacs-lisp
;; (require 'perfect-margin)

;; (perfect-margin-mode 1)
;; (setq perfect-margin-ignore-regexps nil
;;       perfect-margin-ignore-filters nil)
#+end_src
**** cursor
:PROPERTIES:
:ID:       f7063b4c-226d-49cc-8bd8-a43249dd6c65
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-06-19 Mon 10:57]
:END:

#+begin_src emacs-lisp
(custom-set-variables
 '(cursor-type 'bar))
#+end_src

#+RESULTS:

**** outline
:PROPERTIES:
:ID:       b5fec793-6a50-4f9d-b88f-715df300dc2c
:CREATED:  [2022-03-11 Fri 15:25]
:UPDATED:  [2022-03-11 Fri 15:25]
:ROAM_EXCLUDE: t
:END:
***** outline-default-state                                                     :var:
:PROPERTIES:
:ID:       2150f716-f377-4d9c-b1ab-f278a0400cfa
:CREATED:  [2022-03-11 Fri 15:25]
:UPDATED:  [2022-03-11 Fri 15:25]
:ROAM_EXCLUDE: t
:END:

note, >= emacs 29.1

#+begin_src emacs-lisp
(setq outline-default-state 'outline-show-only-headings)
#+end_src
**** hi-lock
:PROPERTIES:
:ID:       0d55f4eb-3560-4e3d-a167-e88c0900a4f1
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

I believe that when 'hi-lock-auto-select-face is non-nil, this should
cycle colors automatically.

#+begin_src emacs-lisp
(defun hi-lock-face-symbol-at-point ()
  "Highlight each instance of the symbol at point.
Uses the next face from `hi-lock-face-defaults' without prompting,
unless you use a prefix argument.
Uses `find-tag-default-as-symbol-regexp' to retrieve the symbol at point.

If REGEXP contains upper case characters (excluding those preceded by `\\')
and `search-upper-case' is non-nil, the matching is case-sensitive.

This uses Font lock mode if it is enabled; otherwise it uses overlays,
in which case the highlighting will not update as you type.  The Font
Lock mode is considered \"enabled\" in a buffer if its `major-mode'
causes `font-lock-specified-p' to return non-nil, which means
the major mode specifies support for Font Lock."
  (interactive)
  (let* ((regexp (hi-lock-regexp-okay
                  (find-tag-default-as-symbol-regexp)))
         (hi-lock-auto-select-face t)
         (face (hi-lock-read-face-name)))
    (or (facep face)
        (setq face (or (and hi-lock-auto-select-face (hi-lock-read-face-name))
                       'hi-yellow)))
    (unless hi-lock-mode (hi-lock-mode 1))
    (hi-lock-set-pattern
     regexp face nil nil
     (if (and case-fold-search search-upper-case)
         (isearch-no-upper-case-p regexp t)
       case-fold-search))))
#+end_src

#+RESULTS:
: hi-lock-face-symbol-at-point
**** emacs-highlight-indent-guides
:PROPERTIES:
:ID:       aacfd214-458f-4334-aad6-7b1a6453a9f5
:CREATED:  [2022-05-23 Mon 11:01]
:UPDATED:  [2022-05-23 Mon 11:03]
:ROAM_EXCLUDE: t
:END:

***** noweb tangler
:PROPERTIES:
:ID:       623daebd-6f65-49da-b45b-801c5f18489c
:CREATED:  [2022-05-23 Mon 11:01]
:UPDATED:  [2022-09-28 Wed 17:51]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp

(with-eval-after-load 'highlight-indent-guides
  <<hl-indent>>
  )

#+end_src
***** appearance; character ( 🐶 🐩 ), colours
:PROPERTIES:
:ID:       7f7805c9-90a1-43b0-921a-3260e3153079
:CREATED:  [2022-05-23 Mon 11:01]
:UPDATED:  [2022-05-23 Mon 11:03]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref hl-indent

;; highlight-indent-guides-character
;; 🐶
;; 🐩
;; |
;; default (char-to-string 9474)
;; default │

(custom-set-variables '(highlight-indent-guides-method 'character)
                      `(highlight-indent-guides-character 9474)
                      '(highlight-indent-guides-auto-enabled nil)
                      '(highlight-indent-guides-responsive 'top))

;; I don't use this AT ALL so give some ridulous defaults
(set-face-background 'highlight-indent-guides-odd-face "green")
(set-face-background 'highlight-indent-guides-even-face "red")

;; this is the /only/ based highlight-indent guide variety
(set-face-foreground 'highlight-indent-guides-character-face "#333")
(let ((accent "#555"))
  (set-face-foreground 'highlight-indent-guides-stack-character-face accent)
  (set-face-foreground 'highlight-indent-guides-top-character-face accent))
#+end_src

these settings end up looking like this:

#+DOWNLOADED: screenshot @ 2022-05-23 11:02:39
[[file:configs/2022-05-23_11-02-39_screenshot.png]]

***** interactive customisation
:PROPERTIES:
:ID:       b935c3bd-3965-4553-8177-5c679f5eaa2a
:CREATED:  [2022-05-23 Mon 11:01]
:UPDATED:  [2022-05-23 Mon 11:01]
:ROAM_EXCLUDE: t
:END:

****** toggle following responsive :: qz/highlight-indent-toggle-responsive
:PROPERTIES:
:ID:       168ed94a-2b77-41a8-8e8d-b22d330b9c84
:CREATED:  [2022-05-23 Mon 11:01]
:UPDATED:  [2022-05-23 Mon 11:01]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref hl-indent
(defun qz/highlight-indent-toggle-responsive (&optional arg)
  (interactive)
  (let ((val (if (or (and arg (> 0 arg))
                     (and (not arg) highlight-indent-guides-responsive))
                 nil qz/highlight-indent-guides-responsive)))
    (custom-set-variables
     `(highlight-indent-guides-responsive ',val))
    (highlight-indent-guides-mode)
    val))
#+end_src

****** lazy reading mode
:PROPERTIES:
:ID:       9a6b201c-5074-4bcc-adea-252dfe608127
:CREATED:  [2022-05-23 Mon 11:01]
:UPDATED:  [2022-09-29 Thu 14:07]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref hl-indent
(defvar qz/lazy-last -1)
(defun qz/lazy-eyes (&optional arg)
  (interactive)
  (setq qz/lazy-last (if (> 0 qz/lazy-last) 1 -1))
  (qz/highlight-indent-toggle-responsive qz/lazy-last)
  (global-hl-line-mode qz/lazy-last))
#+end_src

#+RESULTS:
: qz/lazy-eyes

**** [[id:bdba5c2b-bcfc-429c-bd90-57aaa211de65][font]] modulation
:PROPERTIES:
:ID:       2cff5044-7e96-4b0b-89a1-7e2ede2e88cc
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** save load-time font size                                             :var:func:
:PROPERTIES:
:ID:       9ecb735e-9bda-4cf1-9460-738a543733e3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

this is useful for when we switch to the single-frame font-size, but
we want to restore after, respecting the initial font-size

#+begin_src emacs-lisp
(defvar qz/font-initial-size (face-attribute 'default :height))
(defvar qz/resize-mini-windows-initial resize-mini-windows)
(defvar qz/max-mini-window-height-initial max-mini-window-height)

(defun qz/reset-visual-initial ()
  (interactive)
  (set-face-attribute 'default nil :height qz/font-initial-size)
  (setq resize-mini-windows    qz/resize-mini-windows-initial
        max-mini-window-height qz/max-mini-window-height-initial))
#+end_src

#+RESULTS:
: qz/reset-visual-initial

***** set font as big enough for comfy casual 80char emacs use                 :func:
:PROPERTIES:
:ID:       1758a068-1047-431b-915b-7cbf718d32ba
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(defun qz/font-big-80 ()
  (interactive)
  (set-face-attribute 'default nil :height 300)
  (setq resize-mini-windows t
        max-mini-window-height nil))
#+end_src

#+RESULTS:
: qz/font-big-80
**** unsplash
:PROPERTIES:
:ID:       ff5be022-1750-4ca6-800f-af738c52bc3d
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-29 Thu 11:22]
:END:
#+begin_src emacs-lisp
(defvar qz/unsplash-tags nil)
(defun qz/unsplash ()
  "yet another lazy shell-command wrapper; wallpaper edition"
  (interactive)
  (let ((tag (read-from-minibuffer
              "unsplash tags: " (car qz/unsplash-tags))))
    (async-shell-command
     (format "TAGS='%s'
mv \"$XDG_CACHE_HOME/wallpaper.png\" \"$XDG_CACHE_HOME/$(date +%%Y-%%m-%%d--%%H-%%M-%%S)-wallpaper.png\"
curl -L \"https://source.unsplash.com/5120x1440?$TAGS\" -o \"$XDG_CACHE_HOME/wallpaper.png\"
swaymsg output \"*\" background ~/.cache/wallpaper.png fill" tag))
    (setq qz/unsplash-tags (seq-uniq (cons tag qz/unsplash-tags)))))
#+end_src

#+RESULTS:
: qz/unsplash

*** stuff I nicked from other people
:PROPERTIES:
:ID:       4242e55b-4625-4636-87a8-665ec3c87159
:CREATED:  [2023-04-14 Fri 17:22]
:UPDATED:  [2023-04-14 Fri 17:22]
:ROAM_EXCLUDE: t
:END:

**** the emacs wiki
:PROPERTIES:
:ID:       de8e054e-30ff-44ce-b66e-2d420e757b51
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-28 Wed 16:25]
:HEADER-ARGS: :noweb-ref null
:END:
***** col-highlight.el
:PROPERTIES:
:ID:       6284a4a9-70f8-487b-b4b2-140b94b70264
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-07-09 Sat 17:33]
:END:

#+begin_src emacs-lisp :tangle no :noweb-ref null
;;; col-highlight.el --- Highlight the current column.
;;
;; Filename: col-highlight.el
;; Description: Highlight the current column.
;; Author: Drew Adams
;; Maintainer: Drew Adams (concat "drew.adams" "@" "oracle" ".com")
;; Copyright (C) 2006-2018, Drew Adams, all rights reserved.
;; Created: Fri Sep 08 11:06:35 2006
;; Version: 0
;; Package-Requires: ((vline "0"))
;; Last-Updated: Mon Jan  1 10:17:48 2018 (-0800)
;;           By: dradams
;;     Update #: 446
;; URL: https://www.emacswiki.org/emacs/download/col-highlight.el
;; Doc URL: https://emacswiki.org/emacs/HighlightCurrentColumn
;; Keywords: faces, frames, emulation, highlight, cursor, accessibility
;; Compatibility: GNU Emacs: 22.x, 23.x, 24.x, 25.x, 26.x
;;
;; Features that might be required by this library:
;;
;;   `vline'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Commentary:
;;
;;  This library highlights the current column.  When you move the
;;  cursor, the highlighting follows (tracks the cursor), as long as
;;  the highlighting stays on.
;;
;;  Command `column-highlight-mode' toggles this highlighting on and
;;  off.
;;
;;  If you use `column-highlight-mode' twice in succession (I bind it
;;  to `C-+'), you can flash the highlighting to show you the current
;;  column temporarily.  An alternative way to flash-highlight is to
;;  use command `flash-column-highlight' (once).  It shows the
;;  highlighting for just a second or two (see option
;;  `col-highlight-period').
;;
;;  You can also have current-column highlighting come on
;;  automatically, when Emacs is idle.  Command
;;  `toggle-highlight-column-when-idle' toggles this mode.  Command
;;  `col-highlight-set-interval' changes the number of idle seconds to
;;  wait before highlighting.
;;
;;  You can use option `col-highlight-overlay-priority' to make the
;;  vline (i.e., column) highlighting appear on top of other overlay
;;  highlighting that might exist.
;;
;;  You can use option `col-highlight-show-only' to restrict
;;  current-column highlighting to a section of text of a particular
;;  kind: paragaph, sentence, page, defun, etc.
;;
;;
;;  To use this file, you must also have library `vline.el'.
;;  Put this in your Emacs init file (~/.emacs):
;;
;;    (require 'col-highlight) ; Load this file (and `vline')
;;
;;  If you want to turn on continual current-column highlighting by
;;  default, then add this to your init file:
;;
;;    (column-highlight-mode 1)
;;
;;  If you want to turn on automatic idle highlighting of the current
;;  column, then add this to your init file:
;;
;;    (toggle-highlight-column-when-idle 1)
;;
;;  If you want to use a different wait interval, before idle
;;  highlighting begins, then set it in your init file using
;;  `col-highlight-set-interval':
;;
;;    (col-highlight-set-interval 6) ; Wait 6 idle secs.
;;
;;  Note that `column-highlight-mode' is intentionally a global minor
;;  mode.  If you want a local minor mode, so that highlighting
;;  affects only a particular buffer, you can use `vline-mode' (in
;;  `vline.el').
;;
;;
;;  See also:
;;
;;  * Library `hl-line+.el', which offers the same functionality, but
;;    for the current line instead of the current column.
;;
;;  * Library `crosshairs.el', which combines the features of
;;    `col-highlight.el' and `hl-line+.el', providing a crosshair
;;    highlighting effect.  It requires `col-highlight.el' and
;;    `hl-line+.el'.
;;
;;  * Library `cursor-chg.el' or library `oneonone.el', to change the
;;    cursor type when Emacs is idle.
;;
;;  User options defined here:
;;
;;    `col-highlight-period', `column-highlight-mode',
;;    `col-highlight-overlay-priority', `col-highlight-show-only',
;;    `col-highlight-vline-face-flag'.
;;
;;  Faces defined here:
;;
;;    `col-highlight'.
;;
;;  Commands defined here:
;;
;;    `col-highlight-flash', `col-highlight-set-interval',
;;    `col-highlight-toggle-when-idle', `column-highlight-mode',
;;    `flash-column-highlight', `toggle-highlight-column-when-idle'.
;;
;;  Non-interactive functions defined here:
;;
;;    `col-highlight-highlight', `col-highlight-unhighlight'.
;;
;;  Internal variables defined here:
;;
;;    `col-highlight-face', `col-highlight-idle-interval',
;;    `col-highlight-idle-timer', `col-highlight-when-idle-p'.
;;
;;
;;  ***** NOTE: The following function defined in `vline.el' has
;;              been REDEFINED HERE:
;;
;;    `vline-show' - Respect options `col-highlight-overlay-priority'
;;                   and `col-highlight-show-only'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Change Log:
;;
;; 2017/05/10 dadams
;;     vline-show: Wrap arg to make-string with abs.  Not a fix, but bypasses error from not
;;                 handling SPC char with display property value of (space :align-to N).
;; 2013/08/08 dadams
;;     Added: col-highlight-show-only, redefinition of vline-show.
;;     Removed defadvice of vline-show (replaced by redefinition).
;; 2012/12/25 dadams
;;     Added Package-Requires.
;; 2012/05/18 dadams
;;     Added: col-highlight-overlay-priority, defadvice of vline-show.
;; 2011/01/03 dadams
;;     Added autoload cookies for defgroup, defcustom, defface, and commands.
;; 2008/09/03 dadams
;;     col-highlight-highlight: Bind vline-current-window-only to t.
;; 2008/08/08 dadams
;;     col-highlight-(un)highlight: Added optional arg.
;; 2008/01/21 dadams
;;     Use vline.el instead of column-marker.el.
;;     Added: group column-highlight, option col-highlight-vline-face-flag.
;;     col-highlight-toggle-when-idle: col-highlight-unhighlight when turn off.
;;     col-highlight-flash: Use col-highlight-highlight, not mode.
;;     col-highlight-(un)highlight: Respect col-highlight-vline-face-flag.
;;                                  Don't highlight minibuffer.
;;     Renamed: face col-highlight-face to col-highlight.
;;     Removed semi-support for Emacs 20.
;; 2006/09/08 dadams
;;     Created.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 3, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Code:

(require 'vline)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;###autoload
(defgroup column-highlight nil
  "Highlight the current column."
  :prefix "col-highlight-"
  :group 'editing :group 'cursor :group 'hl-line :group 'frames
  :link `(url-link :tag "Send Bug Report"
                   ,(concat "mailto:" "drew.adams" "@" "oracle" ".com?subject=\
col-highlight.el bug: \
&body=Describe bug here, starting with `emacs -q'.  \
Don't forget to mention your Emacs and library versions."))
  :link '(url-link :tag "Other Libraries by Drew"
                   "https://www.emacswiki.org/emacs/DrewsElispLibraries")
  :link '(url-link :tag "Download"
                   "https://www.emacswiki.org/emacs/download/col-highlight.el"))

;;;###autoload
(defcustom col-highlight-show-only nil
  "Non-nil means `column-highlight-mode' affects only a section of text.
This affects `vline-mode' also.

The non-nil value determines the type of text section: paragraph,
sentence, defun, page...

The actual non-nil value is a forward movement command for the given
section type, e.g., `forward-paragraph', `end-of-defun'."
  :type '(choice
          (const    :tag "All text"  nil)
          (const    :tag "Paragraph" forward-paragraph)
          (const    :tag "Sentence"  forward-sentence)
          (const    :tag "Page"      forward-page)
          (const    :tag "Defun"     end-of-defun)
          (function :tag "Forward-thing function" :value forward-paragraph))
  :group 'column-highlight)

;;;###autoload
(defcustom col-highlight-vline-face-flag t
  "*Non-nil means `column-highlight-mode' uses `col-highlight-face'.
nil means that it uses `vline-face'."
  :type 'boolean :group 'column-highlight)

;;;###autoload
(defcustom col-highlight-period 1
  "*Number of seconds to highlight the current column."
  :type 'integer :group 'column-highlight)

;;;###autoload
(defcustom col-highlight-overlay-priority 300
  "*Priority to use for overlays in `vline-overlay-table'.
A higher priority can make the vline highlighting appear on top of
other overlays that might exist."
  :type '(choice
          (const   :tag "No priority (default priority)"  nil)
          (integer :tag "Priority"  300))
  :group 'column-highlight)

;;;###autoload
(defface col-highlight '((t (:background "SlateGray3")))
  "*Face for current-column highlighting by `column-highlight-mode'.
Not used if `col-highlight-vline-face-flag' is nil."
  :group 'column-highlight :group 'faces)

(defvar col-highlight-face 'col-highlight
  "Face used for highlighting current column.
Do NOT change this.")

(defvar col-highlight-idle-interval 5
  "Number of seconds to wait before highlighting current column.
Do NOT change this yourself to change the wait period; instead, use
`\\[col-highlight-set-interval]'.")

(defvar col-highlight-when-idle-p nil
  "Non-nil means highlight the current column whenever Emacs is idle.
Do NOT change this yourself; instead, use
`\\[toggle-highlight-column-when-idle]'.")

(defvar col-highlight-idle-timer
  (progn                              ; Cancel to prevent duplication.
    (when (boundp 'col-highlight-idle-timer)
      (cancel-timer col-highlight-idle-timer))
    (run-with-idle-timer col-highlight-idle-interval t 'col-highlight-highlight))
  "Timer used to highlight current column whenever Emacs is idle.")

;; Turn it off, by default.
;; You must use `toggle-highlight-column-when-idle' to turn it on.
(cancel-timer col-highlight-idle-timer)



;;  REPLACE ORIGINAL `vline-show' defined in `vline.el'.
;;
;;  1. Respect options `col-highlight-overlay-priority' and `col-highlight-show-only'.
;;  2. Tolerate SPC char with `display' property value (space :align-to N).
;;
(defun vline-show (&optional point)
  (vline-clear)
  (save-window-excursion
    (save-excursion
      (if point
          (goto-char point)
        (setq point  (point)))
      (let* ((column           (vline-current-column))
             (lcolumn          (current-column))
             (i                0)
             (compose-p        (memq vline-style '(compose mixed)))
             (face-p           (memq vline-style '(face mixed)))
             (line-char        (if compose-p vline-line-char ?\   ))
             (line-str         (make-string 1 line-char))
             (visual-line-str  line-str)
             (in-fringe-p      (vline-into-fringe-p))
             (only-beg         (and col-highlight-show-only
                                    (condition-case nil
                                        (save-excursion
                                          (funcall col-highlight-show-only -1)
                                          (point))
                                      (error nil))))
             (only-end         (and col-highlight-show-only
                                    (condition-case nil
                                        (save-excursion
                                          (funcall col-highlight-show-only 1)
                                          (point))
                                      (error nil)))))
        (when face-p
          (setq line-str (propertize line-str 'face (vline-face nil)))
          (setq visual-line-str  (propertize visual-line-str 'face (vline-face t))))
        (goto-char (window-end nil t))
        (vline-forward 0)
        (while (and (not (bobp))
                    (not in-fringe-p)
                    (< i (window-height))
                    (< i (length vline-overlay-table)))
          (let ((cur-column   (vline-move-to-column column t))
                (cur-lcolumn  (current-column)))
            (unless (or (= (point) point) ; Non-cursor line only (eol workaround).
                        (and only-beg  only-end  (or (<= (point) only-beg)
                                                     (>= (point) only-end))))
              (when (> cur-column column)
                (let ((lcol  (current-column)))
                  (backward-char)
                  (setq cur-column  (- cur-column (- lcol (current-column))))))
              (let* ((ovr       (aref vline-overlay-table i))
                     (visual-p  (or (< lcolumn (current-column))
                                    (> lcolumn (+ (current-column)
                                                  (- column cur-column)))))
                     ;; Consider a newline, tab and wide char.
                     (str       (concat (make-string (abs (- column cur-column)) ?\  )
                                        (if visual-p visual-line-str line-str)))
                     (char      (char-after)))
                (unless ovr
                  (setq ovr  (make-overlay 0 0))
                  (overlay-put ovr 'rear-nonsticky t)
                  (aset vline-overlay-table i ovr))
                (overlay-put ovr 'face nil)
                (overlay-put ovr 'before-string nil)
                (overlay-put ovr 'after-string nil)
                (overlay-put ovr 'invisible nil)
                (overlay-put ovr 'window (and vline-current-window-only  (selected-window)))
                (cond ((memq char vline-multiwidth-space-list) ; Multiwidth space
                       (setq str  (concat str (make-string (- (save-excursion (forward-char)
                                                                              (current-column))
                                                              (current-column)
                                                              (string-width str))
                                                           ?\  )))
                       (move-overlay ovr (point) (+ 1 (point)))
                       (overlay-put ovr 'invisible t)
                       (overlay-put ovr 'after-string str))
                      ((eolp)
                       (move-overlay ovr (point) (point))
                       (overlay-put ovr 'after-string str)
                       (when (and (not truncate-lines) ; Do not expand more than window width.
                                  (>= (+ 1 column) (window-width))
                                  (>= column (vline-current-column))
                                  (not (vline-into-fringe-p)))
                         (delete-overlay ovr)))
                      (t
                       (cond (compose-p
                              (let (str)
                                (when char
                                  (setq str  (compose-chars char
                                                            (cond ((= (char-width char) 1)
                                                                   '(tc . tc))
                                                                  ((= cur-column column)
                                                                   '(tc . tr))
                                                                  (t
                                                                   '(tc . tl)))
                                                            line-char))
                                  (when face-p
                                    (setq str  (propertize str 'face (vline-face visual-p))))
                                  (move-overlay ovr (point) (+ 1 (point)))
                                  (overlay-put ovr 'invisible t)
                                  (overlay-put ovr 'after-string str))))
                             (face-p
                              (move-overlay ovr (point) (+ 1 (point)))
                              (overlay-put ovr 'face (vline-face visual-p))))))))
            (setq i  (+ 1 i))
            (vline-forward -1))))))
  (mapc (lambda (ov) (when (overlayp ov) ; Set overlay priority to `col-highlight-overlay-priority'.
                       (overlay-put ov 'priority col-highlight-overlay-priority)))
        vline-overlay-table))

;;;###autoload
(define-minor-mode column-highlight-mode
  "Toggle highlighting the current column.
With ARG, turn column highlighting on if and only if ARG is positive.

Column-Highlight mode uses the functions
`col-highlight-unhighlight' and `col-highlight-highlight'
on `pre-command-hook' and `post-command-hook'."
  :init-value nil :global t :group 'column-highlight
  :link `(url-link :tag "Send Bug Report"
                   ,(concat "mailto:" "drew.adams" "@" "oracle" ".com?subject=\
col-highlight.el bug: \
&body=Describe bug here, starting with `emacs -q'.  \
Don't forget to mention your Emacs and library versions."))
  :link '(url-link :tag "Other Libraries by Drew"
                   "https://www.emacswiki.org/emacs/DrewsElispLibraries")
  :link '(url-link :tag
                   "Download" "https://www.emacswiki.org/emacs/download/col-highlight.el")
  :link '(url-link :tag "Description"
                   "https://www.emacswiki.org/emacs/ChangingCursorDynamically")
  :link '(emacs-commentary-link :tag "Commentary" "col-highlight")
  (cond (column-highlight-mode
         (add-hook 'pre-command-hook 'col-highlight-unhighlight)
         (add-hook 'post-command-hook 'col-highlight-highlight))
        (t
         (col-highlight-unhighlight)
         (remove-hook 'pre-command-hook 'col-highlight-unhighlight)
         (remove-hook 'post-command-hook 'col-highlight-highlight))))

;;;###autoload
(defalias 'toggle-highlight-column-when-idle 'col-highlight-toggle-when-idle)
;;;###autoload
(defun col-highlight-toggle-when-idle (&optional arg)
  "Turn on or off highlighting the current column when Emacs is idle.
With prefix argument, turn on if ARG > 0; else turn off."
  (interactive "P")
  (setq col-highlight-when-idle-p  (if arg
                                       (> (prefix-numeric-value arg) 0)
                                     (not col-highlight-when-idle-p)))
  (cond (col-highlight-when-idle-p
         (timer-activate-when-idle col-highlight-idle-timer)
         (add-hook 'pre-command-hook 'col-highlight-unhighlight)
         (message "Turned ON highlighting current column when Emacs is idle."))
        (t
         (cancel-timer col-highlight-idle-timer)
         (col-highlight-unhighlight)
         (remove-hook 'pre-command-hook 'col-highlight-unhighlight)
         (message "Turned OFF highlighting current column when Emacs is idle."))))

;;;###autoload
(defun col-highlight-set-interval (n)
  "Set the delay before highlighting current column when Emacs is idle.
Whenever Emacs has been idle for N seconds, the current column is
highlighted using the face that is the value of variable
`col-highlight-face'.

To turn on or off automatically highlighting the current column
when Emacs is idle, use `\\[toggle-highlight-column-when-idle]."
  (interactive
   "nSeconds to idle, before highlighting current column: ")
  (timer-set-idle-time col-highlight-idle-timer
                       (setq col-highlight-idle-interval  n)
                       t))

;;;###autoload
(defalias 'flash-column-highlight 'col-highlight-flash)
;;;###autoload
(defun col-highlight-flash (&optional arg)
  "Highlight the current column for `col-highlight-period' seconds.
With a prefix ARG, highlight for that many seconds."
  (interactive)
  (col-highlight-highlight)
  (let ((column-period  col-highlight-period))
    (when current-prefix-arg
      (setq column-period  (prefix-numeric-value current-prefix-arg)))
    (run-at-time column-period nil 'col-highlight-unhighlight)))

(defun col-highlight-highlight (&optional minibuffer-also-p)
  "Highlight current column.
This has no effect in the minibuffer, unless optional arg
MINIBUFFER-ALSO-P is non-nil."
  (unless (and (minibufferp)  (not minibuffer-also-p))
    (let ((vline-current-window-only  t))
      (if col-highlight-vline-face-flag
          (let ((vline-style  'face)
                (vline-face   col-highlight-face))
            (vline-show))
        (vline-show)))))

(defun col-highlight-unhighlight (&optional minibuffer-also-p)
  "Turn off highlighting of current column.
This has no effect in the minibuffer, unless optional arg
MINIBUFFER-ALSO-P is non-nil."
  (unless (and (minibufferp)  (not minibuffer-also-p))
    (if col-highlight-vline-face-flag
        (let ((vline-style  'face)
              (vline-face   col-highlight-face))
          (vline-clear))
      (vline-clear))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(provide 'col-highlight)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; col-highlight.el ends here
#+end_src

#+RESULTS:
: col-highlight

***** vline.el
:PROPERTIES:
:ID:       bb42ed82-562f-4d92-9a60-3a524b82283d
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-22 Fri 12:10]
:END:
#+begin_src emacs-lisp :tangle no :noweb-ref null
;;; vline.el --- show vertical line (column highlighting) mode.

;; Copyright (C) 2002, 2008-2012 by Taiki SUGAWARA <buzz.taiki@gmail.com>

;; Author: Taiki SUGAWARA <buzz.taiki@gmail.com>
;; Maintainer: Taiki SUGAWARA <buzz.taiki@gmail.com>
;; Keywords: faces, editing, emulating
;; Version: 1.11
;; Time-stamp: <2012-01-08 12:40:18 UTC taiki>
;; URL: http://www.emacswiki.org/cgi-bin/wiki/vline.el
;; URL: http://bitbucket.org/buzztaiki/elisp/src/tip/vline.el

;; This file is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This file is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.

;;; Commentary:

;; put followings your .emacs
;;   (require 'vline)
;;
;; if you display a vertical line, type M-x vline-mode.  `vline-mode' doesn't
;; effect other buffers, because it is a buffer local minor mode.  if you hide
;; a vertical line, type M-x vline-mode again.
;;
;; if you display a vertical line in all buffers, type M-x vline-global-mode.
;;
;; `vline-style' provides a display style of vertical line.  see
;; `vline-style' docstring.
;;
;; if you don't want to visual line highlighting (ex.  for performance
;; issue), please to set `vline-visual' to nil.
;;
;; if you don't want to use timer (ex.  you want to highlight column
;; during moving cursors), please to set `vline-use-timer' to nil.

;;; Change Log:

;; 2012-01-08 taiki
;; fix for the Lint warnings.

;; 2010-02-02 taiki
;; improve performance.

;; 2009-08-26 taiki
;; support org-mode, outline-mode

;; 2009-08-18 taiki
;; add autoload cookies.

;; 2009-08-18 taiki
;; fix last line highlighting probrem.

;; 2009-08-18 taiki
;; support visual line highlighting.
;; - Added face vline-visual.
;; - Added defcustom vline-visual-face.
;; - Added defcustom vline-visual.
;;
;; 2009-08-17 taiki
;; fix continuas line problem.
;; - Don't display vline when cursor into fringe
;; - Don't expand eol more than window width.
;;
;; 2008-10-22 taiki
;; fix coding-system problem.
;; - Added vline-multiwidth-space-list
;; - Use ucs code-point for japanese fullwidth space.
;;
;; 2008-01-22 taiki
;; applied patch from Lennart Borgman
;; - Added :group 'vline
;; - Added defcustom vline-current-window-only
;; - Added header items to simplify for users

;;; TODO:
;; - track window-scroll-functions, window-size-change-functions.
;; - consider other minor modes (using {after,before}-string overlay).
;; - don't use {post,after}-command-hook for performance??

;;; Code:

(defvar vline-overlay-table-size 200)
(defvar vline-overlay-table (make-vector vline-overlay-table-size nil))
(defvar vline-line-char (string-to-char "|"))
(defvar vline-multiwidth-space-list
  (list
   ?\t
   (decode-char 'ucs #x3000)            ; japanese fullwidth space
   ))
(defvar vline-timer nil)

(defcustom vline-style 'face
  "This variable holds vertical line display style.
Available values are followings:
`face'      : use face.
`compose'   : use composit char.
`mixed'     : use face and composit char."
  :type '(radio
          (const face)
          (const compose)
          (const mixed))
  :group 'vline)


(defface vline
  '((t (:background "light steel blue")))
  "A default face for vertical line highlighting."
  :group 'vline)

(defface vline-visual
  '((t (:background "gray90")))
  "A default face for vertical line highlighting in visual lines."
  :group 'vline)

(defcustom vline-face 'vline
  "A face for vertical line highlighting."
  :type 'face
  :group 'vline)

(defcustom vline-visual-face 'vline-visual
  "A face for vertical line highlighting in visual lines."
  :type 'face
  :group 'vline)

(defcustom vline-current-window-only nil
  "If non-nil then highlight column in current window only.
If the buffer is shown in several windows then highlight column only
in the currently selected window."
  :type 'boolean
  :group 'vline)

(defcustom vline-visual t
  "If non-nil then highlight column in visual lines.
If you specified `force' then use force visual line highlighting even
if `truncate-lines' is non-nil."
  :type '(radio
          (const nil)
          (const t)
          (const force))
  :group 'vline)

(defcustom vline-use-timer t
  "If non-nil, use idle timer instead of (post|after)-command-hook."
  :type 'boolean
  :group 'vline)

(defcustom vline-idle-time 0.02
  "Idle time for highlighting column."
  :type 'number
  :group 'vline)

;;;###autoload
(define-minor-mode vline-mode
  "Display vertical line mode."
  :global nil
  :lighter " VL"
  :group 'vline
  (if vline-mode
      (progn
        (add-hook 'pre-command-hook 'vline-pre-command-hook nil t)
        (if vline-use-timer
            (vline-set-timer)
          (add-hook 'post-command-hook 'vline-post-command-hook nil t)))
    (vline-cancel-timer)
    (vline-clear)
    (remove-hook 'pre-command-hook 'vline-pre-command-hook t)
    (remove-hook 'post-command-hook 'vline-post-command-hook t)))

;;;###autoload
(define-global-minor-mode vline-global-mode
  vline-mode
  (lambda ()
    (unless (minibufferp)
      (vline-mode 1)))
  :group 'vline)

(defun vline-pre-command-hook ()
  (when (and vline-mode (not (minibufferp)))
    (vline-clear)))

(defun vline-post-command-hook ()
  (when (and vline-mode (not (minibufferp)))
    (vline-show)))

(defun vline-set-timer ()
  (setq vline-timer
        (run-with-idle-timer
         vline-idle-time t 'vline-timer-callback)))

(defun vline-cancel-timer ()
  (when (timerp vline-timer)
    (cancel-timer vline-timer)))

(defun vline-timer-callback ()
  (when (and vline-mode (not (minibufferp)))
    (vline-show)))

(defun vline-clear ()
  (mapcar (lambda (ovr)
            (and ovr (delete-overlay ovr)))
          vline-overlay-table))

(defsubst vline-into-fringe-p ()
  (eq (nth 1 (posn-at-point)) 'right-fringe))

(defsubst vline-visual-p ()
  (or (eq vline-visual 'force)
      (and (not truncate-lines)
           vline-visual)))

(defsubst vline-current-column ()
  (if (or (not (vline-visual-p))
          ;; margin for full-width char
          (< (+ 1 (current-column)) (window-width)))
      (current-column)
    ;; hmm.. posn-at-point is not consider tab width.
    (- (current-column)
       (save-excursion
         (vertical-motion 0)
         (current-column)))))

(defsubst vline-move-to-column (col &optional bol-p)
  (if (or (not (vline-visual-p))
          ;; margin for full-width char
          (< (+ 1 (current-column)) (window-width)))
      (move-to-column col)
    (unless bol-p
      (vertical-motion 0))
    (let ((bol-col (current-column)))
      (- (move-to-column (+ bol-col col))
         bol-col))))

(defsubst vline-invisible-p (pos)
  (let ((inv (get-char-property pos 'invisible)))
    (and inv
         (or (eq buffer-invisibility-spec t)
             (memq inv buffer-invisibility-spec)
             (assq inv buffer-invisibility-spec)))))

(defsubst vline-forward (n)
  (unless (memq n '(-1 0 1))
    (error "n(%s) must be 0 or 1" n))
  (if (not (vline-visual-p))
      (progn
        (forward-line n)
        ;; take care of org-mode, outline-mode
        (when (and (not (bobp))
                   (vline-invisible-p (- 1 (point))))
          (goto-char (- 1 (point))))
        (when (vline-invisible-p (point))
          (if (< n 0)
              (while (and (not (bobp)) (vline-invisible-p (point)))
                (goto-char (previous-char-property-change (point))))
            (while (and (not (bobp)) (vline-invisible-p (point)))
              (goto-char (next-char-property-change (point))))
            (forward-line 1))))
    (vertical-motion n)))

(defun vline-face (visual-p)
  (if visual-p
      vline-visual-face
    vline-face))

(defun vline-show (&optional point)
  (vline-clear)
  (save-window-excursion
    (save-excursion
      (if point
          (goto-char point)
        (setq point (point)))
      (let* ((column (vline-current-column))
             (lcolumn (current-column))
             (i 0)
             (compose-p (memq vline-style '(compose mixed)))
             (face-p (memq vline-style '(face mixed)))
             (line-char (if compose-p vline-line-char ? ))
             (line-str (make-string 1 line-char))
             (visual-line-str line-str)
             (in-fringe-p (vline-into-fringe-p)))
        (when face-p
          (setq line-str (propertize line-str 'face (vline-face nil)))
          (setq visual-line-str (propertize visual-line-str 'face (vline-face t))))
        (goto-char (window-end nil t))
        (vline-forward 0)
        (while (and (not in-fringe-p)
                    (< i (window-height))
                    (< i (length vline-overlay-table))
                    (not (bobp)))
          (let ((cur-column (vline-move-to-column column t))
                (cur-lcolumn (current-column)))
            ;; non-cursor line only (workaround of eol probrem.
            (unless (= (point) point)
              ;; if column over the cursor's column (when tab or wide char is appered.
              (when (> cur-column column)
                (let ((lcol (current-column)))
                  (backward-char)
                  (setq cur-column (- cur-column (- lcol (current-column))))))
              (let* ((ovr (aref vline-overlay-table i))
                     (visual-p (or (< lcolumn (current-column))
                                   (> lcolumn (+ (current-column)
                                                 (- column cur-column)))))
                     ;; consider a newline, tab and wide char.
                     (str (concat (make-string (- column cur-column) ? )
                                  (if visual-p visual-line-str line-str)))
                     (char (char-after)))
                ;; create overlay if not found.
                (unless ovr
                  (setq ovr (make-overlay 0 0))
                  (overlay-put ovr 'rear-nonsticky t)
                  (aset vline-overlay-table i ovr))

                ;; initialize overlay.
                (overlay-put ovr 'face nil)
                (overlay-put ovr 'before-string nil)
                (overlay-put ovr 'after-string nil)
                (overlay-put ovr 'invisible nil)
                (overlay-put ovr 'window
                             (if vline-current-window-only
                                 (selected-window)
                               nil))

                (cond
                 ;; multiwidth space
                 ((memq char vline-multiwidth-space-list)
                  (setq str
                        (concat str
                                (make-string (- (save-excursion (forward-char)
                                                                (current-column))
                                                (current-column)
                                                (string-width str))
                                             ? )))
                  (move-overlay ovr (point) (+ 1 (point)))
                  (overlay-put ovr 'invisible t)
                  (overlay-put ovr 'after-string str))
                 ;; eol
                 ((eolp)
                  (move-overlay ovr (point) (point))
                  (overlay-put ovr 'after-string str)
                  ;; don't expand eol more than window width
                  (when (and (not truncate-lines)
                             (>= (+ 1 column) (window-width))
                             (>= column (vline-current-column))
                             (not (vline-into-fringe-p)))
                    (delete-overlay ovr)))
                 (t
                  (cond
                   (compose-p
                    (let (str)
                      (when char
                        (setq str (compose-chars
                                   char
                                   (cond ((= (char-width char) 1)
                                          '(tc . tc))
                                         ((= cur-column column)
                                          '(tc . tr))
                                         (t
                                          '(tc . tl)))
                                   line-char))
                        (when face-p
                          (setq str (propertize str 'face (vline-face visual-p))))
                        (move-overlay ovr (point) (+ 1 (point)))
                        (overlay-put ovr 'invisible t)
                        (overlay-put ovr 'after-string str))))
                   (face-p
                    (move-overlay ovr (point) (+ 1 (point)))
                    (overlay-put ovr 'face (vline-face visual-p))))))))
            (setq i (+ 1 i))
            (vline-forward -1)))))))

(provide 'vline)

;;; Local Variables:
;;; time-stamp-format: "%:y-%02m-%02d %02H:%02M:%02S %Z %u"
;;; time-stamp-line-limit: 16
;;; End:

;;; vline.el ends here
#+end_src

#+RESULTS:
: vline

****** rde: scheme reader incompatibility: =(defvar vline-line-char ?|)=
:PROPERTIES:
:ID:       3193f8ae-2c44-4b87-ab8c-9df0aabf2c7a
:CREATED:  [2022-09-30 Fri 13:11]
:UPDATED:  [2022-09-30 Fri 13:11]
:ROAM_EXCLUDE: t
:END:

***** ol-man.el
:PROPERTIES:
:ID:       03e99cd2-5275-4b44-9b9a-137a84156826
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
- source :: https://orgmode.org/manual/Adding-Hyperlink-Types.html

an [[id:6baf4bff-d5fe-4ce0-a130-0464e49de67d][org-mode]] extension for a new link backend targeting manpages

****** TODO [[id:cfcecb80-bcde-4c1d-a4fd-8a55eb5e5f20][deep link]] (content-based) encode line for context & regexp jump
:PROPERTIES:
:ID:       dc7a1ca8-9d36-4cfb-ada5-ef2040394b62
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
****** source
:PROPERTIES:
:ID:       8f2b6e70-b945-4021-bd88-429891641d8e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-11 Mon 18:50]
:END:
#+begin_src emacs-lisp :noweb-ref null
;;; ol-man.el - Support for links to man pages in Org mode
(require 'ol)

(org-link-set-parameters "man"
                         :follow 'org-man-open
                         :export 'org-man-export
                         :store  'org-man-store-link)

(defcustom org-man-command 'man
  "The Emacs command to be used to display a man page."
  :group 'org-link
  :type '(choice (const man) (const woman)))

(defun org-man-open (path _)
  "Visit the manpage on PATH.
PATH should be a topic that can be thrown at the man command."
  (funcall org-man-command path))

(defun org-man-store-link ()
  "Store a link to a man page."
  (when (memq major-mode '(Man-mode woman-mode))
    ;; This is a man page, we do make this link.
    (let* ((page (org-man-get-page-name))
           (link (concat "man:" page))
           (description (format "Man page for %s" page)))
      (org-link-store-props
       :type "man"
       :link link
       :description description))))

(defun org-man-get-page-name ()
  "Extract the page name from the buffer name."
  ;; This works for both `Man-mode' and `woman-mode'.
  (if (string-match " \\(\\S-+\\)\\*" (buffer-name))
      (match-string 1 (buffer-name))
    (error "Cannot create link to this man page")))

(defun org-man-export (link description format _)
  "Export a man page link from Org files."
  (let ((path (format "http://man.he.net/?topic=%s&section=all" link))
        (desc (or description link)))
    (pcase format
      (`html (format "<a target=\"_blank\" href=\"%s\">%s</a>" path desc))
      (`latex (format "\\href{%s}{%s}" path desc))
      (`texinfo (format "@uref{%s,%s}" path desc))
      (`ascii (format "%s (%s)" desc path))
      (t path))))

(provide 'ol-man)
;;; ol-man.el ends here
#+end_src

#+RESULTS:
: ol-man

**** etc
:PROPERTIES:
:ID:       e6ca7a78-91d5-4106-954a-f3e66ab5fe71
:CREATED:  [2023-04-14 Fri 17:23]
:UPDATED:  [2023-04-14 Fri 17:23]
:ROAM_EXCLUDE: t
:END:

***** emacs-copilot.el
:PROPERTIES:
:CREATED:  [2024-02-17 Sat 09:40]
:UPDATED:  [2024-02-17 Sat 09:40]
:ID:       2331c87e-3057-4320-804e-741b6f96bda4
:ROAM_EXCLUDE: t
:END:
- :: https://raw.githubusercontent.com/jart/emacs-copilot/main/copilot.el

#+begin_src emacs-lisp :tangle no :eval no :noweb-ref nil
;;; copilot.el --- Emacs Copilot

;; Copyright 2023 Justine Alexandra Roberts Tunney

;; Author: Justine Tunney
;; Email: jtunney@mozilla.com
;; License: Apache 2.0
;; Version: 0.1

;; Copyright 2023 Mozilla Foundation
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.

;;; Commentary:
;;
;; The `copilot-complete' function demonstrates that ~100 lines of LISP
;; is all it takes for Emacs to do that thing Github Copilot and VSCode
;; are famous for doing except superior w.r.t. both quality and freedom
;;
;; Emacs Copilot helps you do pair programming with a local-running LLM
;; that generates code completions within Emacs buffers. The LLM is run
;; as a sub-command that remembers your local editing history on a file
;; by file basis. Tokens stream into your buffer without delay as gen'd
;; and you can hit `C-g' to interrupt your LLM at any time. History and
;; memory can also be deleted from the LLM's context when deleting code
;; from your Emacs buffer that matches up verbatim. Copilot is language
;; agnostic and your programming language is determed by file extension
;;
;; The recommended LLM right now is WizardCoder 34b since it scores the
;; same as GPT-4 on HumanEval. You need a computer like a Mac Studio M2
;; Ultra in order to use it. If you have a modest system then you could
;; consider downloading the WizardCoder-Python-13b llamafile since it's
;; almost as good, and will even go acceptably fast on CPU-only systems
;; having at least AVX2 and 2200 MT/s RAM. If you're even more strapped
;; for compute and use things like Raspberry Pi, then give Phi-2 a spin
;;
;; To get started, try writing the first line of a function, e.g.
;;
;;     bool is_prime(int x) {
;;
;; Then place your caret at the end of the line, and press `C-c C-k` to
;; hand over control to your LLM, which should generate the rest of the
;; function implementation for you. Things are also tuned so the LLM is
;; likely to stop as soon as a function is made. Explanations and other
;; kind of ELI5 commentary is avoided too.
;;
;; Later on, if you were to write something like this:
;;
;;     int main() {
;;       for (int i = 0; i < 100;
;;
;; And ask your LLM to complete that, then your LLM will likely recall
;; that you two wrote an is_prime() function earlier, even though it's
;; only considering those two lines in the current instruction. You'll
;; most likely then see it decide to generate code to print the primes

;;; Code:

(defgroup copilot nil
  "Large language model code completion."
  :prefix "copilot-"
  :group 'editing)

(defcustom copilot-bin
  "wizardcoder-python-34b-v1.0.Q5_K_M.llamafile"
  "Path of llamafile executable with LLM weights."
  :type 'string
  :group 'copilot)

;;;###autoload
(defun copilot-complete ()
  (interactive)
  (let* ((spot (point))
         (inhibit-quit t)
         (curfile (buffer-file-name))
         (cash (concat curfile ".cache"))
         (hist (concat curfile ".prompt"))
         (lang (file-name-extension curfile))

         ;; extract current line, to left of caret
         ;; and the previous line, to give the llm
         (code (save-excursion
                 (dotimes (i 2)
                   (when (> (line-number-at-pos) 1)
                     (previous-line)))
                 (beginning-of-line)
                 (buffer-substring-no-properties (point) spot)))

         ;; create new prompt for this interaction
         (system "\
You are an Emacs code generator. \
Writing comments is forbidden. \
Writing test code is forbidden. \
Writing English explanations is forbidden. ")
         (prompt (format
                  "[INST]%sGenerate %s code to complete:[/INST]\n```%s\n%s"
                  (if (file-exists-p cash) "" system) lang lang code)))

    ;; iterate text deleted within editor then purge it from prompt
    (when kill-ring
      (save-current-buffer
        (find-file hist)
        (dotimes (i 10)
          (let ((substring (current-kill i t)))
            (when (and substring (string-match-p "\n.*\n" substring))
              (goto-char (point-min))
              (while (search-forward substring nil t)
                (delete-region (- (point) (length substring)) (point))))))
        (save-buffer 0)
        (kill-buffer (current-buffer))))

    ;; append prompt for current interaction to the big old prompt
    (write-region prompt nil hist 'append 'silent)

    ;; run llamafile streaming stdout into buffer catching ctrl-g
    (with-local-quit
      (call-process copilot-bin nil (list (current-buffer) nil) t
                    "--prompt-cache" cash
                    "--prompt-cache-all"
                    "--silent-prompt"
                    "--temp" "0"
                    "-c" "1024"
                    "-ngl" "35"
                    "-r" "```"
                    "-r" "\n}"
                    "-f" hist))

    ;; get rid of most markdown syntax
    (let ((end (point)))
      (save-excursion
        (goto-char spot)
        (while (search-forward "\\_" end t)
          (backward-char)
          (delete-backward-char 1 nil)
          (setq end (- end 1)))
        (goto-char spot)
        (while (search-forward "```" end t)
          (delete-backward-char 3 nil)
          (setq end (- end 3))))

      ;; append generated code to prompt
      (write-region spot end hist 'append 'silent))))

;; define `ctrl-c ctrl-k` keybinding for llm code completion
(defun copilot-c-hook ()
  (define-key c-mode-base-map (kbd "C-c C-k") 'copilot-complete))
(add-hook 'c-mode-common-hook 'copilot-c-hook)
(defun copilot-py-hook ()
  (define-key python-mode-map (kbd "C-c C-k") 'copilot-complete))
(add-hook 'python-common-hook 'copilot-py-hook)
;; (global-set-key (kbd "C-c C-k") 'copilot-complete)

(provide 'copilot)

;;; ansi-mode.el ends here
#+end_src

***** json-to-org-table.el
:PROPERTIES:
:ID:       2c5534c4-5ae0-4dda-a4b3-66e648b517c4
:CREATED:  [2023-04-14 Fri 17:22]
:UPDATED:  [2023-04-16 Sun 15:54]
:ROAM_REFS: https://raw.githubusercontent.com/renzmann/.emacs.d/aad505eaf1b452f6c675b85d43a4556b64cf702a/site-lisp/json-to-org-table/json-to-org-table.el
:END:

- note :: had to patch =[(foobar) ...]= to =(vector '(foobar)]= because of [[id:d4870719-33ce-4433-98ef-3867e1698969][elisp parser in RDE (clobbers vectors)]]

#+begin_src emacs-lisp
;;; json-to-org-table.el --- Converts json string to linked org table -*- lexical-binding: t; -*-
;;
;; Copyright (C) 2020 Joshua Person
;;
;; Author: Joshua Person <http://github.com/noonker>
;; Maintainer: Joshua Person <ceo@legitimate.company>
;; Created: December 06, 2020
;; Modified: December 06, 2020
;; Version: 0.0.1
;; Keywords:
;; Homepage: https://github.com/noonker/json-to-org-table
;; Package-Requires: ((emacs 27.1))
;;
;; This file is not part of GNU Emacs.
;;
;;; Commentary:
;;
;;  Converts json string to linked org table
;;
;;; Code:
;;; TODO: Better Examples

(defvar j2t-debug nil)

(defvar j2t-cs-map (vector '("\r" "")
                           '("\n" ""))
  "Map of characters to replace in json string.")

(defun j2t-cs (str)
  "Clean String.
Replace any string org mode wouldn't like according to the j2t-cs-map
STR: String to be replaced
RETURNS: A string with problematic characters returned"
  (seq-reduce
   (lambda (s m) (replace-regexp-in-string (car m) (cadr m) s))
   j2t-cs-map (format "%s" str)))

(defun j2t-lf (key &optional ref i)
  "Convert to link Link Format based on available args.
KEY: String or Symbol that becomes the name of the table
REF: If there is a Reference that becomes a subkey of the link
I: Is the Index for links in vectors"
  (cond (i (format "[[%s_%s%s]]" key ref (number-to-string i)))
        (ref (format "[[%s_%s]]" key ref))
        (t (format "[[%s]]" key))))

(defun j2t-hp (key value)
  "Hashmap Print prints a hashmap key-value table row.
KEY: Hashmap key column
VALUE: Hashmap value column"
  (format "|%s|%s|\n" (j2t-cs key) (j2t-cs value)))

(defmacro j2t-c+ (&rest str)
  "HACK: Concatenates all args and update the value of cur with new STR.
There's probably a better way to do this but this keeps things as clean
as possible in the =tablify= function."
  `(setq cur (concat cur (concat ,@str ))))

(defun j2t-parse-vector-vector (elt)
  "The row parser for a vector of vectors.
ELT: Is a vector to be turned into a table row
RETURNS: A table row representing the values of a vector"
  (let ((cur ""))
    (j2t-c+ "|")
    (mapc (lambda (x) (j2t-c+ (j2t-cs (format "%s" x)) "|" )) elt)
    (j2t-c+ "\n")
    cur
    )
  )

(defun j2t-parse-hashmap-vector (elt &optional ref i)
  "A row parser for a vector element composed of hashmaps.
ELT: A dotted pair cons representing a json hashmap
REF: Reference if this is a linked table
I: Optional Index for multiple linked tables
RETURNS: The table row representing values of a hashmap and a
         list of subtables to create if applicable
EXAMPLE: ((a . (b . 2)) (c . d) (e . f)) -> '(\"|[[a]]|d|f|]\" '(a (b .2) 1))"
  (let ((cur "")
        (keys (mapcar 'car elt))
        (nex '()))
    (mapcar (lambda (key)
              (let ((value (alist-get key elt)))
                (if (consp value)
                    (progn
                      (j2t-c+ (j2t-lf key ref i) "|")
                      (setq nex (append nex '('(key value i)))))
                  (j2t-c+ (j2t-cs value) "|" )))
              ) keys)
    `(,cur ,nex)
    ))


(defun j2t-parse-hash-element (elt &optional ref)
  "A row parser for elements of a hash map.
ELT: A dotted pair cons representing a json hashmap
REF: Reference if this is a linked table
RETURNS: Return an object who's first element is the generated string
         and the second element is the key if a new table is required.
EXAMPLE: (a . b) -> '(\"|a|b|\n\" '())"
  (let ((key (car elt))
        (val (cdr elt)))
    (cond ((not val) `(,(j2t-hp key "") nil))
          ((vectorp val) `(,(j2t-hp key (j2t-lf key ref)) ,key))
          ((consp val) `(,(j2t-hp key (j2t-lf key ref)) ,key))
          (t `(,(j2t-hp key (format "%s" val)) nil))
          )))

(defun j2t-tablify (elt &optional ref)
  "Function to be called recusrively to build an table.
ELT: a json object
REF: a reference is this is a linked table"
  (let ((cur "")
        (nex '()))
    (if j2t-debug (message (format "Got here! I was called with:\n  elt: %s\n  ref: %s\n" elt ref)))
    (if ref (j2t-c+ (format "#+name: %s\n" ref))) ;; If there's a reference add a name block to establish the linkage

    (cond
     ;; ----- Element is a hash-map -----
     ((consp elt)
      (progn
        (j2t-c+ "|key|value|\n|-\n") ;; Add headers for hashmap table
        ;; For each element in the hashmap either add the value or add a link to the table of values
        (mapc (lambda (x) (let ((parsed (j2t-parse-hash-element x ref)))
                            (format "x: %s\nparsed: %s" x parsed)
                            (j2t-c+ (car parsed))
                            (if (cadr parsed) (setq nex (append (cdr parsed) nex))))) elt)
        (j2t-c+ "\n")
        ;; Recursively call this function to create any subtables
        (mapc (lambda (x)  (progn  (if j2t-debug (message (format "\nThe symbol I'm going to look up is: %s\n  it's type is: %s\n  and the value is: %s" x (type-of x) (alist-get x elt))))
                                   (if ref
                                       (j2t-c+ (j2t-tablify (alist-get x elt) (format "%s_%s" x ref)))
                                     (j2t-c+ (j2t-tablify (alist-get x elt) (format "%s" x)))))) nex)
        ))

     ;; ----- Element is a vector and is a vector of hash-maps -----
     ((and (vectorp elt)
           (consp (aref elt 0)))
      (let ((keys (mapc 'car (aref elt 0)))
            )
        (j2t-c+ (format "|%s|\n" (string-join (mapcar (lambda (x) (format "%s" (car x))) keys) "|")))
        (j2t-c+ "|-\n")
        (seq-map-indexed
         (lambda (elt idx)
           (let ((parsed (j2t-parse-hashmap-vector elt ref idx)))
             (j2t-c+ "|")
             (j2t-c+ (car parsed))
             (j2t-c+ "\n")
             (if (cadr parsed) (setq nex (append (cdr parsed) nex))))
           ) elt)
        )

      ;; Recursively call this function to create any subtables
      (mapc (lambda (x) (let ((key (nth 0 x))
                              (value (nth 1 x))
                              (i (nth 2 x)))
                          (j2t-c+ (j2t-tablify value (format "%s_%s%s" key ref (format "%s" i)) )))) nex)
      )

     ;; ----- Element is a vector of vectors -----
     ((and (vectorp elt)
           (vectorp (aref elt 0)))
      (let ((a nil))
        (mapc (lambda (x) (j2t-c+ (j2t-parse-vector-vector x))) elt)
        (j2t-c+ "\n")
        ))

     ;; ----- Element is an empty vector -----
     ((and (vectorp elt)
           (= (length elt) 0))
      (j2t-c+ "| |\n")
      )

     ;; ----- Element is a vector of strings -----
     ((vectorp elt)
      (j2t-c+ (format "|%s|\n|-\n" ref))
      (mapc (lambda (x) (j2t-c+ "|" (j2t-cs x) "|" "\n")) elt)
      )
     )
    cur
    )
  )

(defun json-to-org-table-parse-json-string (str)
  "Read a json string, parse it, and return a tablified string.
STR: json string"
  (j2t-tablify (json-read-from-string str)))

(defun json-to-org-table-parse-json (js)
  "Read an Emacs json object, parse it, and return a tablified string.
The json should be in the format:
 - lists -> vectors
 - hashmaps -> alist cons
 - null -> \"\"
 - bool -> :json-true / :json-false
JS: json object"
  (j2t-tablify js))

(provide 'json-to-org-table)

;;; json-to-org-table.el ends here
#+end_src

#+RESULTS:
: json-to-org-table

** TODO scripts
:PROPERTIES:
:ID:       02cdcb21-e16b-44ac-a536-1fa1e05cd2b7
:CREATED:  [2022-11-08 Tue 12:06]
:UPDATED:  [2022-11-08 Tue 12:06]
:ROAM_EXCLUDE: t
:HEADER-ARGS: :noweb-ref null
:END:

*** on/off
:PROPERTIES:
:ID:       47e85da5-f5ea-4f5c-b26a-a10c0b8fdd3c
:CREATED:  [2022-11-09 Wed 10:14]
:UPDATED:  [2022-11-09 Wed 10:14]
:ROAM_EXCLUDE: t
:END:

*** hi
:PROPERTIES:
:ID:       2f5b0dd4-5f68-4efa-aadc-853c6d2fdb11
:CREATED:  [2022-11-09 Wed 10:14]
:UPDATED:  [2022-11-09 Wed 10:14]
:ROAM_EXCLUDE: t
:END:
#+begin_src shell
#+end_src

*** note-health
:PROPERTIES:
:ID:       f7f6f20c-7184-407b-b921-c5e70ebbbff5
:CREATED:  [2023-04-16 Sun 15:25]
:UPDATED:  [2023-09-24 Sun 16:07]
:ROAM_EXCLUDE: t
:END:

#+begin_src shell
echo autosaves: "$(find $HOME/life | grep -E '#' | tee /tmp/autosaves-life | wc -l)"
echo unignored: "$(cd $HOME/life && git ls-files -ic --ignored  --exclude-standard | tee /tmp/unignored-life | wc -l)"
#+end_src

#+RESULTS:
:results:
autosaves: 48
unignored: 1
:end:

*** TODO bye
:PROPERTIES:
:ID:       08229c7a-ffa3-4b09-8bfd-f8fa85300131
:CREATED:  [2022-11-09 Wed 10:14]
:UPDATED:  [2022-11-09 Wed 10:14]
:ROAM_EXCLUDE: t
:END:

#+begin_src elisp :noweb-ref null
(let ((mode :i))
  (cl-loop
   for command in '((herd (:i start :o stop) pipewire)
                    (sudo rfkill (:i block :o unblock) wifi))
   collect (cl-loop
            for term in command
            collect (if (eq 'cons (type-of term))
                        (progn (message "%s" term)
                               (plist-get term mode))
                      term))))
#+end_src

#+RESULTS:
| herd | start  | pipewire |      |
| sudo | rfkill | block    | wifi |
*** docker-passthrough
:PROPERTIES:
:ID:       c1f73c07-9941-4d4e-b288-d6047888ab7d
:CREATED:  [2023-04-03 Mon 13:05]
:UPDATED:  [2023-04-03 Mon 13:05]
:ROAM_EXCLUDE: t
:END:
**** TODO gcloud-auth
:PROPERTIES:
:ID:       da849b17-a219-4271-b724-fdaea774478d
:CREATED:  [2023-04-03 Mon 13:05]
:UPDATED:  [2023-04-03 Mon 13:05]
:ROAM_EXCLUDE: t
:END:
#+begin_src shell :tangle ~/.local/bin/gcloud-auth
#!/usr/bin/env sh

eval "docker run --rm --volumes-from gcloud-config gcr.io/google.com/cloudsdktool/google-cloud-cli gcloud auth login"
#+end_src
**** gcloud
:PROPERTIES:
:ID:       09a964e2-400a-4fd0-b379-d5acf0e1933f
:CREATED:  [2023-04-03 Mon 13:05]
:UPDATED:  [2024-01-19 Fri 12:12]
:ROAM_EXCLUDE: t
:END:

#+begin_src shell :tangle ~/.local/bin/gcloud
#!/usr/bin/env sh

eval "docker run --rm --volumes-from gcloud-config -v $PWD:/home/cloudsdk -w  /home/cloudsdk gcr.io/google.com/cloudsdktool/google-cloud-cli gcloud" "$@"
#+end_src

**** gsutil
:PROPERTIES:
:ID:       ba39068b-5e0d-49a3-83e3-2ac05eab3ef7
:CREATED:  [2023-07-18 Tue 12:11]
:UPDATED:  [2024-01-15 Mon 19:35]
:ROAM_EXCLUDE: t
:END:

#+begin_src shell :tangle ~/.local/bin/gsutil
#!/usr/bin/env sh

eval "docker run --rm --volumes-from gcloud-config -v $PWD:/home/cloudsdk -w  /home/cloudsdk gcr.io/google.com/cloudsdktool/google-cloud-cli gsutil" "$@"
#+end_src

**** bq
:PROPERTIES:
:ID:       13367261-6c04-4004-8a8b-45a5323035cc
:CREATED:  [2023-04-03 Mon 13:05]
:UPDATED:  [2023-11-15 Wed 14:44]
:ROAM_EXCLUDE: t
:END:

#+begin_src shell :tangle ~/.local/bin/bq
#!/usr/bin/env sh

# fucking hell :: https://stackoverflow.com/questions/1668649/how-to-keep-quotes-in-bash-arguments#1669548
# the saddest part is that it works 😭
# OFFERED WITH NO WARRANTY

qargs=$( printf ' %q' "$@" | sed -e 's/\\n/ /g' -e "s/\$'/'/g")

#echo $qargs > $HOME/.cache/bq.out

cmd='docker run --rm --volumes-from gcloud-config -v $HOME/tmp/ns:/tmp gcr.io/google.com/cloudsdktool/google-cloud-cli bq'

echo "$cmd" "$qargs" > $HOME/.cache/bq.in

eval "$cmd" "$qargs"| tee "${HOME}/.cache/bq.out"

# TODO safe fmt
# ((cat /tmp/bq-last.out | jq) ||  cat /tmp/bq-last.out) > /tmp/bq-last.out

#+end_src




***** testing: multiline
:PROPERTIES:
:ID:       b23cb3d2-eb80-469e-9d77-96859d449773
:CREATED:  [2023-06-05 Mon 11:18]
:UPDATED:  [2023-06-05 Mon 12:01]
:ROAM_EXCLUDE: t
:END:

#+begin_src sql
select 1,
  --hello
       2,
       'ollh'

#+end_src

#+RESULTS:
| f0_ | f1_ | f2_  |
|-----+-----+------|
|   1 |   2 | ollh |

#+begin_src shell


q="
select 1,
  --hello
       2,
       'olleh'
"
eval "docker run --rm --volumes-from gcloud-config gcr.io/google.com/cloudsdktool/google-cloud-cli bq query \
       --format=json --nouse_legacy_sql \"$q\""

#+end_src

#+RESULTS:
:results:
[{"f0_":"1","f1_":"2","f2_":"olleh"}]
:end:

***** testing: backticks
:PROPERTIES:
:ID:       3a7a7c45-7b85-4396-a71b-feb873344299
:CREATED:  [2023-06-05 Mon 12:18]
:UPDATED:  [2023-06-16 Fri 08:33]
:ROAM_EXCLUDE: t
:END:


#+begin_src sql
select 5,
  --hello
       2,
       `ollh`

#+end_src

#+RESULTS:
| f0_ |
|-----|
|   5 |

* etc
:PROPERTIES:
:ID:       88c5af73-609a-4019-ba2f-543528a7b6e2
:CREATED:  [2022-09-28 Wed 14:29]
:UPDATED:  [2022-09-28 Wed 14:29]
:ROAM_EXCLUDE: t
:END:

** external resources
:PROPERTIES:
:ID:       e5794fcd-5a9a-420b-b286-9451cff72f06
:CREATED:  [2022-08-01 Mon 17:42]
:UPDATED:  [2022-09-28 Wed 16:41]
:ROAM_EXCLUDE: t
:END:

*** rofi theme: base16-dark
:PROPERTIES:
:ID:       2669cfa7-4f1b-460c-acde-711d8f49a90f
:CREATED:  [2022-09-28 Wed 14:29]
:UPDATED:  [2022-09-28 Wed 14:29]
:ROAM_EXCLUDE: t
:END:
#+begin_src shell
p="$HOME/git/sys/rde/rde/examples/abcdw/config/rofi/themes"
mkdir -p $p

curl https://raw.githubusercontent.com/qzdl/rde/qzdl/rde/examples/abcdw/config/rofi/themes/base16-default-dark.rasi \
     -o $p/base16-default-dark.rasi
#+end_src

#+RESULTS:

** test
:PROPERTIES:
:ID:       cdeb56a4-5c09-4531-bba6-0c0c31bbdd55
:CREATED:  [2022-08-01 Mon 12:27]
:UPDATED:  [2022-08-01 Mon 12:27]
:ROAM_EXCLUDE: t
:END:

*** e2e: make ixy-home
:PROPERTIES:
:ID:       b72fea65-890d-44b4-b746-2f13a8cba015
:CREATED:  [2022-09-28 Wed 16:41]
:UPDATED:  [2022-09-28 Wed 16:41]
:ROAM_EXCLUDE: t
:END:

#+begin_src shell :results drawer
make ixy-home >&/tmp/o

cat /tmp/o
#+end_src

#+RESULTS:
:results:
GUILE_LOAD_PATH=../../../ RDE_TARGET=%-home \
guix home reconfigure ./configs.scm
"pre-%user-features"
"pre-%main-features"
rde/examples/abcdw/configs.scm:1032:1: missing closing parenthesis
make: *** [Makefile:14: %-home-reconfigure] Error 1
:end:

*** describe: file hashes
:PROPERTIES:
:ID:       c7eb4b3e-4413-4759-b9b2-7bb0b2893f02
:CREATED:  [2022-09-28 Wed 16:42]
:UPDATED:  [2022-09-28 Wed 16:42]
:ROAM_EXCLUDE: t
:END:

** concerns                                                                    :task:
:PROPERTIES:
:ID:       b5ed68eb-64ff-4878-9f79-9baddfd6e45c
:CREATED:  [2022-09-28 Wed 16:40]
:UPDATED:  [2022-09-28 Wed 16:40]
:ROAM_EXCLUDE: t
:END:
*** emacs                                                                     :emacs:
:PROPERTIES:
:ID:       15c5b396-318c-4de7-ba73-0cb446b4b40a
:CREATED:  [2022-09-28 Wed 16:40]
:UPDATED:  [2022-09-28 Wed 16:40]
:ROAM_EXCLUDE: t
:END:
**** TODO investigate completion interface; /why does ~C-k~ not work in ~{M-s l}~ / consult commands?/ (vertico?)
:PROPERTIES:
:ID:       9b2e7d9f-4feb-4229-b74f-ba52bef11176
:CREATED:  [2022-09-28 Wed 16:44]
:UPDATED:  [2022-09-28 Wed 16:44]
:ROAM_EXCLUDE: t
:END:

{M-s l abc C-a C-k}
**** TODO fix hyperbole loading
:PROPERTIES:
:ID:       dafa5eec-e33b-47a8-bd20-a6d9c1eb6378
:CREATED:  [2022-09-28 Wed 16:45]
:UPDATED:  [2022-09-28 Wed 16:45]
:ROAM_EXCLUDE: t
:END:

as of [2022-09-28 Wed 16:45] (and for the last few weeks) loading hypb yields error for ~klink~;

eval

(require 'hyperbole)

and observe the following
#+begin_example
Debugger entered--Lisp error: (file-missing "Cannot open load file" "No such file or directory" "klink")
  load("klink")
  byte-code("\300\301\302\"\210\303\304\305\306#\210\307\310!\210\311\312!\207" [setplist ibtypes::man-apropos (definition-name man-apropos quote (to-p nil style nil)) symset:add man-apropos ibtypes symbols run-hooks htype-create-hook load "klink"] 4)
  require(hibtypes)
  mapc(require (hvar hui-menu hui-mouse hypb hui hui-mini hbmap hibtypes))
  byte-code("\300\301\302\"\210\303\304!\204\20\0\305\304\306\"\210\300\207" [mapc require (hvar hui-menu hui-mouse hypb hui hui-mini hbmap hibtypes) fboundp br-in-browser defalias #f(compiled-function () #<bytecode 0x1d8376ab5ddfaff0>)] 3)
  require(hinit)
  require(hyperbole)
  eval((require 'hyperbole) t)
  eval-expression((require 'hyperbole) nil nil 127)
  funcall-interactively(eval-expression (require 'hyperbole) nil nil 127)
  call-interactively(eval-expression nil nil)
  command-execute(eval-expression)

#+end_example
**** org
:PROPERTIES:
:ID:       7c716491-ce73-4f8c-8fac-4286ce637e88
:CREATED:  [2022-09-28 Wed 16:48]
:UPDATED:  [2023-04-15 Sat 13:42]
:ROAM_EXCLUDE: t
:HEADER-ARGS: :noweb-ref org
:END:
***** TODO port CREATED/UPDATED from file stat info from git
:PROPERTIES:
:ID:       5262d510-7a89-4a2c-bf78-143c11404444
:CREATED:  [2022-09-28 Wed 16:48]
:UPDATED:  [2022-10-05 Wed 19:29]
:ROAM_EXCLUDE: t
:END:
****** attribute created from headline, using [[id:5367ec4f-24d6-4416-a8d9-18df8cb1c0c2][created && updated]]
:PROPERTIES:
:ID:       c0f96018-5457-458c-908c-05fcddc9d052
:CREATED:  [2022-09-28 Wed 16:49]
:UPDATED:  [2022-09-28 Wed 16:49]
:ROAM_EXCLUDE: t
:END:

***** TODO fix dispatch stuff ([[id:f31ab35b-59e7-4d2c-a123-5957a7da14c8][node-dispatch]])
:PROPERTIES:
:ID:       0e8868c1-c243-42fb-bd7c-5bbb8a21ddce
:CREATED:  [2022-09-28 Wed 11:43]
:UPDATED:  [2022-09-28 Wed 17:43]
:ROAM_EXCLUDE: t
:END:
****** TODO [#A] elisp parser in RDE
:PROPERTIES:
:ID:       d4870719-33ce-4433-98ef-3867e1698969
:CREATED:  [2022-09-28 Wed 14:12]
:UPDATED:  [2023-06-01 Thu 23:31]
:ROAM_EXCLUDE: t
:END:

******* problems
:PROPERTIES:
:ID:       0415f739-d3a7-42bb-b0b0-90eb2ee2c6f7
:CREATED:  [2023-05-03 Wed 18:06]
:UPDATED:  [2023-05-03 Wed 18:06]
:ROAM_EXCLUDE: t
:END:
******** clobbers vectors
:PROPERTIES:
:ID:       72e5eb23-331e-445a-8004-86637ccf88ad
:CREATED:  [2023-05-03 Wed 18:06]
:UPDATED:  [2023-05-03 Wed 18:06]
:ROAM_EXCLUDE: t
:END:
******** clobbers symbols beginning with numbers =44:= -> ~#{44:}~ :: =1+= -> ~#{1+}~
:PROPERTIES:
:ID:       3bc8f3bd-3c9d-49d0-8ec8-659b95458f81
:CREATED:  [2023-05-03 Wed 18:06]
:UPDATED:  [2023-05-03 Wed 18:06]
:ROAM_EXCLUDE: t
:END:
******** clobbers symbols -- some compound utf chars :: 🐕‍🦺 ->#{🐕\x200d;🦺}#
:PROPERTIES:
:CREATED:  [2023-09-24 Sun 15:42]
:UPDATED:  [2023-09-24 Sun 15:42]
:ID:       979a9abb-aba2-4d82-ab5d-b9c4bb913bf4
:ROAM_EXCLUDE: t
:END:
******** unquote literals =,=  become literal =unquote=
:PROPERTIES:
:ID:       6cdd496b-c4ef-4998-9d48-5bf40f0b1246
:CREATED:  [2023-06-01 Thu 23:31]
:UPDATED:  [2023-06-01 Thu 23:31]
:ROAM_EXCLUDE: t
:END:


#+DOWNLOADED: screenshot @ 2023-06-01 23:31:00
[[file:etc/2023-06-01_23-31-00_screenshot.png]]

******* TODO update rde
:PROPERTIES:
:ID:       3c4ea3e2-da0d-4265-911a-0a1e8c272e01
:CREATED:  [2022-09-28 Wed 15:30]
:UPDATED:  [2022-09-28 Wed 17:44]
:ROAM_EXCLUDE: t
:END:
******** DONE rebase rde
CLOSED: [2022-09-28 Wed 14:39]
:PROPERTIES:
:ID:       b94f35eb-0413-466f-8b3b-18b57047a7f7
:CREATED:  [2022-09-28 Wed 14:12]
:UPDATED:  [2022-09-28 Wed 14:13]
:ROAM_EXCLUDE: t
:END:
:LOGBOOK:
- CLOSING NOTE [2022-09-28 Wed 14:39] \\
  just trash configs.scm lol
CLOCK: [2022-09-28 Wed 14:13]--[2022-09-28 Wed 14:39] =>  0:26
:END:

******** DONE pull guix
CLOSED: [2022-09-28 Wed 15:28]
:PROPERTIES:
:ID:       758f97f0-c6e3-448b-9679-689495d6e5a9
:CREATED:  [2022-09-28 Wed 14:39]
:UPDATED:  [2022-09-28 Wed 14:39]
:ROAM_EXCLUDE: t
:END:
:LOGBOOK:
CLOCK: [2022-09-28 Wed 14:39]--[2022-09-28 Wed 14:45] =>  0:06
:END:

hello

******** DONE fix (unrelated errors) elisp config
CLOSED: [2022-09-28 Wed 15:28]
:PROPERTIES:
:ID:       699d3ef0-e0db-4bfc-879e-ccbbbdbb0824
:CREATED:  [2022-09-28 Wed 15:28]
:UPDATED:  [2022-09-28 Wed 15:29]
:ROAM_EXCLUDE: t
:END:
:LOGBOOK:
- CLOSING NOTE [2022-09-28 Wed 15:28] \\
  :PROPERTIES:
  :UPDATED:  [2022-09-28 Wed 15:29]
:END:

tangle -> validate -> continue

extra paren check needed for all tangled files
CLOCK: [2022-09-28 Wed 14:45]--[2022-09-28 Wed 15:28] =>  0:43
:END:

******** TODO fix rde config
:PROPERTIES:
:ID:       b18f6878-1081-4ced-a467-f54ee66fb1ac
:CREATED:  [2022-09-28 Wed 15:30]
:UPDATED:  [2022-09-28 Wed 17:29]
:ROAM_EXCLUDE: t
:END:
:LOGBOOK:
CLOCK: [2022-09-28 Wed 15:28]--[2022-09-28 Wed 17:29] =>  2:01
:END:

********* DONE =rde/examples/abcdw/configs.scm:813:5: error: feature-emacs-appearance: unbound variable=
:PROPERTIES:
:ID:       97722b28-eb97-44b7-9769-a2bbdcabdf9e
:CREATED:  [2022-09-28 Wed 15:30]
:UPDATED:  [2022-09-28 Wed 17:44]
:ROAM_EXCLUDE: t
:END:
******* TODO test elisp parser for vector support
:PROPERTIES:
:ID:       e3a0accc-135d-43dd-81be-e6e3e3aeb5db
:CREATED:  [2022-09-28 Wed 14:12]
:UPDATED:  [2022-11-08 Tue 12:22]
:ROAM_EXCLUDE: t
:END:

***** TODO fix org stuff
:PROPERTIES:
:ID:       7f5afdfa-fc3b-47ae-a804-f2c01f215fc0
:CREATED:  [2022-09-28 Wed 14:13]
:UPDATED:  [2022-09-28 Wed 17:38]
:ROAM_EXCLUDE: t
:END:
**** keyword / sequence to include NEXT
:PROPERTIES:
:ID:       64a44bf1-71f7-491c-95c0-562189180635
:CREATED:  [2022-09-28 Wed 14:13]
:UPDATED:  [2022-09-28 Wed 14:13]
:ROAM_EXCLUDE: t
:END:
***** TODO ... search in RDE
:PROPERTIES:
:ID:       cb7d58f5-4c44-44cd-bdbd-221cddaae481
:CREATED:  [2022-09-28 Wed 14:13]
:UPDATED:  [2022-09-28 Wed 14:13]
:ROAM_EXCLUDE: t
:END:
*** guix                                                                       :guix:
:PROPERTIES:
:ID:       2d285252-67e4-4455-a4bc-5a486ebc7718
:CREATED:  [2022-09-28 Wed 16:40]
:UPDATED:  [2022-09-28 Wed 16:40]
:ROAM_EXCLUDE: t
:END:
**** TODO upstream [[id:1bca3f7a-3f6b-4ffa-bf10-0856b0eb8a01][emacs-sql-indent]]
:PROPERTIES:
:ID:       fd3d9257-d718-4b7b-8ceb-b2d27da0b32b
:CREATED:  [2022-09-28 Wed 16:40]
:UPDATED:  [2022-09-28 Wed 16:40]
:ROAM_EXCLUDE: t
:END:
**** TODO upstream [[id:58790647-3625-4145-87d8-2a5baa335b0f][emacs-ob-go]]
:PROPERTIES:
:ID:       2e30d804-96c8-448b-8cc8-8f41c570086c
:CREATED:  [2022-09-28 Wed 16:40]
:UPDATED:  [2022-09-28 Wed 16:41]
:ROAM_EXCLUDE: t
:END:
*** rde                                                                         :rde:
:PROPERTIES:
:ID:       31909571-94cc-4718-a971-558ac7074120
:CREATED:  [2022-08-15 Mon 12:01]
:UPDATED:  [2022-09-28 Wed 16:41]
:ROAM_EXCLUDE: t
:END:

**** TODO org heading binds =C-M-=
:PROPERTIES:
:ID:       86921d8a-358e-4383-bbb2-3d0b47602315
:CREATED:  [2022-08-15 Mon 12:01]
:UPDATED:  [2022-08-15 Mon 12:01]
:ROAM_EXCLUDE: t
:END:

**** TODO org agenda exports
:PROPERTIES:
:ID:       bd9f9bf3-e5e9-4f43-adc6-a30b64378c66
:CREATED:  [2022-08-15 Mon 12:01]
:UPDATED:  [2022-08-29 Mon 16:40]
:ROAM_EXCLUDE: t
:END:
:LOGBOOK:
CLOCK: [2022-08-15 Mon 12:02]--[2022-08-15 Mon 12:18] =>  0:16
:END:

- made commit 7e655baad683b49c53a2683012576b7fb35dafa1

**** TODO system-wide media status
:PROPERTIES:
:ID:       5923dc5e-4e2f-473a-9145-d0858d5d811d
:CREATED:  [2022-08-26 Fri 11:49]
:UPDATED:  [2022-08-26 Fri 11:49]
:ROAM_EXCLUDE: t
:END:

***** feature: respect play / pause / skip from media controls (airpods)
:PROPERTIES:
:ID:       bbee3792-cbb4-4064-b9c8-7dcb742031a5
:CREATED:  [2022-08-26 Fri 11:49]
:UPDATED:  [2022-08-26 Fri 11:49]
:ROAM_EXCLUDE: t
:END:

**** TODO kde-connect
:PROPERTIES:
:ID:       1548dc33-dceb-4e69-8326-32f9559e4e21
:CREATED:  [2022-08-26 Fri 11:49]
:UPDATED:  [2022-08-26 Fri 11:49]
:ROAM_EXCLUDE: t
:END:

**** TODO investigate elisp-serializer clobbering vectors ~[:select abc ...]~ as paren'd functions
:PROPERTIES:
:ID:       d1fc1e48-c5e9-4f02-a718-3419f61f81a0
:CREATED:  [2022-09-28 Wed 16:46]
:UPDATED:  [2022-09-28 Wed 16:46]
:ROAM_EXCLUDE: t
:END:

**** TODO emacs popups
:PROPERTIES:
:ID:       3f1f675d-00f4-4f31-93dc-10beed905999
:CREATED:  [2022-09-28 Wed 16:47]
:UPDATED:  [2022-09-28 Wed 16:47]
:ROAM_EXCLUDE: t
:END:

***** calendar
:PROPERTIES:
:ID:       3b5d8aed-2122-4e86-b438-e0e306c26536
:CREATED:  [2022-09-28 Wed 16:47]
:UPDATED:  [2022-09-28 Wed 16:47]
:ROAM_EXCLUDE: t
:END:

***** password-store
:PROPERTIES:
:ID:       6a28ec41-45ed-430c-abc9-89c7faed2e24
:CREATED:  [2022-09-28 Wed 16:47]
:UPDATED:  [2022-09-28 Wed 16:47]
:ROAM_EXCLUDE: t
:END:
***** org-capture
:PROPERTIES:
:ID:       79feb294-8327-47d1-b583-f9ed9475855c
:CREATED:  [2022-09-28 Wed 16:47]
:UPDATED:  [2022-09-28 Wed 16:47]
:ROAM_EXCLUDE: t
:END:
****** protocol (inbox, node)
:PROPERTIES:
:ID:       7fbfe5c7-7196-4861-b306-20bd50774e2b
:CREATED:  [2022-09-28 Wed 16:47]
:UPDATED:  [2022-09-28 Wed 16:47]
:ROAM_EXCLUDE: t
:END:
****** daily
:PROPERTIES:
:ID:       ed8adb71-72ab-4156-bab8-4fe2f4712812
:CREATED:  [2022-09-28 Wed 16:47]
:UPDATED:  [2023-10-23 Mon 08:52]
:ROAM_EXCLUDE: t
:END:
***** gpg pinentry
:PROPERTIES:
:ID:       e605cc8f-8cc4-48c4-b874-e5a67007de83
:CREATED:  [2022-09-28 Wed 16:47]
:UPDATED:  [2022-09-28 Wed 16:47]
:ROAM_EXCLUDE: t
:END:
* Footnotes
:PROPERTIES:
:ID:       476ef762-1350-4afa-a8ad-2cd3e42eb730
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-07-07 Fri 14:42]
:END:

[fn:6] :uniformity:
[fn:5] though I had to kill-yank this paragraph back in-front of the
[[id:0164a152-f655-4143-85eb-8b0c4e3b1516][#+RESULTS]].


[fn:4] as of [2022-10-05 Wed], [[id:93ad19fa-a4fe-48c8-81ac-42bd5e138af9][swaywm]]
[fn:3] using olivetti, nov-el, and rde@77bf57ba

[fn:2] example for how =:var= header args are dealt with in an
=org-babel-execute:backend= situation

#+begin_src emacs-lisp :tangle no :noweb-ref null
(defun org-babel-execute:restclient (body params)
  "Execute a block of Restclient code with org-babel.
This function is called by `org-babel-execute-src-block'"
  (message "executing Restclient source code block")
  (with-temp-buffer
    (let ((results-buffer (current-buffer))
          (restclient-same-buffer-response t)
          (restclient-same-buffer-response-name (buffer-name))
          (display-buffer-alist
           (cons
            '("\\*temp\\*" display-buffer-no-window (allow-no-window . t))
            display-buffer-alist)))

      (insert (buffer-name))
      (with-temp-buffer
        (dolist (p params)
          (let ((key (car p))
                (value (cdr p)))
            (when (eql key :var)
              (insert (format ":%s = <<\n%s\n#\n" (car value) (cdr value))))))
        (insert body)
        (goto-char (point-min))
        (delete-trailing-whitespace)
        (goto-char (point-min))
        (restclient-http-parse-current-and-do
         'restclient-http-do (org-babel-restclient--raw-payload-p params) t))

      (while restclient-within-call
        (sleep-for 0.05))

      (goto-char (point-min))
      (when (equal (buffer-name) (buffer-string))
        (error "Restclient encountered an error"))

      (when (or (org-babel-restclient--return-pure-payload-result-p params)
                (assq :noheaders params)
                (assq :jq params))
        (org-babel-restclient--hide-headers))

       (when-let* ((jq-header (assoc :jq params))
                  (jq-path "jq"))
        (shell-command-on-region
         (point-min)
         (point-max)
         (format "%s %s" org-babel-restclient--jq-path
                         (shell-quote-argument (cdr jq-header)))
         (current-buffer)
         t))

       ;; widen if jq but not pure payload
      (when (and (assq :jq params)
                 (not (assq :noheaders params))
                 (not (org-babel-restclient--return-pure-payload-result-p params)))
        (widen))

      (when (not (org-babel-restclient--return-pure-payload-result-p params))
        (org-babel-restclient--wrap-result))

      (buffer-string))))
#+end_src
[fn:1] capture template as an interactive function so we can use it as
a COMMAND, and consequently, bind it to a key--better traceability
than a lambda
